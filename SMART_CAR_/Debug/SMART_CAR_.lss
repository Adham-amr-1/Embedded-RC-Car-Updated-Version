
SMART_CAR_.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000059fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000174  00800060  000059fe  00005a92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  008001d4  008001d4  00005c06  2**0
                  ALLOC
  3 .stab         00005970  00000000  00000000  00005c08  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d00  00000000  00000000  0000b578  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000d278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000d438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000d64c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000fc5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0001112c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00012438  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00012618  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0001291f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013339  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f9 e5       	ldi	r31, 0x59	; 89
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3d       	cpi	r26, 0xD4	; 212
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ed       	ldi	r26, 0xD4	; 212
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3e       	cpi	r26, 0xEB	; 235
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <main>
      8a:	0c 94 fd 2c 	jmp	0x59fa	; 0x59fa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 95 2c 	jmp	0x592a	; 0x592a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab ec       	ldi	r26, 0xCB	; 203
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b1 2c 	jmp	0x5962	; 0x5962 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a1 2c 	jmp	0x5942	; 0x5942 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bd 2c 	jmp	0x597a	; 0x597a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a1 2c 	jmp	0x5942	; 0x5942 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bd 2c 	jmp	0x597a	; 0x597a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 95 2c 	jmp	0x592a	; 0x592a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8b ec       	ldi	r24, 0xCB	; 203
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b1 2c 	jmp	0x5962	; 0x5962 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9d 2c 	jmp	0x593a	; 0x593a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b ec       	ldi	r22, 0xCB	; 203
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b9 2c 	jmp	0x5972	; 0x5972 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a1 2c 	jmp	0x5942	; 0x5942 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 bd 2c 	jmp	0x597a	; 0x597a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a1 2c 	jmp	0x5942	; 0x5942 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 bd 2c 	jmp	0x597a	; 0x597a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a1 2c 	jmp	0x5942	; 0x5942 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 bd 2c 	jmp	0x597a	; 0x597a <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 9e 2c 	jmp	0x593c	; 0x593c <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 ba 2c 	jmp	0x5974	; 0x5974 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 a5 2c 	jmp	0x594a	; 0x594a <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 c1 2c 	jmp	0x5982	; 0x5982 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 9d 2c 	jmp	0x593a	; 0x593a <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 b9 2c 	jmp	0x5972	; 0x5972 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ed 52       	subi	r30, 0x2D	; 45
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <Button_vintial>:
 *  Author: Adham Amr
 */ 
#include "BUTTON.h"

void Button_vintial(u8 PORT_NO, u8 PIN_NO)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <Button_vintial+0x6>
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	89 83       	std	Y+1, r24	; 0x01
     ef6:	6a 83       	std	Y+2, r22	; 0x02
	DIO_Set_Pin_Direction(PORT_NO,PIN_NO,INPUT);
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	6a 81       	ldd	r22, Y+2	; 0x02
     efc:	40 e0       	ldi	r20, 0x00	; 0
     efe:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
}
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <Button_u8read>:
u8 Button_u8read(u8 PORT_NO, u8 PIN_NO)
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	00 d0       	rcall	.+0      	; 0xf12 <Button_u8read+0x6>
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	89 83       	std	Y+1, r24	; 0x01
     f18:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_u8ReadPin(PORT_NO,PIN_NO);
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	6a 81       	ldd	r22, Y+2	; 0x02
     f1e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <DIO_u8ReadPin>
}
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <Button_Set_PullUp>:
void Button_Set_PullUp(u8 PORT_NO, u8 PIN_NO)
{
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	00 d0       	rcall	.+0      	; 0xf32 <Button_Set_PullUp+0x6>
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
     f36:	89 83       	std	Y+1, r24	; 0x01
     f38:	6a 83       	std	Y+2, r22	; 0x02
	DIO_PullUp_Active(PORT_NO, PIN_NO);
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	6a 81       	ldd	r22, Y+2	; 0x02
     f3e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_PullUp_Active>
}
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <DIO_Set_Pin_Direction>:
/*
Controlling on One Pin
 */
/* Set Direction of pins { input ( 0 ) or Output ( 1 ) }  */
void DIO_Set_Pin_Direction(u8 PORT_NO,u8 PIN_NO,u8 PIN_DIRECTION)
{
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	2d 97       	sbiw	r28, 0x0d	; 13
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	de bf       	out	0x3e, r29	; 62
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	cd bf       	out	0x3d, r28	; 61
     f60:	89 83       	std	Y+1, r24	; 0x01
     f62:	6a 83       	std	Y+2, r22	; 0x02
     f64:	4b 83       	std	Y+3, r20	; 0x03
	switch (PORT_NO)
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	3d 87       	std	Y+13, r19	; 0x0d
     f6e:	2c 87       	std	Y+12, r18	; 0x0c
     f70:	8c 85       	ldd	r24, Y+12	; 0x0c
     f72:	9d 85       	ldd	r25, Y+13	; 0x0d
     f74:	84 34       	cpi	r24, 0x44	; 68
     f76:	91 05       	cpc	r25, r1
     f78:	09 f4       	brne	.+2      	; 0xf7c <DIO_Set_Pin_Direction+0x30>
     f7a:	dd c0       	rjmp	.+442    	; 0x1136 <DIO_Set_Pin_Direction+0x1ea>
     f7c:	2c 85       	ldd	r18, Y+12	; 0x0c
     f7e:	3d 85       	ldd	r19, Y+13	; 0x0d
     f80:	25 34       	cpi	r18, 0x45	; 69
     f82:	31 05       	cpc	r19, r1
     f84:	94 f4       	brge	.+36     	; 0xfaa <DIO_Set_Pin_Direction+0x5e>
     f86:	8c 85       	ldd	r24, Y+12	; 0x0c
     f88:	9d 85       	ldd	r25, Y+13	; 0x0d
     f8a:	82 34       	cpi	r24, 0x42	; 66
     f8c:	91 05       	cpc	r25, r1
     f8e:	09 f4       	brne	.+2      	; 0xf92 <DIO_Set_Pin_Direction+0x46>
     f90:	62 c0       	rjmp	.+196    	; 0x1056 <DIO_Set_Pin_Direction+0x10a>
     f92:	2c 85       	ldd	r18, Y+12	; 0x0c
     f94:	3d 85       	ldd	r19, Y+13	; 0x0d
     f96:	23 34       	cpi	r18, 0x43	; 67
     f98:	31 05       	cpc	r19, r1
     f9a:	0c f0       	brlt	.+2      	; 0xf9e <DIO_Set_Pin_Direction+0x52>
     f9c:	94 c0       	rjmp	.+296    	; 0x10c6 <DIO_Set_Pin_Direction+0x17a>
     f9e:	8c 85       	ldd	r24, Y+12	; 0x0c
     fa0:	9d 85       	ldd	r25, Y+13	; 0x0d
     fa2:	81 34       	cpi	r24, 0x41	; 65
     fa4:	91 05       	cpc	r25, r1
     fa6:	f9 f0       	breq	.+62     	; 0xfe6 <DIO_Set_Pin_Direction+0x9a>
     fa8:	fc c0       	rjmp	.+504    	; 0x11a2 <DIO_Set_Pin_Direction+0x256>
     faa:	2c 85       	ldd	r18, Y+12	; 0x0c
     fac:	3d 85       	ldd	r19, Y+13	; 0x0d
     fae:	22 36       	cpi	r18, 0x62	; 98
     fb0:	31 05       	cpc	r19, r1
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <DIO_Set_Pin_Direction+0x6a>
     fb4:	50 c0       	rjmp	.+160    	; 0x1056 <DIO_Set_Pin_Direction+0x10a>
     fb6:	8c 85       	ldd	r24, Y+12	; 0x0c
     fb8:	9d 85       	ldd	r25, Y+13	; 0x0d
     fba:	83 36       	cpi	r24, 0x63	; 99
     fbc:	91 05       	cpc	r25, r1
     fbe:	34 f4       	brge	.+12     	; 0xfcc <DIO_Set_Pin_Direction+0x80>
     fc0:	2c 85       	ldd	r18, Y+12	; 0x0c
     fc2:	3d 85       	ldd	r19, Y+13	; 0x0d
     fc4:	21 36       	cpi	r18, 0x61	; 97
     fc6:	31 05       	cpc	r19, r1
     fc8:	71 f0       	breq	.+28     	; 0xfe6 <DIO_Set_Pin_Direction+0x9a>
     fca:	eb c0       	rjmp	.+470    	; 0x11a2 <DIO_Set_Pin_Direction+0x256>
     fcc:	8c 85       	ldd	r24, Y+12	; 0x0c
     fce:	9d 85       	ldd	r25, Y+13	; 0x0d
     fd0:	83 36       	cpi	r24, 0x63	; 99
     fd2:	91 05       	cpc	r25, r1
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <DIO_Set_Pin_Direction+0x8c>
     fd6:	77 c0       	rjmp	.+238    	; 0x10c6 <DIO_Set_Pin_Direction+0x17a>
     fd8:	2c 85       	ldd	r18, Y+12	; 0x0c
     fda:	3d 85       	ldd	r19, Y+13	; 0x0d
     fdc:	24 36       	cpi	r18, 0x64	; 100
     fde:	31 05       	cpc	r19, r1
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <DIO_Set_Pin_Direction+0x98>
     fe2:	a9 c0       	rjmp	.+338    	; 0x1136 <DIO_Set_Pin_Direction+0x1ea>
     fe4:	de c0       	rjmp	.+444    	; 0x11a2 <DIO_Set_Pin_Direction+0x256>
	{
	case 'A':
	case 'a':
		switch(PIN_DIRECTION)
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	3b 87       	std	Y+11, r19	; 0x0b
     fee:	2a 87       	std	Y+10, r18	; 0x0a
     ff0:	8a 85       	ldd	r24, Y+10	; 0x0a
     ff2:	9b 85       	ldd	r25, Y+11	; 0x0b
     ff4:	00 97       	sbiw	r24, 0x00	; 0
     ff6:	d1 f0       	breq	.+52     	; 0x102c <DIO_Set_Pin_Direction+0xe0>
     ff8:	2a 85       	ldd	r18, Y+10	; 0x0a
     ffa:	3b 85       	ldd	r19, Y+11	; 0x0b
     ffc:	21 30       	cpi	r18, 0x01	; 1
     ffe:	31 05       	cpc	r19, r1
    1000:	09 f0       	breq	.+2      	; 0x1004 <DIO_Set_Pin_Direction+0xb8>
    1002:	cf c0       	rjmp	.+414    	; 0x11a2 <DIO_Set_Pin_Direction+0x256>
		{
		case OUTPUT:
			SET_BIT(DDRA,PIN_NO);
    1004:	aa e3       	ldi	r26, 0x3A	; 58
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	ea e3       	ldi	r30, 0x3A	; 58
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <DIO_Set_Pin_Direction+0xd6>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <DIO_Set_Pin_Direction+0xd2>
    1026:	84 2b       	or	r24, r20
    1028:	8c 93       	st	X, r24
    102a:	bb c0       	rjmp	.+374    	; 0x11a2 <DIO_Set_Pin_Direction+0x256>
			break;
		case INPUT:
			CLEAR_BIT(DDRA,PIN_NO);
    102c:	aa e3       	ldi	r26, 0x3A	; 58
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	ea e3       	ldi	r30, 0x3A	; 58
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	48 2f       	mov	r20, r24
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	02 2e       	mov	r0, r18
    1044:	02 c0       	rjmp	.+4      	; 0x104a <DIO_Set_Pin_Direction+0xfe>
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	0a 94       	dec	r0
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <DIO_Set_Pin_Direction+0xfa>
    104e:	80 95       	com	r24
    1050:	84 23       	and	r24, r20
    1052:	8c 93       	st	X, r24
    1054:	a6 c0       	rjmp	.+332    	; 0x11a2 <DIO_Set_Pin_Direction+0x256>
			break;
		}
		break;
	case 'B':
	case 'b':
		switch(PIN_DIRECTION)
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	39 87       	std	Y+9, r19	; 0x09
    105e:	28 87       	std	Y+8, r18	; 0x08
    1060:	88 85       	ldd	r24, Y+8	; 0x08
    1062:	99 85       	ldd	r25, Y+9	; 0x09
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	d1 f0       	breq	.+52     	; 0x109c <DIO_Set_Pin_Direction+0x150>
    1068:	28 85       	ldd	r18, Y+8	; 0x08
    106a:	39 85       	ldd	r19, Y+9	; 0x09
    106c:	21 30       	cpi	r18, 0x01	; 1
    106e:	31 05       	cpc	r19, r1
    1070:	09 f0       	breq	.+2      	; 0x1074 <DIO_Set_Pin_Direction+0x128>
    1072:	97 c0       	rjmp	.+302    	; 0x11a2 <DIO_Set_Pin_Direction+0x256>
		{
		case OUTPUT:
			SET_BIT(DDRB,PIN_NO);
    1074:	a7 e3       	ldi	r26, 0x37	; 55
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e7 e3       	ldi	r30, 0x37	; 55
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_Set_Pin_Direction+0x146>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_Set_Pin_Direction+0x142>
    1096:	84 2b       	or	r24, r20
    1098:	8c 93       	st	X, r24
    109a:	83 c0       	rjmp	.+262    	; 0x11a2 <DIO_Set_Pin_Direction+0x256>
			break;
		case INPUT:
			CLEAR_BIT(DDRB,PIN_NO);
    109c:	a7 e3       	ldi	r26, 0x37	; 55
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	e7 e3       	ldi	r30, 0x37	; 55
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	48 2f       	mov	r20, r24
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 2e       	mov	r0, r18
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <DIO_Set_Pin_Direction+0x16e>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	0a 94       	dec	r0
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <DIO_Set_Pin_Direction+0x16a>
    10be:	80 95       	com	r24
    10c0:	84 23       	and	r24, r20
    10c2:	8c 93       	st	X, r24
    10c4:	6e c0       	rjmp	.+220    	; 0x11a2 <DIO_Set_Pin_Direction+0x256>
			break;
		}
	break;
	case 'C':
	case 'c':
		switch(PIN_DIRECTION)
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3f 83       	std	Y+7, r19	; 0x07
    10ce:	2e 83       	std	Y+6, r18	; 0x06
    10d0:	8e 81       	ldd	r24, Y+6	; 0x06
    10d2:	9f 81       	ldd	r25, Y+7	; 0x07
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	d1 f0       	breq	.+52     	; 0x110c <DIO_Set_Pin_Direction+0x1c0>
    10d8:	2e 81       	ldd	r18, Y+6	; 0x06
    10da:	3f 81       	ldd	r19, Y+7	; 0x07
    10dc:	21 30       	cpi	r18, 0x01	; 1
    10de:	31 05       	cpc	r19, r1
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <DIO_Set_Pin_Direction+0x198>
    10e2:	5f c0       	rjmp	.+190    	; 0x11a2 <DIO_Set_Pin_Direction+0x256>
		{
		case OUTPUT:
			SET_BIT(DDRC,PIN_NO);
    10e4:	a4 e3       	ldi	r26, 0x34	; 52
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e4 e3       	ldi	r30, 0x34	; 52
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_Set_Pin_Direction+0x1b6>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_Set_Pin_Direction+0x1b2>
    1106:	84 2b       	or	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	4b c0       	rjmp	.+150    	; 0x11a2 <DIO_Set_Pin_Direction+0x256>
			break;
		case INPUT:
			CLEAR_BIT(DDRC,PIN_NO);
    110c:	a4 e3       	ldi	r26, 0x34	; 52
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e4 e3       	ldi	r30, 0x34	; 52
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_Set_Pin_Direction+0x1de>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_Set_Pin_Direction+0x1da>
    112e:	80 95       	com	r24
    1130:	84 23       	and	r24, r20
    1132:	8c 93       	st	X, r24
    1134:	36 c0       	rjmp	.+108    	; 0x11a2 <DIO_Set_Pin_Direction+0x256>
			break;
		}
		break;
		case 'D':
		case 'd':
			switch(PIN_DIRECTION)
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	3d 83       	std	Y+5, r19	; 0x05
    113e:	2c 83       	std	Y+4, r18	; 0x04
    1140:	8c 81       	ldd	r24, Y+4	; 0x04
    1142:	9d 81       	ldd	r25, Y+5	; 0x05
    1144:	00 97       	sbiw	r24, 0x00	; 0
    1146:	c9 f0       	breq	.+50     	; 0x117a <DIO_Set_Pin_Direction+0x22e>
    1148:	2c 81       	ldd	r18, Y+4	; 0x04
    114a:	3d 81       	ldd	r19, Y+5	; 0x05
    114c:	21 30       	cpi	r18, 0x01	; 1
    114e:	31 05       	cpc	r19, r1
    1150:	41 f5       	brne	.+80     	; 0x11a2 <DIO_Set_Pin_Direction+0x256>
			{
			case OUTPUT:
				SET_BIT(DDRD,PIN_NO);
    1152:	a1 e3       	ldi	r26, 0x31	; 49
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	e1 e3       	ldi	r30, 0x31	; 49
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	48 2f       	mov	r20, r24
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	02 2e       	mov	r0, r18
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <DIO_Set_Pin_Direction+0x224>
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	0a 94       	dec	r0
    1172:	e2 f7       	brpl	.-8      	; 0x116c <DIO_Set_Pin_Direction+0x220>
    1174:	84 2b       	or	r24, r20
    1176:	8c 93       	st	X, r24
    1178:	14 c0       	rjmp	.+40     	; 0x11a2 <DIO_Set_Pin_Direction+0x256>
				break;
			case INPUT:
				CLEAR_BIT(DDRD,PIN_NO);
    117a:	a1 e3       	ldi	r26, 0x31	; 49
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e1 e3       	ldi	r30, 0x31	; 49
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	48 2f       	mov	r20, r24
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	02 2e       	mov	r0, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <DIO_Set_Pin_Direction+0x24c>
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	0a 94       	dec	r0
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <DIO_Set_Pin_Direction+0x248>
    119c:	80 95       	com	r24
    119e:	84 23       	and	r24, r20
    11a0:	8c 93       	st	X, r24
			}
			break;
			default:
				break;
	}
}
    11a2:	2d 96       	adiw	r28, 0x0d	; 13
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <DIO_Write_Pin>:
// If The Pin Is Output set it out { High ( 1 ) or Low ( 0 ) }
void DIO_Write_Pin(u8 PORT_NO,u8 PIN_NO,u8 OUTPUT_VALUE)
{
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	2d 97       	sbiw	r28, 0x0d	; 13
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	89 83       	std	Y+1, r24	; 0x01
    11ca:	6a 83       	std	Y+2, r22	; 0x02
    11cc:	4b 83       	std	Y+3, r20	; 0x03
	switch (PORT_NO)
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	3d 87       	std	Y+13, r19	; 0x0d
    11d6:	2c 87       	std	Y+12, r18	; 0x0c
    11d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    11da:	9d 85       	ldd	r25, Y+13	; 0x0d
    11dc:	84 34       	cpi	r24, 0x44	; 68
    11de:	91 05       	cpc	r25, r1
    11e0:	09 f4       	brne	.+2      	; 0x11e4 <DIO_Write_Pin+0x30>
    11e2:	dd c0       	rjmp	.+442    	; 0x139e <DIO_Write_Pin+0x1ea>
    11e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    11e6:	3d 85       	ldd	r19, Y+13	; 0x0d
    11e8:	25 34       	cpi	r18, 0x45	; 69
    11ea:	31 05       	cpc	r19, r1
    11ec:	94 f4       	brge	.+36     	; 0x1212 <DIO_Write_Pin+0x5e>
    11ee:	8c 85       	ldd	r24, Y+12	; 0x0c
    11f0:	9d 85       	ldd	r25, Y+13	; 0x0d
    11f2:	82 34       	cpi	r24, 0x42	; 66
    11f4:	91 05       	cpc	r25, r1
    11f6:	09 f4       	brne	.+2      	; 0x11fa <DIO_Write_Pin+0x46>
    11f8:	62 c0       	rjmp	.+196    	; 0x12be <DIO_Write_Pin+0x10a>
    11fa:	2c 85       	ldd	r18, Y+12	; 0x0c
    11fc:	3d 85       	ldd	r19, Y+13	; 0x0d
    11fe:	23 34       	cpi	r18, 0x43	; 67
    1200:	31 05       	cpc	r19, r1
    1202:	0c f0       	brlt	.+2      	; 0x1206 <DIO_Write_Pin+0x52>
    1204:	94 c0       	rjmp	.+296    	; 0x132e <DIO_Write_Pin+0x17a>
    1206:	8c 85       	ldd	r24, Y+12	; 0x0c
    1208:	9d 85       	ldd	r25, Y+13	; 0x0d
    120a:	81 34       	cpi	r24, 0x41	; 65
    120c:	91 05       	cpc	r25, r1
    120e:	f9 f0       	breq	.+62     	; 0x124e <DIO_Write_Pin+0x9a>
    1210:	fc c0       	rjmp	.+504    	; 0x140a <DIO_Write_Pin+0x256>
    1212:	2c 85       	ldd	r18, Y+12	; 0x0c
    1214:	3d 85       	ldd	r19, Y+13	; 0x0d
    1216:	22 36       	cpi	r18, 0x62	; 98
    1218:	31 05       	cpc	r19, r1
    121a:	09 f4       	brne	.+2      	; 0x121e <DIO_Write_Pin+0x6a>
    121c:	50 c0       	rjmp	.+160    	; 0x12be <DIO_Write_Pin+0x10a>
    121e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1220:	9d 85       	ldd	r25, Y+13	; 0x0d
    1222:	83 36       	cpi	r24, 0x63	; 99
    1224:	91 05       	cpc	r25, r1
    1226:	34 f4       	brge	.+12     	; 0x1234 <DIO_Write_Pin+0x80>
    1228:	2c 85       	ldd	r18, Y+12	; 0x0c
    122a:	3d 85       	ldd	r19, Y+13	; 0x0d
    122c:	21 36       	cpi	r18, 0x61	; 97
    122e:	31 05       	cpc	r19, r1
    1230:	71 f0       	breq	.+28     	; 0x124e <DIO_Write_Pin+0x9a>
    1232:	eb c0       	rjmp	.+470    	; 0x140a <DIO_Write_Pin+0x256>
    1234:	8c 85       	ldd	r24, Y+12	; 0x0c
    1236:	9d 85       	ldd	r25, Y+13	; 0x0d
    1238:	83 36       	cpi	r24, 0x63	; 99
    123a:	91 05       	cpc	r25, r1
    123c:	09 f4       	brne	.+2      	; 0x1240 <DIO_Write_Pin+0x8c>
    123e:	77 c0       	rjmp	.+238    	; 0x132e <DIO_Write_Pin+0x17a>
    1240:	2c 85       	ldd	r18, Y+12	; 0x0c
    1242:	3d 85       	ldd	r19, Y+13	; 0x0d
    1244:	24 36       	cpi	r18, 0x64	; 100
    1246:	31 05       	cpc	r19, r1
    1248:	09 f4       	brne	.+2      	; 0x124c <DIO_Write_Pin+0x98>
    124a:	a9 c0       	rjmp	.+338    	; 0x139e <DIO_Write_Pin+0x1ea>
    124c:	de c0       	rjmp	.+444    	; 0x140a <DIO_Write_Pin+0x256>
	{
	case 'A':
	case 'a':
		switch(OUTPUT_VALUE)
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	3b 87       	std	Y+11, r19	; 0x0b
    1256:	2a 87       	std	Y+10, r18	; 0x0a
    1258:	8a 85       	ldd	r24, Y+10	; 0x0a
    125a:	9b 85       	ldd	r25, Y+11	; 0x0b
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	d1 f0       	breq	.+52     	; 0x1294 <DIO_Write_Pin+0xe0>
    1260:	2a 85       	ldd	r18, Y+10	; 0x0a
    1262:	3b 85       	ldd	r19, Y+11	; 0x0b
    1264:	21 30       	cpi	r18, 0x01	; 1
    1266:	31 05       	cpc	r19, r1
    1268:	09 f0       	breq	.+2      	; 0x126c <DIO_Write_Pin+0xb8>
    126a:	cf c0       	rjmp	.+414    	; 0x140a <DIO_Write_Pin+0x256>
		{
		case HIGH:
			SET_BIT(PORTA,PIN_NO);
    126c:	ab e3       	ldi	r26, 0x3B	; 59
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	eb e3       	ldi	r30, 0x3B	; 59
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	48 2f       	mov	r20, r24
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <DIO_Write_Pin+0xd6>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <DIO_Write_Pin+0xd2>
    128e:	84 2b       	or	r24, r20
    1290:	8c 93       	st	X, r24
    1292:	bb c0       	rjmp	.+374    	; 0x140a <DIO_Write_Pin+0x256>
			break;
		case LOW:
			CLEAR_BIT(PORTA,PIN_NO);
    1294:	ab e3       	ldi	r26, 0x3B	; 59
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	eb e3       	ldi	r30, 0x3B	; 59
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	48 2f       	mov	r20, r24
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	02 2e       	mov	r0, r18
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <DIO_Write_Pin+0xfe>
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	0a 94       	dec	r0
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <DIO_Write_Pin+0xfa>
    12b6:	80 95       	com	r24
    12b8:	84 23       	and	r24, r20
    12ba:	8c 93       	st	X, r24
    12bc:	a6 c0       	rjmp	.+332    	; 0x140a <DIO_Write_Pin+0x256>
			break;
		}
		break;
	case 'B':
	case 'b':
		switch(OUTPUT_VALUE)
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	39 87       	std	Y+9, r19	; 0x09
    12c6:	28 87       	std	Y+8, r18	; 0x08
    12c8:	88 85       	ldd	r24, Y+8	; 0x08
    12ca:	99 85       	ldd	r25, Y+9	; 0x09
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	d1 f0       	breq	.+52     	; 0x1304 <DIO_Write_Pin+0x150>
    12d0:	28 85       	ldd	r18, Y+8	; 0x08
    12d2:	39 85       	ldd	r19, Y+9	; 0x09
    12d4:	21 30       	cpi	r18, 0x01	; 1
    12d6:	31 05       	cpc	r19, r1
    12d8:	09 f0       	breq	.+2      	; 0x12dc <DIO_Write_Pin+0x128>
    12da:	97 c0       	rjmp	.+302    	; 0x140a <DIO_Write_Pin+0x256>
		{
		case HIGH:
			SET_BIT(PORTB,PIN_NO);
    12dc:	a8 e3       	ldi	r26, 0x38	; 56
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e8 e3       	ldi	r30, 0x38	; 56
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_Write_Pin+0x146>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_Write_Pin+0x142>
    12fe:	84 2b       	or	r24, r20
    1300:	8c 93       	st	X, r24
    1302:	83 c0       	rjmp	.+262    	; 0x140a <DIO_Write_Pin+0x256>
			break;
		case LOW:
			CLEAR_BIT(PORTB,PIN_NO);
    1304:	a8 e3       	ldi	r26, 0x38	; 56
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e8 e3       	ldi	r30, 0x38	; 56
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	48 2f       	mov	r20, r24
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	02 2e       	mov	r0, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <DIO_Write_Pin+0x16e>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	0a 94       	dec	r0
    1324:	e2 f7       	brpl	.-8      	; 0x131e <DIO_Write_Pin+0x16a>
    1326:	80 95       	com	r24
    1328:	84 23       	and	r24, r20
    132a:	8c 93       	st	X, r24
    132c:	6e c0       	rjmp	.+220    	; 0x140a <DIO_Write_Pin+0x256>
			break;
		}
		break;
	case 'C':
	case 'c':
		switch(OUTPUT_VALUE)
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	3f 83       	std	Y+7, r19	; 0x07
    1336:	2e 83       	std	Y+6, r18	; 0x06
    1338:	8e 81       	ldd	r24, Y+6	; 0x06
    133a:	9f 81       	ldd	r25, Y+7	; 0x07
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	d1 f0       	breq	.+52     	; 0x1374 <DIO_Write_Pin+0x1c0>
    1340:	2e 81       	ldd	r18, Y+6	; 0x06
    1342:	3f 81       	ldd	r19, Y+7	; 0x07
    1344:	21 30       	cpi	r18, 0x01	; 1
    1346:	31 05       	cpc	r19, r1
    1348:	09 f0       	breq	.+2      	; 0x134c <DIO_Write_Pin+0x198>
    134a:	5f c0       	rjmp	.+190    	; 0x140a <DIO_Write_Pin+0x256>
		{
		case HIGH:
			SET_BIT(PORTC,PIN_NO);
    134c:	a5 e3       	ldi	r26, 0x35	; 53
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e5 e3       	ldi	r30, 0x35	; 53
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	48 2f       	mov	r20, r24
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 2e       	mov	r0, r18
    1364:	02 c0       	rjmp	.+4      	; 0x136a <DIO_Write_Pin+0x1b6>
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	0a 94       	dec	r0
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <DIO_Write_Pin+0x1b2>
    136e:	84 2b       	or	r24, r20
    1370:	8c 93       	st	X, r24
    1372:	4b c0       	rjmp	.+150    	; 0x140a <DIO_Write_Pin+0x256>
			break;
		case LOW:
			CLEAR_BIT(PORTC,PIN_NO);
    1374:	a5 e3       	ldi	r26, 0x35	; 53
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e5 e3       	ldi	r30, 0x35	; 53
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <DIO_Write_Pin+0x1de>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <DIO_Write_Pin+0x1da>
    1396:	80 95       	com	r24
    1398:	84 23       	and	r24, r20
    139a:	8c 93       	st	X, r24
    139c:	36 c0       	rjmp	.+108    	; 0x140a <DIO_Write_Pin+0x256>
			break;
		}
		break;
	case 'D':
	case 'd':
		switch(OUTPUT_VALUE)
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	3d 83       	std	Y+5, r19	; 0x05
    13a6:	2c 83       	std	Y+4, r18	; 0x04
    13a8:	8c 81       	ldd	r24, Y+4	; 0x04
    13aa:	9d 81       	ldd	r25, Y+5	; 0x05
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	c9 f0       	breq	.+50     	; 0x13e2 <DIO_Write_Pin+0x22e>
    13b0:	2c 81       	ldd	r18, Y+4	; 0x04
    13b2:	3d 81       	ldd	r19, Y+5	; 0x05
    13b4:	21 30       	cpi	r18, 0x01	; 1
    13b6:	31 05       	cpc	r19, r1
    13b8:	41 f5       	brne	.+80     	; 0x140a <DIO_Write_Pin+0x256>
		{
		case HIGH:
			SET_BIT(PORTD,PIN_NO);
    13ba:	a2 e3       	ldi	r26, 0x32	; 50
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e2 e3       	ldi	r30, 0x32	; 50
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	48 2f       	mov	r20, r24
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 2e       	mov	r0, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <DIO_Write_Pin+0x224>
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	0a 94       	dec	r0
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <DIO_Write_Pin+0x220>
    13dc:	84 2b       	or	r24, r20
    13de:	8c 93       	st	X, r24
    13e0:	14 c0       	rjmp	.+40     	; 0x140a <DIO_Write_Pin+0x256>
			break;
		case LOW:
			CLEAR_BIT(PORTD,PIN_NO);
    13e2:	a2 e3       	ldi	r26, 0x32	; 50
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e2 e3       	ldi	r30, 0x32	; 50
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	48 2f       	mov	r20, r24
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 2e       	mov	r0, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <DIO_Write_Pin+0x24c>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	0a 94       	dec	r0
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <DIO_Write_Pin+0x248>
    1404:	80 95       	com	r24
    1406:	84 23       	and	r24, r20
    1408:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
    140a:	2d 96       	adiw	r28, 0x0d	; 13
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <DIO_TogglePin>:
// Change pin case from 1 to 0 and vice verse
void DIO_TogglePin(u8 PORT_NO,u8 PIN_NO)
{
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	00 d0       	rcall	.+0      	; 0x1422 <DIO_TogglePin+0x6>
    1422:	00 d0       	rcall	.+0      	; 0x1424 <DIO_TogglePin+0x8>
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	6a 83       	std	Y+2, r22	; 0x02
	switch (PORT_NO)
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	3c 83       	std	Y+4, r19	; 0x04
    1434:	2b 83       	std	Y+3, r18	; 0x03
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	9c 81       	ldd	r25, Y+4	; 0x04
    143a:	84 34       	cpi	r24, 0x44	; 68
    143c:	91 05       	cpc	r25, r1
    143e:	09 f4       	brne	.+2      	; 0x1442 <DIO_TogglePin+0x26>
    1440:	6d c0       	rjmp	.+218    	; 0x151c <DIO_TogglePin+0x100>
    1442:	2b 81       	ldd	r18, Y+3	; 0x03
    1444:	3c 81       	ldd	r19, Y+4	; 0x04
    1446:	25 34       	cpi	r18, 0x45	; 69
    1448:	31 05       	cpc	r19, r1
    144a:	8c f4       	brge	.+34     	; 0x146e <DIO_TogglePin+0x52>
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	9c 81       	ldd	r25, Y+4	; 0x04
    1450:	82 34       	cpi	r24, 0x42	; 66
    1452:	91 05       	cpc	r25, r1
    1454:	d9 f1       	breq	.+118    	; 0x14cc <DIO_TogglePin+0xb0>
    1456:	2b 81       	ldd	r18, Y+3	; 0x03
    1458:	3c 81       	ldd	r19, Y+4	; 0x04
    145a:	23 34       	cpi	r18, 0x43	; 67
    145c:	31 05       	cpc	r19, r1
    145e:	0c f0       	brlt	.+2      	; 0x1462 <DIO_TogglePin+0x46>
    1460:	49 c0       	rjmp	.+146    	; 0x14f4 <DIO_TogglePin+0xd8>
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	9c 81       	ldd	r25, Y+4	; 0x04
    1466:	81 34       	cpi	r24, 0x41	; 65
    1468:	91 05       	cpc	r25, r1
    146a:	e1 f0       	breq	.+56     	; 0x14a4 <DIO_TogglePin+0x88>
    146c:	6a c0       	rjmp	.+212    	; 0x1542 <DIO_TogglePin+0x126>
    146e:	2b 81       	ldd	r18, Y+3	; 0x03
    1470:	3c 81       	ldd	r19, Y+4	; 0x04
    1472:	22 36       	cpi	r18, 0x62	; 98
    1474:	31 05       	cpc	r19, r1
    1476:	51 f1       	breq	.+84     	; 0x14cc <DIO_TogglePin+0xb0>
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	9c 81       	ldd	r25, Y+4	; 0x04
    147c:	83 36       	cpi	r24, 0x63	; 99
    147e:	91 05       	cpc	r25, r1
    1480:	34 f4       	brge	.+12     	; 0x148e <DIO_TogglePin+0x72>
    1482:	2b 81       	ldd	r18, Y+3	; 0x03
    1484:	3c 81       	ldd	r19, Y+4	; 0x04
    1486:	21 36       	cpi	r18, 0x61	; 97
    1488:	31 05       	cpc	r19, r1
    148a:	61 f0       	breq	.+24     	; 0x14a4 <DIO_TogglePin+0x88>
    148c:	5a c0       	rjmp	.+180    	; 0x1542 <DIO_TogglePin+0x126>
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	9c 81       	ldd	r25, Y+4	; 0x04
    1492:	83 36       	cpi	r24, 0x63	; 99
    1494:	91 05       	cpc	r25, r1
    1496:	71 f1       	breq	.+92     	; 0x14f4 <DIO_TogglePin+0xd8>
    1498:	2b 81       	ldd	r18, Y+3	; 0x03
    149a:	3c 81       	ldd	r19, Y+4	; 0x04
    149c:	24 36       	cpi	r18, 0x64	; 100
    149e:	31 05       	cpc	r19, r1
    14a0:	e9 f1       	breq	.+122    	; 0x151c <DIO_TogglePin+0x100>
    14a2:	4f c0       	rjmp	.+158    	; 0x1542 <DIO_TogglePin+0x126>
	{
	case 'A':
	case 'a':
		TOGGLE_BIT(PORTA,PIN_NO);
    14a4:	ab e3       	ldi	r26, 0x3B	; 59
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	eb e3       	ldi	r30, 0x3B	; 59
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	48 2f       	mov	r20, r24
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	02 2e       	mov	r0, r18
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <DIO_TogglePin+0xa6>
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	0a 94       	dec	r0
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <DIO_TogglePin+0xa2>
    14c6:	84 27       	eor	r24, r20
    14c8:	8c 93       	st	X, r24
    14ca:	3b c0       	rjmp	.+118    	; 0x1542 <DIO_TogglePin+0x126>
		break;
	case 'B':
	case 'b':
		TOGGLE_BIT(PORTB,PIN_NO);
    14cc:	a8 e3       	ldi	r26, 0x38	; 56
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e8 e3       	ldi	r30, 0x38	; 56
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	48 2f       	mov	r20, r24
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	02 2e       	mov	r0, r18
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <DIO_TogglePin+0xce>
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	0a 94       	dec	r0
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <DIO_TogglePin+0xca>
    14ee:	84 27       	eor	r24, r20
    14f0:	8c 93       	st	X, r24
    14f2:	27 c0       	rjmp	.+78     	; 0x1542 <DIO_TogglePin+0x126>
		break;
	case 'C':
	case 'c':
		TOGGLE_BIT(PORTC,PIN_NO);
    14f4:	a5 e3       	ldi	r26, 0x35	; 53
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e5 e3       	ldi	r30, 0x35	; 53
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	48 2f       	mov	r20, r24
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	02 2e       	mov	r0, r18
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <DIO_TogglePin+0xf6>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	0a 94       	dec	r0
    1514:	e2 f7       	brpl	.-8      	; 0x150e <DIO_TogglePin+0xf2>
    1516:	84 27       	eor	r24, r20
    1518:	8c 93       	st	X, r24
    151a:	13 c0       	rjmp	.+38     	; 0x1542 <DIO_TogglePin+0x126>
		break;
	case 'D':
	case 'd':
		TOGGLE_BIT(PORTD,PIN_NO);
    151c:	a2 e3       	ldi	r26, 0x32	; 50
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e2 e3       	ldi	r30, 0x32	; 50
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	48 2f       	mov	r20, r24
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 2e       	mov	r0, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <DIO_TogglePin+0x11e>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <DIO_TogglePin+0x11a>
    153e:	84 27       	eor	r24, r20
    1540:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <DIO_u8ReadPin>:
// Check the I/P Device state
u8 DIO_u8ReadPin(u8 PORT_NO,u8 PIN_NO)
{
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	00 d0       	rcall	.+0      	; 0x1556 <DIO_u8ReadPin+0x6>
    1556:	00 d0       	rcall	.+0      	; 0x1558 <DIO_u8ReadPin+0x8>
    1558:	0f 92       	push	r0
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	8a 83       	std	Y+2, r24	; 0x02
    1560:	6b 83       	std	Y+3, r22	; 0x03
	u8 RETURN_VALUE = ZERO;
    1562:	19 82       	std	Y+1, r1	; 0x01
	switch (PORT_NO)
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	3d 83       	std	Y+5, r19	; 0x05
    156c:	2c 83       	std	Y+4, r18	; 0x04
    156e:	4c 81       	ldd	r20, Y+4	; 0x04
    1570:	5d 81       	ldd	r21, Y+5	; 0x05
    1572:	44 34       	cpi	r20, 0x44	; 68
    1574:	51 05       	cpc	r21, r1
    1576:	09 f4       	brne	.+2      	; 0x157a <DIO_u8ReadPin+0x2a>
    1578:	8e c0       	rjmp	.+284    	; 0x1696 <DIO_u8ReadPin+0x146>
    157a:	8c 81       	ldd	r24, Y+4	; 0x04
    157c:	9d 81       	ldd	r25, Y+5	; 0x05
    157e:	85 34       	cpi	r24, 0x45	; 69
    1580:	91 05       	cpc	r25, r1
    1582:	94 f4       	brge	.+36     	; 0x15a8 <DIO_u8ReadPin+0x58>
    1584:	2c 81       	ldd	r18, Y+4	; 0x04
    1586:	3d 81       	ldd	r19, Y+5	; 0x05
    1588:	22 34       	cpi	r18, 0x42	; 66
    158a:	31 05       	cpc	r19, r1
    158c:	09 f4       	brne	.+2      	; 0x1590 <DIO_u8ReadPin+0x40>
    158e:	47 c0       	rjmp	.+142    	; 0x161e <DIO_u8ReadPin+0xce>
    1590:	4c 81       	ldd	r20, Y+4	; 0x04
    1592:	5d 81       	ldd	r21, Y+5	; 0x05
    1594:	43 34       	cpi	r20, 0x43	; 67
    1596:	51 05       	cpc	r21, r1
    1598:	0c f0       	brlt	.+2      	; 0x159c <DIO_u8ReadPin+0x4c>
    159a:	5f c0       	rjmp	.+190    	; 0x165a <DIO_u8ReadPin+0x10a>
    159c:	8c 81       	ldd	r24, Y+4	; 0x04
    159e:	9d 81       	ldd	r25, Y+5	; 0x05
    15a0:	81 34       	cpi	r24, 0x41	; 65
    15a2:	91 05       	cpc	r25, r1
    15a4:	f1 f0       	breq	.+60     	; 0x15e2 <DIO_u8ReadPin+0x92>
    15a6:	95 c0       	rjmp	.+298    	; 0x16d2 <DIO_u8ReadPin+0x182>
    15a8:	2c 81       	ldd	r18, Y+4	; 0x04
    15aa:	3d 81       	ldd	r19, Y+5	; 0x05
    15ac:	22 36       	cpi	r18, 0x62	; 98
    15ae:	31 05       	cpc	r19, r1
    15b0:	b1 f1       	breq	.+108    	; 0x161e <DIO_u8ReadPin+0xce>
    15b2:	4c 81       	ldd	r20, Y+4	; 0x04
    15b4:	5d 81       	ldd	r21, Y+5	; 0x05
    15b6:	43 36       	cpi	r20, 0x63	; 99
    15b8:	51 05       	cpc	r21, r1
    15ba:	34 f4       	brge	.+12     	; 0x15c8 <DIO_u8ReadPin+0x78>
    15bc:	8c 81       	ldd	r24, Y+4	; 0x04
    15be:	9d 81       	ldd	r25, Y+5	; 0x05
    15c0:	81 36       	cpi	r24, 0x61	; 97
    15c2:	91 05       	cpc	r25, r1
    15c4:	71 f0       	breq	.+28     	; 0x15e2 <DIO_u8ReadPin+0x92>
    15c6:	85 c0       	rjmp	.+266    	; 0x16d2 <DIO_u8ReadPin+0x182>
    15c8:	2c 81       	ldd	r18, Y+4	; 0x04
    15ca:	3d 81       	ldd	r19, Y+5	; 0x05
    15cc:	23 36       	cpi	r18, 0x63	; 99
    15ce:	31 05       	cpc	r19, r1
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <DIO_u8ReadPin+0x84>
    15d2:	43 c0       	rjmp	.+134    	; 0x165a <DIO_u8ReadPin+0x10a>
    15d4:	4c 81       	ldd	r20, Y+4	; 0x04
    15d6:	5d 81       	ldd	r21, Y+5	; 0x05
    15d8:	44 36       	cpi	r20, 0x64	; 100
    15da:	51 05       	cpc	r21, r1
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <DIO_u8ReadPin+0x90>
    15de:	5b c0       	rjmp	.+182    	; 0x1696 <DIO_u8ReadPin+0x146>
    15e0:	78 c0       	rjmp	.+240    	; 0x16d2 <DIO_u8ReadPin+0x182>
	{
	case 'A':
	case 'a':
		RETURN_VALUE = READ_BIT(PINA,PIN_NO);
    15e2:	e9 e3       	ldi	r30, 0x39	; 57
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	48 2f       	mov	r20, r24
    15ea:	50 e0       	ldi	r21, 0x00	; 0
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <DIO_u8ReadPin+0xac>
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	2a 95       	dec	r18
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <DIO_u8ReadPin+0xa8>
    1600:	9a 01       	movw	r18, r20
    1602:	28 23       	and	r18, r24
    1604:	39 23       	and	r19, r25
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	88 2f       	mov	r24, r24
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	a9 01       	movw	r20, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <DIO_u8ReadPin+0xc4>
    1610:	55 95       	asr	r21
    1612:	47 95       	ror	r20
    1614:	8a 95       	dec	r24
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <DIO_u8ReadPin+0xc0>
    1618:	ca 01       	movw	r24, r20
    161a:	89 83       	std	Y+1, r24	; 0x01
    161c:	5c c0       	rjmp	.+184    	; 0x16d6 <DIO_u8ReadPin+0x186>
		break;
	case 'B':
	case 'b':
		RETURN_VALUE = READ_BIT(PINB,PIN_NO);
    161e:	e6 e3       	ldi	r30, 0x36	; 54
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	48 2f       	mov	r20, r24
    1626:	50 e0       	ldi	r21, 0x00	; 0
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <DIO_u8ReadPin+0xe8>
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	2a 95       	dec	r18
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <DIO_u8ReadPin+0xe4>
    163c:	9a 01       	movw	r18, r20
    163e:	28 23       	and	r18, r24
    1640:	39 23       	and	r19, r25
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	88 2f       	mov	r24, r24
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	a9 01       	movw	r20, r18
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <DIO_u8ReadPin+0x100>
    164c:	55 95       	asr	r21
    164e:	47 95       	ror	r20
    1650:	8a 95       	dec	r24
    1652:	e2 f7       	brpl	.-8      	; 0x164c <DIO_u8ReadPin+0xfc>
    1654:	ca 01       	movw	r24, r20
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	3e c0       	rjmp	.+124    	; 0x16d6 <DIO_u8ReadPin+0x186>
		break;
	case 'C':
	case 'c':
		RETURN_VALUE = READ_BIT(PINC,PIN_NO);
    165a:	e3 e3       	ldi	r30, 0x33	; 51
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	48 2f       	mov	r20, r24
    1662:	50 e0       	ldi	r21, 0x00	; 0
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <DIO_u8ReadPin+0x124>
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	2a 95       	dec	r18
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <DIO_u8ReadPin+0x120>
    1678:	9a 01       	movw	r18, r20
    167a:	28 23       	and	r18, r24
    167c:	39 23       	and	r19, r25
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	88 2f       	mov	r24, r24
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	a9 01       	movw	r20, r18
    1686:	02 c0       	rjmp	.+4      	; 0x168c <DIO_u8ReadPin+0x13c>
    1688:	55 95       	asr	r21
    168a:	47 95       	ror	r20
    168c:	8a 95       	dec	r24
    168e:	e2 f7       	brpl	.-8      	; 0x1688 <DIO_u8ReadPin+0x138>
    1690:	ca 01       	movw	r24, r20
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	20 c0       	rjmp	.+64     	; 0x16d6 <DIO_u8ReadPin+0x186>
		break;
	case 'D':
	case 'd':
		RETURN_VALUE = READ_BIT(PIND,PIN_NO);
    1696:	e0 e3       	ldi	r30, 0x30	; 48
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	50 e0       	ldi	r21, 0x00	; 0
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <DIO_u8ReadPin+0x160>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	2a 95       	dec	r18
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <DIO_u8ReadPin+0x15c>
    16b4:	9a 01       	movw	r18, r20
    16b6:	28 23       	and	r18, r24
    16b8:	39 23       	and	r19, r25
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	88 2f       	mov	r24, r24
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	a9 01       	movw	r20, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <DIO_u8ReadPin+0x178>
    16c4:	55 95       	asr	r21
    16c6:	47 95       	ror	r20
    16c8:	8a 95       	dec	r24
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <DIO_u8ReadPin+0x174>
    16cc:	ca 01       	movw	r24, r20
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <DIO_u8ReadPin+0x186>
		break;
	default:
		RETURN_VALUE = ERROR;
    16d2:	8f ef       	ldi	r24, 0xFF	; 255
    16d4:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return RETURN_VALUE;
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <DIO_Set_Port_Direction>:
/*
Controlling on Full Port
 */
// Set All Port 
void DIO_Set_Port_Direction(u8 PORT_NO,u8 PIN_DIRECTION)
{
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <DIO_Set_Port_Direction+0x6>
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <DIO_Set_Port_Direction+0x8>
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	89 83       	std	Y+1, r24	; 0x01
    16f6:	6a 83       	std	Y+2, r22	; 0x02
	switch(PORT_NO)
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	28 2f       	mov	r18, r24
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	3c 83       	std	Y+4, r19	; 0x04
    1700:	2b 83       	std	Y+3, r18	; 0x03
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	9c 81       	ldd	r25, Y+4	; 0x04
    1706:	84 34       	cpi	r24, 0x44	; 68
    1708:	91 05       	cpc	r25, r1
    170a:	09 f4       	brne	.+2      	; 0x170e <DIO_Set_Port_Direction+0x26>
    170c:	3f c0       	rjmp	.+126    	; 0x178c <DIO_Set_Port_Direction+0xa4>
    170e:	2b 81       	ldd	r18, Y+3	; 0x03
    1710:	3c 81       	ldd	r19, Y+4	; 0x04
    1712:	25 34       	cpi	r18, 0x45	; 69
    1714:	31 05       	cpc	r19, r1
    1716:	84 f4       	brge	.+32     	; 0x1738 <DIO_Set_Port_Direction+0x50>
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	9c 81       	ldd	r25, Y+4	; 0x04
    171c:	82 34       	cpi	r24, 0x42	; 66
    171e:	91 05       	cpc	r25, r1
    1720:	59 f1       	breq	.+86     	; 0x1778 <DIO_Set_Port_Direction+0x90>
    1722:	2b 81       	ldd	r18, Y+3	; 0x03
    1724:	3c 81       	ldd	r19, Y+4	; 0x04
    1726:	23 34       	cpi	r18, 0x43	; 67
    1728:	31 05       	cpc	r19, r1
    172a:	5c f5       	brge	.+86     	; 0x1782 <DIO_Set_Port_Direction+0x9a>
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	9c 81       	ldd	r25, Y+4	; 0x04
    1730:	81 34       	cpi	r24, 0x41	; 65
    1732:	91 05       	cpc	r25, r1
    1734:	e1 f0       	breq	.+56     	; 0x176e <DIO_Set_Port_Direction+0x86>
    1736:	2e c0       	rjmp	.+92     	; 0x1794 <DIO_Set_Port_Direction+0xac>
    1738:	2b 81       	ldd	r18, Y+3	; 0x03
    173a:	3c 81       	ldd	r19, Y+4	; 0x04
    173c:	22 36       	cpi	r18, 0x62	; 98
    173e:	31 05       	cpc	r19, r1
    1740:	d9 f0       	breq	.+54     	; 0x1778 <DIO_Set_Port_Direction+0x90>
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	9c 81       	ldd	r25, Y+4	; 0x04
    1746:	83 36       	cpi	r24, 0x63	; 99
    1748:	91 05       	cpc	r25, r1
    174a:	34 f4       	brge	.+12     	; 0x1758 <DIO_Set_Port_Direction+0x70>
    174c:	2b 81       	ldd	r18, Y+3	; 0x03
    174e:	3c 81       	ldd	r19, Y+4	; 0x04
    1750:	21 36       	cpi	r18, 0x61	; 97
    1752:	31 05       	cpc	r19, r1
    1754:	61 f0       	breq	.+24     	; 0x176e <DIO_Set_Port_Direction+0x86>
    1756:	1e c0       	rjmp	.+60     	; 0x1794 <DIO_Set_Port_Direction+0xac>
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	9c 81       	ldd	r25, Y+4	; 0x04
    175c:	83 36       	cpi	r24, 0x63	; 99
    175e:	91 05       	cpc	r25, r1
    1760:	81 f0       	breq	.+32     	; 0x1782 <DIO_Set_Port_Direction+0x9a>
    1762:	2b 81       	ldd	r18, Y+3	; 0x03
    1764:	3c 81       	ldd	r19, Y+4	; 0x04
    1766:	24 36       	cpi	r18, 0x64	; 100
    1768:	31 05       	cpc	r19, r1
    176a:	81 f0       	breq	.+32     	; 0x178c <DIO_Set_Port_Direction+0xa4>
    176c:	13 c0       	rjmp	.+38     	; 0x1794 <DIO_Set_Port_Direction+0xac>
	{
	case 'A':
	case 'a':
		DDRA = PIN_DIRECTION;
    176e:	ea e3       	ldi	r30, 0x3A	; 58
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	80 83       	st	Z, r24
    1776:	0e c0       	rjmp	.+28     	; 0x1794 <DIO_Set_Port_Direction+0xac>
		break;
	case 'B':
	case 'b':
		DDRB = PIN_DIRECTION;
    1778:	e7 e3       	ldi	r30, 0x37	; 55
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	80 83       	st	Z, r24
    1780:	09 c0       	rjmp	.+18     	; 0x1794 <DIO_Set_Port_Direction+0xac>
		break;
	case 'C':
	case 'c':
		DDRC = PIN_DIRECTION;
    1782:	e4 e3       	ldi	r30, 0x34	; 52
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	80 83       	st	Z, r24
    178a:	04 c0       	rjmp	.+8      	; 0x1794 <DIO_Set_Port_Direction+0xac>
		break;
	case 'D':
	case 'd':
		DDRD = PIN_DIRECTION;
    178c:	e1 e3       	ldi	r30, 0x31	; 49
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <DIO_WritePort>:
// Write on All Port
void DIO_WritePort(u8 PORT_NO,u8 OUTPUT_VALUE)
{
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <DIO_WritePort+0x6>
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <DIO_WritePort+0x8>
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	6a 83       	std	Y+2, r22	; 0x02
	switch(PORT_NO)
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	3c 83       	std	Y+4, r19	; 0x04
    17ba:	2b 83       	std	Y+3, r18	; 0x03
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	9c 81       	ldd	r25, Y+4	; 0x04
    17c0:	84 34       	cpi	r24, 0x44	; 68
    17c2:	91 05       	cpc	r25, r1
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <DIO_WritePort+0x26>
    17c6:	3f c0       	rjmp	.+126    	; 0x1846 <DIO_WritePort+0xa4>
    17c8:	2b 81       	ldd	r18, Y+3	; 0x03
    17ca:	3c 81       	ldd	r19, Y+4	; 0x04
    17cc:	25 34       	cpi	r18, 0x45	; 69
    17ce:	31 05       	cpc	r19, r1
    17d0:	84 f4       	brge	.+32     	; 0x17f2 <DIO_WritePort+0x50>
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	9c 81       	ldd	r25, Y+4	; 0x04
    17d6:	82 34       	cpi	r24, 0x42	; 66
    17d8:	91 05       	cpc	r25, r1
    17da:	59 f1       	breq	.+86     	; 0x1832 <DIO_WritePort+0x90>
    17dc:	2b 81       	ldd	r18, Y+3	; 0x03
    17de:	3c 81       	ldd	r19, Y+4	; 0x04
    17e0:	23 34       	cpi	r18, 0x43	; 67
    17e2:	31 05       	cpc	r19, r1
    17e4:	5c f5       	brge	.+86     	; 0x183c <DIO_WritePort+0x9a>
    17e6:	8b 81       	ldd	r24, Y+3	; 0x03
    17e8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ea:	81 34       	cpi	r24, 0x41	; 65
    17ec:	91 05       	cpc	r25, r1
    17ee:	e1 f0       	breq	.+56     	; 0x1828 <DIO_WritePort+0x86>
    17f0:	2e c0       	rjmp	.+92     	; 0x184e <DIO_WritePort+0xac>
    17f2:	2b 81       	ldd	r18, Y+3	; 0x03
    17f4:	3c 81       	ldd	r19, Y+4	; 0x04
    17f6:	22 36       	cpi	r18, 0x62	; 98
    17f8:	31 05       	cpc	r19, r1
    17fa:	d9 f0       	breq	.+54     	; 0x1832 <DIO_WritePort+0x90>
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1800:	83 36       	cpi	r24, 0x63	; 99
    1802:	91 05       	cpc	r25, r1
    1804:	34 f4       	brge	.+12     	; 0x1812 <DIO_WritePort+0x70>
    1806:	2b 81       	ldd	r18, Y+3	; 0x03
    1808:	3c 81       	ldd	r19, Y+4	; 0x04
    180a:	21 36       	cpi	r18, 0x61	; 97
    180c:	31 05       	cpc	r19, r1
    180e:	61 f0       	breq	.+24     	; 0x1828 <DIO_WritePort+0x86>
    1810:	1e c0       	rjmp	.+60     	; 0x184e <DIO_WritePort+0xac>
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	9c 81       	ldd	r25, Y+4	; 0x04
    1816:	83 36       	cpi	r24, 0x63	; 99
    1818:	91 05       	cpc	r25, r1
    181a:	81 f0       	breq	.+32     	; 0x183c <DIO_WritePort+0x9a>
    181c:	2b 81       	ldd	r18, Y+3	; 0x03
    181e:	3c 81       	ldd	r19, Y+4	; 0x04
    1820:	24 36       	cpi	r18, 0x64	; 100
    1822:	31 05       	cpc	r19, r1
    1824:	81 f0       	breq	.+32     	; 0x1846 <DIO_WritePort+0xa4>
    1826:	13 c0       	rjmp	.+38     	; 0x184e <DIO_WritePort+0xac>
	{
	case 'A':
	case 'a':
		PORTA = OUTPUT_VALUE;
    1828:	eb e3       	ldi	r30, 0x3B	; 59
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	80 83       	st	Z, r24
    1830:	0e c0       	rjmp	.+28     	; 0x184e <DIO_WritePort+0xac>
		break;
	case 'B':
	case 'b':
		PORTB = OUTPUT_VALUE;
    1832:	e8 e3       	ldi	r30, 0x38	; 56
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	80 83       	st	Z, r24
    183a:	09 c0       	rjmp	.+18     	; 0x184e <DIO_WritePort+0xac>
		break;
	case 'C':
	case 'c':
		PORTC = OUTPUT_VALUE;
    183c:	e5 e3       	ldi	r30, 0x35	; 53
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	80 83       	st	Z, r24
    1844:	04 c0       	rjmp	.+8      	; 0x184e <DIO_WritePort+0xac>
		break;
	case 'D':
	case 'd':
		PORTD = OUTPUT_VALUE;
    1846:	e2 e3       	ldi	r30, 0x32	; 50
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <DIO_ReadPort>:
// Read Status of The Port
u8 DIO_ReadPort(u8 PORT_NO)
{
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	00 d0       	rcall	.+0      	; 0x1862 <DIO_ReadPort+0x6>
    1862:	00 d0       	rcall	.+0      	; 0x1864 <DIO_ReadPort+0x8>
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	8a 83       	std	Y+2, r24	; 0x02
	u8 RETURN_VALUE = ZERO;
    186a:	19 82       	std	Y+1, r1	; 0x01
	switch(PORT_NO){
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	3c 83       	std	Y+4, r19	; 0x04
    1874:	2b 83       	std	Y+3, r18	; 0x03
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	9c 81       	ldd	r25, Y+4	; 0x04
    187a:	84 34       	cpi	r24, 0x44	; 68
    187c:	91 05       	cpc	r25, r1
    187e:	09 f4       	brne	.+2      	; 0x1882 <DIO_ReadPort+0x26>
    1880:	3f c0       	rjmp	.+126    	; 0x1900 <DIO_ReadPort+0xa4>
    1882:	2b 81       	ldd	r18, Y+3	; 0x03
    1884:	3c 81       	ldd	r19, Y+4	; 0x04
    1886:	25 34       	cpi	r18, 0x45	; 69
    1888:	31 05       	cpc	r19, r1
    188a:	84 f4       	brge	.+32     	; 0x18ac <DIO_ReadPort+0x50>
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	9c 81       	ldd	r25, Y+4	; 0x04
    1890:	82 34       	cpi	r24, 0x42	; 66
    1892:	91 05       	cpc	r25, r1
    1894:	59 f1       	breq	.+86     	; 0x18ec <DIO_ReadPort+0x90>
    1896:	2b 81       	ldd	r18, Y+3	; 0x03
    1898:	3c 81       	ldd	r19, Y+4	; 0x04
    189a:	23 34       	cpi	r18, 0x43	; 67
    189c:	31 05       	cpc	r19, r1
    189e:	5c f5       	brge	.+86     	; 0x18f6 <DIO_ReadPort+0x9a>
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	9c 81       	ldd	r25, Y+4	; 0x04
    18a4:	81 34       	cpi	r24, 0x41	; 65
    18a6:	91 05       	cpc	r25, r1
    18a8:	e1 f0       	breq	.+56     	; 0x18e2 <DIO_ReadPort+0x86>
    18aa:	2f c0       	rjmp	.+94     	; 0x190a <DIO_ReadPort+0xae>
    18ac:	2b 81       	ldd	r18, Y+3	; 0x03
    18ae:	3c 81       	ldd	r19, Y+4	; 0x04
    18b0:	22 36       	cpi	r18, 0x62	; 98
    18b2:	31 05       	cpc	r19, r1
    18b4:	d9 f0       	breq	.+54     	; 0x18ec <DIO_ReadPort+0x90>
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ba:	83 36       	cpi	r24, 0x63	; 99
    18bc:	91 05       	cpc	r25, r1
    18be:	34 f4       	brge	.+12     	; 0x18cc <DIO_ReadPort+0x70>
    18c0:	2b 81       	ldd	r18, Y+3	; 0x03
    18c2:	3c 81       	ldd	r19, Y+4	; 0x04
    18c4:	21 36       	cpi	r18, 0x61	; 97
    18c6:	31 05       	cpc	r19, r1
    18c8:	61 f0       	breq	.+24     	; 0x18e2 <DIO_ReadPort+0x86>
    18ca:	1f c0       	rjmp	.+62     	; 0x190a <DIO_ReadPort+0xae>
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	9c 81       	ldd	r25, Y+4	; 0x04
    18d0:	83 36       	cpi	r24, 0x63	; 99
    18d2:	91 05       	cpc	r25, r1
    18d4:	81 f0       	breq	.+32     	; 0x18f6 <DIO_ReadPort+0x9a>
    18d6:	2b 81       	ldd	r18, Y+3	; 0x03
    18d8:	3c 81       	ldd	r19, Y+4	; 0x04
    18da:	24 36       	cpi	r18, 0x64	; 100
    18dc:	31 05       	cpc	r19, r1
    18de:	81 f0       	breq	.+32     	; 0x1900 <DIO_ReadPort+0xa4>
    18e0:	14 c0       	rjmp	.+40     	; 0x190a <DIO_ReadPort+0xae>
	case 'A':
	case 'a':
		RETURN_VALUE = PINA;
    18e2:	e9 e3       	ldi	r30, 0x39	; 57
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	89 83       	std	Y+1, r24	; 0x01
    18ea:	11 c0       	rjmp	.+34     	; 0x190e <DIO_ReadPort+0xb2>
		break;
	case 'B':
	case 'b':
		RETURN_VALUE = PINB;
    18ec:	e6 e3       	ldi	r30, 0x36	; 54
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	89 83       	std	Y+1, r24	; 0x01
    18f4:	0c c0       	rjmp	.+24     	; 0x190e <DIO_ReadPort+0xb2>
		break;
	case 'C':
	case 'c':
		RETURN_VALUE = PINC;
    18f6:	e3 e3       	ldi	r30, 0x33	; 51
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	89 83       	std	Y+1, r24	; 0x01
    18fe:	07 c0       	rjmp	.+14     	; 0x190e <DIO_ReadPort+0xb2>
		break;
	case 'D':
	case 'd':
		RETURN_VALUE = PIND;
    1900:	e0 e3       	ldi	r30, 0x30	; 48
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	89 83       	std	Y+1, r24	; 0x01
    1908:	02 c0       	rjmp	.+4      	; 0x190e <DIO_ReadPort+0xb2>
		break;
	default:
		RETURN_VALUE = ERROR;
    190a:	8f ef       	ldi	r24, 0xFF	; 255
    190c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return RETURN_VALUE;
    190e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <DIO_TogglePort>:
// Toggle Ports 1 to 0 and vice versa
void DIO_TogglePort(u8 PORT_NO)
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	00 d0       	rcall	.+0      	; 0x1924 <DIO_TogglePort+0x6>
    1924:	0f 92       	push	r0
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	89 83       	std	Y+1, r24	; 0x01
	switch(PORT_NO)
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	3b 83       	std	Y+3, r19	; 0x03
    1934:	2a 83       	std	Y+2, r18	; 0x02
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	9b 81       	ldd	r25, Y+3	; 0x03
    193a:	84 34       	cpi	r24, 0x44	; 68
    193c:	91 05       	cpc	r25, r1
    193e:	09 f4       	brne	.+2      	; 0x1942 <DIO_TogglePort+0x24>
    1940:	57 c0       	rjmp	.+174    	; 0x19f0 <DIO_TogglePort+0xd2>
    1942:	ea 81       	ldd	r30, Y+2	; 0x02
    1944:	fb 81       	ldd	r31, Y+3	; 0x03
    1946:	e5 34       	cpi	r30, 0x45	; 69
    1948:	f1 05       	cpc	r31, r1
    194a:	84 f4       	brge	.+32     	; 0x196c <DIO_TogglePort+0x4e>
    194c:	2a 81       	ldd	r18, Y+2	; 0x02
    194e:	3b 81       	ldd	r19, Y+3	; 0x03
    1950:	22 34       	cpi	r18, 0x42	; 66
    1952:	31 05       	cpc	r19, r1
    1954:	99 f1       	breq	.+102    	; 0x19bc <DIO_TogglePort+0x9e>
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	9b 81       	ldd	r25, Y+3	; 0x03
    195a:	83 34       	cpi	r24, 0x43	; 67
    195c:	91 05       	cpc	r25, r1
    195e:	dc f5       	brge	.+118    	; 0x19d6 <DIO_TogglePort+0xb8>
    1960:	ea 81       	ldd	r30, Y+2	; 0x02
    1962:	fb 81       	ldd	r31, Y+3	; 0x03
    1964:	e1 34       	cpi	r30, 0x41	; 65
    1966:	f1 05       	cpc	r31, r1
    1968:	e1 f0       	breq	.+56     	; 0x19a2 <DIO_TogglePort+0x84>
    196a:	4e c0       	rjmp	.+156    	; 0x1a08 <DIO_TogglePort+0xea>
    196c:	2a 81       	ldd	r18, Y+2	; 0x02
    196e:	3b 81       	ldd	r19, Y+3	; 0x03
    1970:	22 36       	cpi	r18, 0x62	; 98
    1972:	31 05       	cpc	r19, r1
    1974:	19 f1       	breq	.+70     	; 0x19bc <DIO_TogglePort+0x9e>
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	9b 81       	ldd	r25, Y+3	; 0x03
    197a:	83 36       	cpi	r24, 0x63	; 99
    197c:	91 05       	cpc	r25, r1
    197e:	34 f4       	brge	.+12     	; 0x198c <DIO_TogglePort+0x6e>
    1980:	ea 81       	ldd	r30, Y+2	; 0x02
    1982:	fb 81       	ldd	r31, Y+3	; 0x03
    1984:	e1 36       	cpi	r30, 0x61	; 97
    1986:	f1 05       	cpc	r31, r1
    1988:	61 f0       	breq	.+24     	; 0x19a2 <DIO_TogglePort+0x84>
    198a:	3e c0       	rjmp	.+124    	; 0x1a08 <DIO_TogglePort+0xea>
    198c:	2a 81       	ldd	r18, Y+2	; 0x02
    198e:	3b 81       	ldd	r19, Y+3	; 0x03
    1990:	23 36       	cpi	r18, 0x63	; 99
    1992:	31 05       	cpc	r19, r1
    1994:	01 f1       	breq	.+64     	; 0x19d6 <DIO_TogglePort+0xb8>
    1996:	8a 81       	ldd	r24, Y+2	; 0x02
    1998:	9b 81       	ldd	r25, Y+3	; 0x03
    199a:	84 36       	cpi	r24, 0x64	; 100
    199c:	91 05       	cpc	r25, r1
    199e:	41 f1       	breq	.+80     	; 0x19f0 <DIO_TogglePort+0xd2>
    19a0:	33 c0       	rjmp	.+102    	; 0x1a08 <DIO_TogglePort+0xea>
	{
	case 'A':
	case 'a':
		PORTA = TOGGLE_PORT(PORTA);
    19a2:	2b e3       	ldi	r18, 0x3B	; 59
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	ab e3       	ldi	r26, 0x3B	; 59
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	eb e3       	ldi	r30, 0x3B	; 59
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	80 95       	com	r24
    19b2:	8c 93       	st	X, r24
    19b4:	8c 91       	ld	r24, X
    19b6:	f9 01       	movw	r30, r18
    19b8:	80 83       	st	Z, r24
    19ba:	26 c0       	rjmp	.+76     	; 0x1a08 <DIO_TogglePort+0xea>
		break;
	case 'B':
	case 'b':
		PORTB = TOGGLE_PORT(PORTB);
    19bc:	28 e3       	ldi	r18, 0x38	; 56
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	a8 e3       	ldi	r26, 0x38	; 56
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e8 e3       	ldi	r30, 0x38	; 56
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	80 95       	com	r24
    19cc:	8c 93       	st	X, r24
    19ce:	8c 91       	ld	r24, X
    19d0:	f9 01       	movw	r30, r18
    19d2:	80 83       	st	Z, r24
    19d4:	19 c0       	rjmp	.+50     	; 0x1a08 <DIO_TogglePort+0xea>
		break;
	case 'C':
	case 'c':
		PORTC = TOGGLE_PORT(PORTC);
    19d6:	25 e3       	ldi	r18, 0x35	; 53
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	a5 e3       	ldi	r26, 0x35	; 53
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e5 e3       	ldi	r30, 0x35	; 53
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	80 95       	com	r24
    19e6:	8c 93       	st	X, r24
    19e8:	8c 91       	ld	r24, X
    19ea:	f9 01       	movw	r30, r18
    19ec:	80 83       	st	Z, r24
    19ee:	0c c0       	rjmp	.+24     	; 0x1a08 <DIO_TogglePort+0xea>
		break;
	case 'D':
	case 'd':
		PORTD = TOGGLE_PORT(PORTD);
    19f0:	22 e3       	ldi	r18, 0x32	; 50
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	a2 e3       	ldi	r26, 0x32	; 50
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e2 e3       	ldi	r30, 0x32	; 50
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	80 95       	com	r24
    1a00:	8c 93       	st	X, r24
    1a02:	8c 91       	ld	r24, X
    1a04:	f9 01       	movw	r30, r18
    1a06:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
}
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <DIO_PullUp_Active>:
// Active The Pull Up Resistance
void DIO_PullUp_Active(u8 PORT_NO,u8 PIN_NO)
{
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	00 d0       	rcall	.+0      	; 0x1a1a <DIO_PullUp_Active+0x6>
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <DIO_PullUp_Active+0x8>
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
    1a20:	89 83       	std	Y+1, r24	; 0x01
    1a22:	6a 83       	std	Y+2, r22	; 0x02
	switch (PORT_NO)
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	3c 83       	std	Y+4, r19	; 0x04
    1a2c:	2b 83       	std	Y+3, r18	; 0x03
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	9c 81       	ldd	r25, Y+4	; 0x04
    1a32:	84 34       	cpi	r24, 0x44	; 68
    1a34:	91 05       	cpc	r25, r1
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <DIO_PullUp_Active+0x26>
    1a38:	6d c0       	rjmp	.+218    	; 0x1b14 <DIO_PullUp_Active+0x100>
    1a3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a3e:	25 34       	cpi	r18, 0x45	; 69
    1a40:	31 05       	cpc	r19, r1
    1a42:	8c f4       	brge	.+34     	; 0x1a66 <DIO_PullUp_Active+0x52>
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	9c 81       	ldd	r25, Y+4	; 0x04
    1a48:	82 34       	cpi	r24, 0x42	; 66
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	d9 f1       	breq	.+118    	; 0x1ac4 <DIO_PullUp_Active+0xb0>
    1a4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a50:	3c 81       	ldd	r19, Y+4	; 0x04
    1a52:	23 34       	cpi	r18, 0x43	; 67
    1a54:	31 05       	cpc	r19, r1
    1a56:	0c f0       	brlt	.+2      	; 0x1a5a <DIO_PullUp_Active+0x46>
    1a58:	49 c0       	rjmp	.+146    	; 0x1aec <DIO_PullUp_Active+0xd8>
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5e:	81 34       	cpi	r24, 0x41	; 65
    1a60:	91 05       	cpc	r25, r1
    1a62:	e1 f0       	breq	.+56     	; 0x1a9c <DIO_PullUp_Active+0x88>
    1a64:	6a c0       	rjmp	.+212    	; 0x1b3a <DIO_PullUp_Active+0x126>
    1a66:	2b 81       	ldd	r18, Y+3	; 0x03
    1a68:	3c 81       	ldd	r19, Y+4	; 0x04
    1a6a:	22 36       	cpi	r18, 0x62	; 98
    1a6c:	31 05       	cpc	r19, r1
    1a6e:	51 f1       	breq	.+84     	; 0x1ac4 <DIO_PullUp_Active+0xb0>
    1a70:	8b 81       	ldd	r24, Y+3	; 0x03
    1a72:	9c 81       	ldd	r25, Y+4	; 0x04
    1a74:	83 36       	cpi	r24, 0x63	; 99
    1a76:	91 05       	cpc	r25, r1
    1a78:	34 f4       	brge	.+12     	; 0x1a86 <DIO_PullUp_Active+0x72>
    1a7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a7e:	21 36       	cpi	r18, 0x61	; 97
    1a80:	31 05       	cpc	r19, r1
    1a82:	61 f0       	breq	.+24     	; 0x1a9c <DIO_PullUp_Active+0x88>
    1a84:	5a c0       	rjmp	.+180    	; 0x1b3a <DIO_PullUp_Active+0x126>
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8a:	83 36       	cpi	r24, 0x63	; 99
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	71 f1       	breq	.+92     	; 0x1aec <DIO_PullUp_Active+0xd8>
    1a90:	2b 81       	ldd	r18, Y+3	; 0x03
    1a92:	3c 81       	ldd	r19, Y+4	; 0x04
    1a94:	24 36       	cpi	r18, 0x64	; 100
    1a96:	31 05       	cpc	r19, r1
    1a98:	e9 f1       	breq	.+122    	; 0x1b14 <DIO_PullUp_Active+0x100>
    1a9a:	4f c0       	rjmp	.+158    	; 0x1b3a <DIO_PullUp_Active+0x126>
	{
	case 'A':
	case 'a':
		SET_BIT(PORTA,PIN_NO); // Set Pin High
    1a9c:	ab e3       	ldi	r26, 0x3B	; 59
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	eb e3       	ldi	r30, 0x3B	; 59
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	48 2f       	mov	r20, r24
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	28 2f       	mov	r18, r24
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	02 2e       	mov	r0, r18
    1ab4:	02 c0       	rjmp	.+4      	; 0x1aba <DIO_PullUp_Active+0xa6>
    1ab6:	88 0f       	add	r24, r24
    1ab8:	99 1f       	adc	r25, r25
    1aba:	0a 94       	dec	r0
    1abc:	e2 f7       	brpl	.-8      	; 0x1ab6 <DIO_PullUp_Active+0xa2>
    1abe:	84 2b       	or	r24, r20
    1ac0:	8c 93       	st	X, r24
    1ac2:	3b c0       	rjmp	.+118    	; 0x1b3a <DIO_PullUp_Active+0x126>
		break;
	case 'B':
	case 'b':
		SET_BIT(PORTB,PIN_NO); // Set Pin High
    1ac4:	a8 e3       	ldi	r26, 0x38	; 56
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e8 e3       	ldi	r30, 0x38	; 56
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	48 2f       	mov	r20, r24
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	02 2e       	mov	r0, r18
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <DIO_PullUp_Active+0xce>
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	0a 94       	dec	r0
    1ae4:	e2 f7       	brpl	.-8      	; 0x1ade <DIO_PullUp_Active+0xca>
    1ae6:	84 2b       	or	r24, r20
    1ae8:	8c 93       	st	X, r24
    1aea:	27 c0       	rjmp	.+78     	; 0x1b3a <DIO_PullUp_Active+0x126>
		break;
	case 'C':
	case 'c':
		SET_BIT(PORTC,PIN_NO); // Set Pin High
    1aec:	a5 e3       	ldi	r26, 0x35	; 53
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	e5 e3       	ldi	r30, 0x35	; 53
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	48 2f       	mov	r20, r24
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	02 2e       	mov	r0, r18
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <DIO_PullUp_Active+0xf6>
    1b06:	88 0f       	add	r24, r24
    1b08:	99 1f       	adc	r25, r25
    1b0a:	0a 94       	dec	r0
    1b0c:	e2 f7       	brpl	.-8      	; 0x1b06 <DIO_PullUp_Active+0xf2>
    1b0e:	84 2b       	or	r24, r20
    1b10:	8c 93       	st	X, r24
    1b12:	13 c0       	rjmp	.+38     	; 0x1b3a <DIO_PullUp_Active+0x126>
		break;
	case 'D':
	case 'd':
		SET_BIT(PORTD,PIN_NO); // Set Pin High
    1b14:	a2 e3       	ldi	r26, 0x32	; 50
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e2 e3       	ldi	r30, 0x32	; 50
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	48 2f       	mov	r20, r24
    1b20:	8a 81       	ldd	r24, Y+2	; 0x02
    1b22:	28 2f       	mov	r18, r24
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	02 2e       	mov	r0, r18
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <DIO_PullUp_Active+0x11e>
    1b2e:	88 0f       	add	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	0a 94       	dec	r0
    1b34:	e2 f7       	brpl	.-8      	; 0x1b2e <DIO_PullUp_Active+0x11a>
    1b36:	84 2b       	or	r24, r20
    1b38:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <DIO_PullUp_DeActive>:
// DeActive The Pull Up Resistance
void DIO_PullUp_DeActive(u8 PORT_NO,u8 PIN_NO)
{
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <DIO_PullUp_DeActive+0x6>
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <DIO_PullUp_DeActive+0x8>
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	6a 83       	std	Y+2, r22	; 0x02
	switch (PORT_NO){
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	28 2f       	mov	r18, r24
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	3c 83       	std	Y+4, r19	; 0x04
    1b60:	2b 83       	std	Y+3, r18	; 0x03
    1b62:	8b 81       	ldd	r24, Y+3	; 0x03
    1b64:	9c 81       	ldd	r25, Y+4	; 0x04
    1b66:	84 34       	cpi	r24, 0x44	; 68
    1b68:	91 05       	cpc	r25, r1
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <DIO_PullUp_DeActive+0x26>
    1b6c:	71 c0       	rjmp	.+226    	; 0x1c50 <DIO_PullUp_DeActive+0x108>
    1b6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b70:	3c 81       	ldd	r19, Y+4	; 0x04
    1b72:	25 34       	cpi	r18, 0x45	; 69
    1b74:	31 05       	cpc	r19, r1
    1b76:	8c f4       	brge	.+34     	; 0x1b9a <DIO_PullUp_DeActive+0x52>
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7c:	82 34       	cpi	r24, 0x42	; 66
    1b7e:	91 05       	cpc	r25, r1
    1b80:	e9 f1       	breq	.+122    	; 0x1bfc <DIO_PullUp_DeActive+0xb4>
    1b82:	2b 81       	ldd	r18, Y+3	; 0x03
    1b84:	3c 81       	ldd	r19, Y+4	; 0x04
    1b86:	23 34       	cpi	r18, 0x43	; 67
    1b88:	31 05       	cpc	r19, r1
    1b8a:	0c f0       	brlt	.+2      	; 0x1b8e <DIO_PullUp_DeActive+0x46>
    1b8c:	4c c0       	rjmp	.+152    	; 0x1c26 <DIO_PullUp_DeActive+0xde>
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	9c 81       	ldd	r25, Y+4	; 0x04
    1b92:	81 34       	cpi	r24, 0x41	; 65
    1b94:	91 05       	cpc	r25, r1
    1b96:	e9 f0       	breq	.+58     	; 0x1bd2 <DIO_PullUp_DeActive+0x8a>
    1b98:	6f c0       	rjmp	.+222    	; 0x1c78 <DIO_PullUp_DeActive+0x130>
    1b9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b9e:	22 36       	cpi	r18, 0x62	; 98
    1ba0:	31 05       	cpc	r19, r1
    1ba2:	61 f1       	breq	.+88     	; 0x1bfc <DIO_PullUp_DeActive+0xb4>
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba8:	83 36       	cpi	r24, 0x63	; 99
    1baa:	91 05       	cpc	r25, r1
    1bac:	34 f4       	brge	.+12     	; 0x1bba <DIO_PullUp_DeActive+0x72>
    1bae:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb2:	21 36       	cpi	r18, 0x61	; 97
    1bb4:	31 05       	cpc	r19, r1
    1bb6:	69 f0       	breq	.+26     	; 0x1bd2 <DIO_PullUp_DeActive+0x8a>
    1bb8:	5f c0       	rjmp	.+190    	; 0x1c78 <DIO_PullUp_DeActive+0x130>
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbe:	83 36       	cpi	r24, 0x63	; 99
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	89 f1       	breq	.+98     	; 0x1c26 <DIO_PullUp_DeActive+0xde>
    1bc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc8:	24 36       	cpi	r18, 0x64	; 100
    1bca:	31 05       	cpc	r19, r1
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <DIO_PullUp_DeActive+0x88>
    1bce:	40 c0       	rjmp	.+128    	; 0x1c50 <DIO_PullUp_DeActive+0x108>
    1bd0:	53 c0       	rjmp	.+166    	; 0x1c78 <DIO_PullUp_DeActive+0x130>
	case 'A':
	case 'a':
		CLEAR_BIT(PORTA,PIN_NO); // Set Pin Low
    1bd2:	ab e3       	ldi	r26, 0x3B	; 59
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	eb e3       	ldi	r30, 0x3B	; 59
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	48 2f       	mov	r20, r24
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	02 2e       	mov	r0, r18
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <DIO_PullUp_DeActive+0xa8>
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	0a 94       	dec	r0
    1bf2:	e2 f7       	brpl	.-8      	; 0x1bec <DIO_PullUp_DeActive+0xa4>
    1bf4:	80 95       	com	r24
    1bf6:	84 23       	and	r24, r20
    1bf8:	8c 93       	st	X, r24
    1bfa:	3e c0       	rjmp	.+124    	; 0x1c78 <DIO_PullUp_DeActive+0x130>
		break;
	case 'B':
	case 'b':
		CLEAR_BIT(PORTB,PIN_NO); // Set Pin Low
    1bfc:	a8 e3       	ldi	r26, 0x38	; 56
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e8 e3       	ldi	r30, 0x38	; 56
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	48 2f       	mov	r20, r24
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	28 2f       	mov	r18, r24
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	02 2e       	mov	r0, r18
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <DIO_PullUp_DeActive+0xd2>
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	0a 94       	dec	r0
    1c1c:	e2 f7       	brpl	.-8      	; 0x1c16 <DIO_PullUp_DeActive+0xce>
    1c1e:	80 95       	com	r24
    1c20:	84 23       	and	r24, r20
    1c22:	8c 93       	st	X, r24
    1c24:	29 c0       	rjmp	.+82     	; 0x1c78 <DIO_PullUp_DeActive+0x130>
		break;
	case 'C':
	case 'c':
		CLEAR_BIT(PORTC,PIN_NO); // Set Pin Low
    1c26:	a5 e3       	ldi	r26, 0x35	; 53
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e5 e3       	ldi	r30, 0x35	; 53
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	48 2f       	mov	r20, r24
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	28 2f       	mov	r18, r24
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	02 2e       	mov	r0, r18
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <DIO_PullUp_DeActive+0xfc>
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	0a 94       	dec	r0
    1c46:	e2 f7       	brpl	.-8      	; 0x1c40 <DIO_PullUp_DeActive+0xf8>
    1c48:	80 95       	com	r24
    1c4a:	84 23       	and	r24, r20
    1c4c:	8c 93       	st	X, r24
    1c4e:	14 c0       	rjmp	.+40     	; 0x1c78 <DIO_PullUp_DeActive+0x130>
		break;
	case 'D':
	case 'd':
		CLEAR_BIT(PORTD,PIN_NO); // Set Pin Low
    1c50:	a2 e3       	ldi	r26, 0x32	; 50
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e2 e3       	ldi	r30, 0x32	; 50
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	48 2f       	mov	r20, r24
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	02 2e       	mov	r0, r18
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <DIO_PullUp_DeActive+0x126>
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	0a 94       	dec	r0
    1c70:	e2 f7       	brpl	.-8      	; 0x1c6a <DIO_PullUp_DeActive+0x122>
    1c72:	80 95       	com	r24
    1c74:	84 23       	and	r24, r20
    1c76:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	08 95       	ret

00001c86 <DIO_Write_Low_Nibble>:
// Write on Bits from 0 to 3
void DIO_Write_Low_Nibble(u8 PORT_NO,u8 LOW_NIBBLE_VALUE)
{
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <DIO_Write_Low_Nibble+0x6>
    1c8c:	00 d0       	rcall	.+0      	; 0x1c8e <DIO_Write_Low_Nibble+0x8>
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	89 83       	std	Y+1, r24	; 0x01
    1c94:	6a 83       	std	Y+2, r22	; 0x02
	LOW_NIBBLE_VALUE&=0x0f;
    1c96:	8a 81       	ldd	r24, Y+2	; 0x02
    1c98:	8f 70       	andi	r24, 0x0F	; 15
    1c9a:	8a 83       	std	Y+2, r24	; 0x02
	switch (PORT_NO)
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	28 2f       	mov	r18, r24
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	3c 83       	std	Y+4, r19	; 0x04
    1ca4:	2b 83       	std	Y+3, r18	; 0x03
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	9c 81       	ldd	r25, Y+4	; 0x04
    1caa:	84 34       	cpi	r24, 0x44	; 68
    1cac:	91 05       	cpc	r25, r1
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <DIO_Write_Low_Nibble+0x2c>
    1cb0:	61 c0       	rjmp	.+194    	; 0x1d74 <DIO_Write_Low_Nibble+0xee>
    1cb2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb4:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb6:	25 34       	cpi	r18, 0x45	; 69
    1cb8:	31 05       	cpc	r19, r1
    1cba:	8c f4       	brge	.+34     	; 0x1cde <DIO_Write_Low_Nibble+0x58>
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc0:	82 34       	cpi	r24, 0x42	; 66
    1cc2:	91 05       	cpc	r25, r1
    1cc4:	b9 f1       	breq	.+110    	; 0x1d34 <DIO_Write_Low_Nibble+0xae>
    1cc6:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cca:	23 34       	cpi	r18, 0x43	; 67
    1ccc:	31 05       	cpc	r19, r1
    1cce:	0c f0       	brlt	.+2      	; 0x1cd2 <DIO_Write_Low_Nibble+0x4c>
    1cd0:	41 c0       	rjmp	.+130    	; 0x1d54 <DIO_Write_Low_Nibble+0xce>
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd6:	81 34       	cpi	r24, 0x41	; 65
    1cd8:	91 05       	cpc	r25, r1
    1cda:	e1 f0       	breq	.+56     	; 0x1d14 <DIO_Write_Low_Nibble+0x8e>
    1cdc:	5a c0       	rjmp	.+180    	; 0x1d92 <DIO_Write_Low_Nibble+0x10c>
    1cde:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce2:	22 36       	cpi	r18, 0x62	; 98
    1ce4:	31 05       	cpc	r19, r1
    1ce6:	31 f1       	breq	.+76     	; 0x1d34 <DIO_Write_Low_Nibble+0xae>
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	9c 81       	ldd	r25, Y+4	; 0x04
    1cec:	83 36       	cpi	r24, 0x63	; 99
    1cee:	91 05       	cpc	r25, r1
    1cf0:	34 f4       	brge	.+12     	; 0x1cfe <DIO_Write_Low_Nibble+0x78>
    1cf2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cf4:	3c 81       	ldd	r19, Y+4	; 0x04
    1cf6:	21 36       	cpi	r18, 0x61	; 97
    1cf8:	31 05       	cpc	r19, r1
    1cfa:	61 f0       	breq	.+24     	; 0x1d14 <DIO_Write_Low_Nibble+0x8e>
    1cfc:	4a c0       	rjmp	.+148    	; 0x1d92 <DIO_Write_Low_Nibble+0x10c>
    1cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1d00:	9c 81       	ldd	r25, Y+4	; 0x04
    1d02:	83 36       	cpi	r24, 0x63	; 99
    1d04:	91 05       	cpc	r25, r1
    1d06:	31 f1       	breq	.+76     	; 0x1d54 <DIO_Write_Low_Nibble+0xce>
    1d08:	2b 81       	ldd	r18, Y+3	; 0x03
    1d0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d0c:	24 36       	cpi	r18, 0x64	; 100
    1d0e:	31 05       	cpc	r19, r1
    1d10:	89 f1       	breq	.+98     	; 0x1d74 <DIO_Write_Low_Nibble+0xee>
    1d12:	3f c0       	rjmp	.+126    	; 0x1d92 <DIO_Write_Low_Nibble+0x10c>
	{
	case 'A':
	case 'a':
		PORTA&=0xf0;
    1d14:	ab e3       	ldi	r26, 0x3B	; 59
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	eb e3       	ldi	r30, 0x3B	; 59
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	80 7f       	andi	r24, 0xF0	; 240
    1d20:	8c 93       	st	X, r24
		PORTA|=LOW_NIBBLE_VALUE;
    1d22:	ab e3       	ldi	r26, 0x3B	; 59
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	eb e3       	ldi	r30, 0x3B	; 59
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	90 81       	ld	r25, Z
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	89 2b       	or	r24, r25
    1d30:	8c 93       	st	X, r24
    1d32:	2f c0       	rjmp	.+94     	; 0x1d92 <DIO_Write_Low_Nibble+0x10c>
		break;
	case 'B':
	case 'b':
		PORTB&=0xf0;
    1d34:	a8 e3       	ldi	r26, 0x38	; 56
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	e8 e3       	ldi	r30, 0x38	; 56
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	80 7f       	andi	r24, 0xF0	; 240
    1d40:	8c 93       	st	X, r24
		PORTB|=LOW_NIBBLE_VALUE;
    1d42:	a8 e3       	ldi	r26, 0x38	; 56
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	e8 e3       	ldi	r30, 0x38	; 56
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	90 81       	ld	r25, Z
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	89 2b       	or	r24, r25
    1d50:	8c 93       	st	X, r24
    1d52:	1f c0       	rjmp	.+62     	; 0x1d92 <DIO_Write_Low_Nibble+0x10c>
		break;
	case 'C':
	case 'c':
		PORTC&=0xf0;
    1d54:	a5 e3       	ldi	r26, 0x35	; 53
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e5 e3       	ldi	r30, 0x35	; 53
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	80 7f       	andi	r24, 0xF0	; 240
    1d60:	8c 93       	st	X, r24
		PORTC|=LOW_NIBBLE_VALUE;
    1d62:	a5 e3       	ldi	r26, 0x35	; 53
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	e5 e3       	ldi	r30, 0x35	; 53
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	90 81       	ld	r25, Z
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	89 2b       	or	r24, r25
    1d70:	8c 93       	st	X, r24
    1d72:	0f c0       	rjmp	.+30     	; 0x1d92 <DIO_Write_Low_Nibble+0x10c>
		break;
	case 'D':
	case 'd':
		PORTD&=0xf0;
    1d74:	a2 e3       	ldi	r26, 0x32	; 50
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	e2 e3       	ldi	r30, 0x32	; 50
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	80 7f       	andi	r24, 0xF0	; 240
    1d80:	8c 93       	st	X, r24
		PORTD|=LOW_NIBBLE_VALUE;
    1d82:	a2 e3       	ldi	r26, 0x32	; 50
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e2 e3       	ldi	r30, 0x32	; 50
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	90 81       	ld	r25, Z
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	89 2b       	or	r24, r25
    1d90:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	08 95       	ret

00001da0 <DIO_Write_High_Nibble>:
// Write on Bits from 4 to 7
void DIO_Write_High_Nibble(u8 PORT_NO,u8 HIGH_NIBBLE_VALUE)
{
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	00 d0       	rcall	.+0      	; 0x1da6 <DIO_Write_High_Nibble+0x6>
    1da6:	00 d0       	rcall	.+0      	; 0x1da8 <DIO_Write_High_Nibble+0x8>
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    1dac:	89 83       	std	Y+1, r24	; 0x01
    1dae:	6a 83       	std	Y+2, r22	; 0x02
	HIGH_NIBBLE_VALUE<<=FOUR;
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	82 95       	swap	r24
    1db4:	80 7f       	andi	r24, 0xF0	; 240
    1db6:	8a 83       	std	Y+2, r24	; 0x02
	switch (PORT_NO)
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	28 2f       	mov	r18, r24
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	3c 83       	std	Y+4, r19	; 0x04
    1dc0:	2b 83       	std	Y+3, r18	; 0x03
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc6:	84 34       	cpi	r24, 0x44	; 68
    1dc8:	91 05       	cpc	r25, r1
    1dca:	09 f4       	brne	.+2      	; 0x1dce <DIO_Write_High_Nibble+0x2e>
    1dcc:	61 c0       	rjmp	.+194    	; 0x1e90 <DIO_Write_High_Nibble+0xf0>
    1dce:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd2:	25 34       	cpi	r18, 0x45	; 69
    1dd4:	31 05       	cpc	r19, r1
    1dd6:	8c f4       	brge	.+34     	; 0x1dfa <DIO_Write_High_Nibble+0x5a>
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	9c 81       	ldd	r25, Y+4	; 0x04
    1ddc:	82 34       	cpi	r24, 0x42	; 66
    1dde:	91 05       	cpc	r25, r1
    1de0:	b9 f1       	breq	.+110    	; 0x1e50 <DIO_Write_High_Nibble+0xb0>
    1de2:	2b 81       	ldd	r18, Y+3	; 0x03
    1de4:	3c 81       	ldd	r19, Y+4	; 0x04
    1de6:	23 34       	cpi	r18, 0x43	; 67
    1de8:	31 05       	cpc	r19, r1
    1dea:	0c f0       	brlt	.+2      	; 0x1dee <DIO_Write_High_Nibble+0x4e>
    1dec:	41 c0       	rjmp	.+130    	; 0x1e70 <DIO_Write_High_Nibble+0xd0>
    1dee:	8b 81       	ldd	r24, Y+3	; 0x03
    1df0:	9c 81       	ldd	r25, Y+4	; 0x04
    1df2:	81 34       	cpi	r24, 0x41	; 65
    1df4:	91 05       	cpc	r25, r1
    1df6:	e1 f0       	breq	.+56     	; 0x1e30 <DIO_Write_High_Nibble+0x90>
    1df8:	5a c0       	rjmp	.+180    	; 0x1eae <DIO_Write_High_Nibble+0x10e>
    1dfa:	2b 81       	ldd	r18, Y+3	; 0x03
    1dfc:	3c 81       	ldd	r19, Y+4	; 0x04
    1dfe:	22 36       	cpi	r18, 0x62	; 98
    1e00:	31 05       	cpc	r19, r1
    1e02:	31 f1       	breq	.+76     	; 0x1e50 <DIO_Write_High_Nibble+0xb0>
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	9c 81       	ldd	r25, Y+4	; 0x04
    1e08:	83 36       	cpi	r24, 0x63	; 99
    1e0a:	91 05       	cpc	r25, r1
    1e0c:	34 f4       	brge	.+12     	; 0x1e1a <DIO_Write_High_Nibble+0x7a>
    1e0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e10:	3c 81       	ldd	r19, Y+4	; 0x04
    1e12:	21 36       	cpi	r18, 0x61	; 97
    1e14:	31 05       	cpc	r19, r1
    1e16:	61 f0       	breq	.+24     	; 0x1e30 <DIO_Write_High_Nibble+0x90>
    1e18:	4a c0       	rjmp	.+148    	; 0x1eae <DIO_Write_High_Nibble+0x10e>
    1e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1e:	83 36       	cpi	r24, 0x63	; 99
    1e20:	91 05       	cpc	r25, r1
    1e22:	31 f1       	breq	.+76     	; 0x1e70 <DIO_Write_High_Nibble+0xd0>
    1e24:	2b 81       	ldd	r18, Y+3	; 0x03
    1e26:	3c 81       	ldd	r19, Y+4	; 0x04
    1e28:	24 36       	cpi	r18, 0x64	; 100
    1e2a:	31 05       	cpc	r19, r1
    1e2c:	89 f1       	breq	.+98     	; 0x1e90 <DIO_Write_High_Nibble+0xf0>
    1e2e:	3f c0       	rjmp	.+126    	; 0x1eae <DIO_Write_High_Nibble+0x10e>
	{
	case 'A':
	case 'a':
		PORTA&=0x0f;
    1e30:	ab e3       	ldi	r26, 0x3B	; 59
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	eb e3       	ldi	r30, 0x3B	; 59
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	8f 70       	andi	r24, 0x0F	; 15
    1e3c:	8c 93       	st	X, r24
		PORTA|=HIGH_NIBBLE_VALUE;
    1e3e:	ab e3       	ldi	r26, 0x3B	; 59
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	eb e3       	ldi	r30, 0x3B	; 59
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	90 81       	ld	r25, Z
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	89 2b       	or	r24, r25
    1e4c:	8c 93       	st	X, r24
    1e4e:	2f c0       	rjmp	.+94     	; 0x1eae <DIO_Write_High_Nibble+0x10e>
		break;
	case 'B':
	case 'b':
		PORTB&=0x0f;
    1e50:	a8 e3       	ldi	r26, 0x38	; 56
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	e8 e3       	ldi	r30, 0x38	; 56
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	8f 70       	andi	r24, 0x0F	; 15
    1e5c:	8c 93       	st	X, r24
		PORTB|=HIGH_NIBBLE_VALUE;
    1e5e:	a8 e3       	ldi	r26, 0x38	; 56
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e8 e3       	ldi	r30, 0x38	; 56
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	90 81       	ld	r25, Z
    1e68:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6a:	89 2b       	or	r24, r25
    1e6c:	8c 93       	st	X, r24
    1e6e:	1f c0       	rjmp	.+62     	; 0x1eae <DIO_Write_High_Nibble+0x10e>
		break;
	case 'C':
	case 'c':
		PORTC&=0x0f;
    1e70:	a5 e3       	ldi	r26, 0x35	; 53
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	e5 e3       	ldi	r30, 0x35	; 53
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	8f 70       	andi	r24, 0x0F	; 15
    1e7c:	8c 93       	st	X, r24
		PORTC|=HIGH_NIBBLE_VALUE;
    1e7e:	a5 e3       	ldi	r26, 0x35	; 53
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	e5 e3       	ldi	r30, 0x35	; 53
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	90 81       	ld	r25, Z
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	89 2b       	or	r24, r25
    1e8c:	8c 93       	st	X, r24
    1e8e:	0f c0       	rjmp	.+30     	; 0x1eae <DIO_Write_High_Nibble+0x10e>
		break;
	case 'D':
	case 'd':
		PORTD&=0x0f;
    1e90:	a2 e3       	ldi	r26, 0x32	; 50
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e2 e3       	ldi	r30, 0x32	; 50
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	8f 70       	andi	r24, 0x0F	; 15
    1e9c:	8c 93       	st	X, r24
		PORTD|=HIGH_NIBBLE_VALUE;
    1e9e:	a2 e3       	ldi	r26, 0x32	; 50
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e2 e3       	ldi	r30, 0x32	; 50
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	90 81       	ld	r25, Z
    1ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eaa:	89 2b       	or	r24, r25
    1eac:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	cf 91       	pop	r28
    1eb8:	df 91       	pop	r29
    1eba:	08 95       	ret

00001ebc <DIO_Set_High_Nibble_Direction>:

void DIO_Set_High_Nibble_Direction(u8 PORT_NO,u8 HIGH_NIBBLE_DIRECTION)
{ // dir = 1 -> output , dir = 0 -> input
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	00 d0       	rcall	.+0      	; 0x1ec2 <DIO_Set_High_Nibble_Direction+0x6>
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	89 83       	std	Y+1, r24	; 0x01
    1ec8:	6a 83       	std	Y+2, r22	; 0x02
	DIO_Set_Pin_Direction(PORT_NO,4,HIGH_NIBBLE_DIRECTION);
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	64 e0       	ldi	r22, 0x04	; 4
    1ece:	4a 81       	ldd	r20, Y+2	; 0x02
    1ed0:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(PORT_NO,5,HIGH_NIBBLE_DIRECTION);
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	65 e0       	ldi	r22, 0x05	; 5
    1ed8:	4a 81       	ldd	r20, Y+2	; 0x02
    1eda:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(PORT_NO,6,HIGH_NIBBLE_DIRECTION);
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	66 e0       	ldi	r22, 0x06	; 6
    1ee2:	4a 81       	ldd	r20, Y+2	; 0x02
    1ee4:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(PORT_NO,7,HIGH_NIBBLE_DIRECTION);
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	67 e0       	ldi	r22, 0x07	; 7
    1eec:	4a 81       	ldd	r20, Y+2	; 0x02
    1eee:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
}
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	08 95       	ret

00001efc <DIO_Set_Low_Nibble_Direction>:
void DIO_Set_Low_Nibble_Direction(u8 PORT_NO,u8 LOW_NIBBLE_DIRECTION)
{ // dir = 1 -> output , dir = 0 -> input
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <DIO_Set_Low_Nibble_Direction+0x6>
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	89 83       	std	Y+1, r24	; 0x01
    1f08:	6a 83       	std	Y+2, r22	; 0x02
	DIO_Set_Pin_Direction(PORT_NO,0,LOW_NIBBLE_DIRECTION);
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	60 e0       	ldi	r22, 0x00	; 0
    1f0e:	4a 81       	ldd	r20, Y+2	; 0x02
    1f10:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(PORT_NO,1,LOW_NIBBLE_DIRECTION);
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	61 e0       	ldi	r22, 0x01	; 1
    1f18:	4a 81       	ldd	r20, Y+2	; 0x02
    1f1a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(PORT_NO,2,LOW_NIBBLE_DIRECTION);
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	62 e0       	ldi	r22, 0x02	; 2
    1f22:	4a 81       	ldd	r20, Y+2	; 0x02
    1f24:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(PORT_NO,3,LOW_NIBBLE_DIRECTION);
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	63 e0       	ldi	r22, 0x03	; 3
    1f2c:	4a 81       	ldd	r20, Y+2	; 0x02
    1f2e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
}
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	cf 91       	pop	r28
    1f38:	df 91       	pop	r29
    1f3a:	08 95       	ret

00001f3c <Set_Global_Interrupt>:
#include "External_Interrupt.h"

/* Enable Global Interrupt */

void Set_Global_Interrupt()
{
    1f3c:	df 93       	push	r29
    1f3e:	cf 93       	push	r28
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I_BIT); // Enable Interrupt
    1f44:	af e5       	ldi	r26, 0x5F	; 95
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	ef e5       	ldi	r30, 0x5F	; 95
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	80 68       	ori	r24, 0x80	; 128
    1f50:	8c 93       	st	X, r24
}
    1f52:	cf 91       	pop	r28
    1f54:	df 91       	pop	r29
    1f56:	08 95       	ret

00001f58 <Clear_Global_Interrupt>:

/* Disable Global Interrupt */

void Clear_Global_Interrupt()
{
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,I_BIT); // Disable Interrupt
    1f60:	af e5       	ldi	r26, 0x5F	; 95
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	ef e5       	ldi	r30, 0x5F	; 95
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	8f 77       	andi	r24, 0x7F	; 127
    1f6c:	8c 93       	st	X, r24
}
    1f6e:	cf 91       	pop	r28
    1f70:	df 91       	pop	r29
    1f72:	08 95       	ret

00001f74 <INT0_INIT>:

/* Initialize External INT0 */

void INT0_INIT(u8 SENSING_MODE)
{
    1f74:	df 93       	push	r29
    1f76:	cf 93       	push	r28
    1f78:	0f 92       	push	r0
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
    1f7e:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_2,INPUT);
    1f80:	84 e4       	ldi	r24, 0x44	; 68
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	62 e0       	ldi	r22, 0x02	; 2
    1f86:	70 e0       	ldi	r23, 0x00	; 0
    1f88:	40 e0       	ldi	r20, 0x00	; 0
    1f8a:	50 e0       	ldi	r21, 0x00	; 0
    1f8c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	MCUCR |= SENSING_MODE; // Set the pin to sense the interrupt as there's 4 ways to sense
    1f90:	a5 e5       	ldi	r26, 0x55	; 85
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	e5 e5       	ldi	r30, 0x55	; 85
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	90 81       	ld	r25, Z
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	89 2b       	or	r24, r25
    1f9e:	8c 93       	st	X, r24
	SET_BIT(GICR,INT0); // Enable the INT0 To Interrupt the MC  ( 6 Is the location of it in GICR ) ( Open The Data Sheet )
    1fa0:	ab e5       	ldi	r26, 0x5B	; 91
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	eb e5       	ldi	r30, 0x5B	; 91
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	80 64       	ori	r24, 0x40	; 64
    1fac:	8c 93       	st	X, r24
}
    1fae:	0f 90       	pop	r0
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <INT1_INIT>:

/* Initialize External INT1 */

void INT1_INIT(u8 SENSING_MODE)
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	0f 92       	push	r0
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_3,INPUT); // Set Pin As Input to sense the interrupt
    1fc2:	84 e4       	ldi	r24, 0x44	; 68
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	63 e0       	ldi	r22, 0x03	; 3
    1fc8:	70 e0       	ldi	r23, 0x00	; 0
    1fca:	40 e0       	ldi	r20, 0x00	; 0
    1fcc:	50 e0       	ldi	r21, 0x00	; 0
    1fce:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	MCUCR |= (SENSING_MODE<<TWO); // Set the pin to sense the interrupt as there's 4 ways to sense
    1fd2:	a5 e5       	ldi	r26, 0x55	; 85
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	e5 e5       	ldi	r30, 0x55	; 85
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	28 2f       	mov	r18, r24
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	88 2f       	mov	r24, r24
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	88 0f       	add	r24, r24
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	88 0f       	add	r24, r24
    1fea:	99 1f       	adc	r25, r25
    1fec:	82 2b       	or	r24, r18
    1fee:	8c 93       	st	X, r24
	SET_BIT(GICR,INT1); // Enable the INT1 To Interrupt the MC ( 7 Is the location of it in GICR ) ( Open The Data Sheet )
    1ff0:	ab e5       	ldi	r26, 0x5B	; 91
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	eb e5       	ldi	r30, 0x5B	; 91
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	80 68       	ori	r24, 0x80	; 128
    1ffc:	8c 93       	st	X, r24
}
    1ffe:	0f 90       	pop	r0
    2000:	cf 91       	pop	r28
    2002:	df 91       	pop	r29
    2004:	08 95       	ret

00002006 <INT2_INIT>:

/* Initialize External INT2 */

void INT2_INIT(u8 SENSING_MODE)
{
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	0f 92       	push	r0
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
    2010:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_B,PIN_NO_2,INPUT); // Set Pin As Input to sense the interrupt
    2012:	82 e4       	ldi	r24, 0x42	; 66
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	62 e0       	ldi	r22, 0x02	; 2
    2018:	70 e0       	ldi	r23, 0x00	; 0
    201a:	40 e0       	ldi	r20, 0x00	; 0
    201c:	50 e0       	ldi	r21, 0x00	; 0
    201e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	if(SENSING_MODE == RISE_EDGE){
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	83 30       	cpi	r24, 0x03	; 3
    2026:	39 f4       	brne	.+14     	; 0x2036 <INT2_INIT+0x30>
		SET_BIT(MCUCSR,SIX); // Set The Sense of interrupt as Rising edge
    2028:	a4 e5       	ldi	r26, 0x54	; 84
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e4 e5       	ldi	r30, 0x54	; 84
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	80 64       	ori	r24, 0x40	; 64
    2034:	8c 93       	st	X, r24
	}
	if(SENSING_MODE == FALLING_EDGE){
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	82 30       	cpi	r24, 0x02	; 2
    203a:	39 f4       	brne	.+14     	; 0x204a <INT2_INIT+0x44>
		CLEAR_BIT(MCUCSR,SIX); // Set The Sense of interrupt as Falling edge
    203c:	a4 e5       	ldi	r26, 0x54	; 84
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e4 e5       	ldi	r30, 0x54	; 84
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	8f 7b       	andi	r24, 0xBF	; 191
    2048:	8c 93       	st	X, r24
	}
	SET_BIT(GICR,INT2); // Enable the INT2 To Interrupt the MC ( 5 Is the location of it in GICR ) ( Open The Data Sheet )
    204a:	ab e5       	ldi	r26, 0x5B	; 91
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	eb e5       	ldi	r30, 0x5B	; 91
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	80 62       	ori	r24, 0x20	; 32
    2056:	8c 93       	st	X, r24
}
    2058:	0f 90       	pop	r0
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	08 95       	ret

00002060 <CheckIRQ0>:

/* Extra Function */
/* Check Interrupt Request of INT0 */ /* I Can Read It from Watching Window In Proteus */ 

u8 CheckIRQ0()
{
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
	return READ_BIT(GIFR,INTF0);
    2068:	ea e5       	ldi	r30, 0x5A	; 90
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	88 2f       	mov	r24, r24
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	80 74       	andi	r24, 0x40	; 64
    2074:	90 70       	andi	r25, 0x00	; 0
    2076:	08 2e       	mov	r0, r24
    2078:	89 2f       	mov	r24, r25
    207a:	00 0c       	add	r0, r0
    207c:	88 1f       	adc	r24, r24
    207e:	99 0b       	sbc	r25, r25
    2080:	00 0c       	add	r0, r0
    2082:	88 1f       	adc	r24, r24
    2084:	99 1f       	adc	r25, r25
}
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	08 95       	ret

0000208c <CheckIRQ1>:

/* Check Interrupt Request of INT1 */

u8 CheckIRQ1()
{
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
	return READ_BIT(GIFR,INTF1);
    2094:	ea e5       	ldi	r30, 0x5A	; 90
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	88 1f       	adc	r24, r24
    209c:	88 27       	eor	r24, r24
    209e:	88 1f       	adc	r24, r24
}
    20a0:	cf 91       	pop	r28
    20a2:	df 91       	pop	r29
    20a4:	08 95       	ret

000020a6 <CheckIRQ2>:

/* Check Interrupt Request of INT2 */

u8 CheckIRQ2()
{
    20a6:	df 93       	push	r29
    20a8:	cf 93       	push	r28
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
	return READ_BIT(GIFR,INTF2);
    20ae:	ea e5       	ldi	r30, 0x5A	; 90
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	88 2f       	mov	r24, r24
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	80 72       	andi	r24, 0x20	; 32
    20ba:	90 70       	andi	r25, 0x00	; 0
    20bc:	95 95       	asr	r25
    20be:	87 95       	ror	r24
    20c0:	95 95       	asr	r25
    20c2:	87 95       	ror	r24
    20c4:	95 95       	asr	r25
    20c6:	87 95       	ror	r24
    20c8:	95 95       	asr	r25
    20ca:	87 95       	ror	r24
    20cc:	95 95       	asr	r25
    20ce:	87 95       	ror	r24
}
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <SET_ENINT0>:
/* Needed Functions For Applying the Nested Interrupt */

/* Set the INT0 Enable bit */

void SET_ENINT0()
{
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,INT0);
    20de:	ab e5       	ldi	r26, 0x5B	; 91
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	eb e5       	ldi	r30, 0x5B	; 91
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	80 64       	ori	r24, 0x40	; 64
    20ea:	8c 93       	st	X, r24
}
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	08 95       	ret

000020f2 <SET_ENINT1>:

/* Set the INT1 Enable bit */

void SET_ENINT1()
{
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,INT1);
    20fa:	ab e5       	ldi	r26, 0x5B	; 91
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	eb e5       	ldi	r30, 0x5B	; 91
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	80 68       	ori	r24, 0x80	; 128
    2106:	8c 93       	st	X, r24
}
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <SET_ENABLE_INT2>:

/* Set the INT2 Enable bit */

void SET_ENABLE_INT2()
{
    210e:	df 93       	push	r29
    2110:	cf 93       	push	r28
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,INT2);
    2116:	ab e5       	ldi	r26, 0x5B	; 91
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	eb e5       	ldi	r30, 0x5B	; 91
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	80 62       	ori	r24, 0x20	; 32
    2122:	8c 93       	st	X, r24
}
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	08 95       	ret

0000212a <Clear_ENABLE_INT0>:

/* Clear the INT0 Enable bit */

void Clear_ENABLE_INT0()
{
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GICR,INT0);
    2132:	ab e5       	ldi	r26, 0x5B	; 91
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	eb e5       	ldi	r30, 0x5B	; 91
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	8f 7b       	andi	r24, 0xBF	; 191
    213e:	8c 93       	st	X, r24
}
    2140:	cf 91       	pop	r28
    2142:	df 91       	pop	r29
    2144:	08 95       	ret

00002146 <Clear_ENABLE_INT1>:

/* Clear the INT1 Enable bit */

void Clear_ENABLE_INT1()
{
    2146:	df 93       	push	r29
    2148:	cf 93       	push	r28
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GICR,INT1);
    214e:	ab e5       	ldi	r26, 0x5B	; 91
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	eb e5       	ldi	r30, 0x5B	; 91
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	8f 77       	andi	r24, 0x7F	; 127
    215a:	8c 93       	st	X, r24
}
    215c:	cf 91       	pop	r28
    215e:	df 91       	pop	r29
    2160:	08 95       	ret

00002162 <Clear_ENABLE_INT2>:

/* Clear the INT2 Enable bit */

void Clear_ENABLE_INT2()
{
    2162:	df 93       	push	r29
    2164:	cf 93       	push	r28
    2166:	cd b7       	in	r28, 0x3d	; 61
    2168:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GICR,INT2);
    216a:	ab e5       	ldi	r26, 0x5B	; 91
    216c:	b0 e0       	ldi	r27, 0x00	; 0
    216e:	eb e5       	ldi	r30, 0x5B	; 91
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	8f 7d       	andi	r24, 0xDF	; 223
    2176:	8c 93       	st	X, r24
}
    2178:	cf 91       	pop	r28
    217a:	df 91       	pop	r29
    217c:	08 95       	ret

0000217e <enable>:
#include "LCD.h"
// Sending Pulse with 2 m sec Width To make the LCD take the data and store it or take the command and do it
void enable()
{
    217e:	df 93       	push	r29
    2180:	cf 93       	push	r28
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
    2186:	6c 97       	sbiw	r28, 0x1c	; 28
    2188:	0f b6       	in	r0, 0x3f	; 63
    218a:	f8 94       	cli
    218c:	de bf       	out	0x3e, r29	; 62
    218e:	0f be       	out	0x3f, r0	; 63
    2190:	cd bf       	out	0x3d, r28	; 61
	DIO_Write_Pin(CONTROL_PORT,EN,HIGH);
    2192:	83 e4       	ldi	r24, 0x43	; 67
    2194:	60 e0       	ldi	r22, 0x00	; 0
    2196:	41 e0       	ldi	r20, 0x01	; 1
    2198:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	a0 e0       	ldi	r26, 0x00	; 0
    21a2:	b0 e4       	ldi	r27, 0x40	; 64
    21a4:	89 8f       	std	Y+25, r24	; 0x19
    21a6:	9a 8f       	std	Y+26, r25	; 0x1a
    21a8:	ab 8f       	std	Y+27, r26	; 0x1b
    21aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ac:	69 8d       	ldd	r22, Y+25	; 0x19
    21ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	4a ef       	ldi	r20, 0xFA	; 250
    21ba:	54 e4       	ldi	r21, 0x44	; 68
    21bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	8d 8b       	std	Y+21, r24	; 0x15
    21c6:	9e 8b       	std	Y+22, r25	; 0x16
    21c8:	af 8b       	std	Y+23, r26	; 0x17
    21ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21cc:	6d 89       	ldd	r22, Y+21	; 0x15
    21ce:	7e 89       	ldd	r23, Y+22	; 0x16
    21d0:	8f 89       	ldd	r24, Y+23	; 0x17
    21d2:	98 8d       	ldd	r25, Y+24	; 0x18
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	40 e8       	ldi	r20, 0x80	; 128
    21da:	5f e3       	ldi	r21, 0x3F	; 63
    21dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21e0:	88 23       	and	r24, r24
    21e2:	2c f4       	brge	.+10     	; 0x21ee <enable+0x70>
		__ticks = 1;
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	9c 8b       	std	Y+20, r25	; 0x14
    21ea:	8b 8b       	std	Y+19, r24	; 0x13
    21ec:	3f c0       	rjmp	.+126    	; 0x226c <enable+0xee>
	else if (__tmp > 65535)
    21ee:	6d 89       	ldd	r22, Y+21	; 0x15
    21f0:	7e 89       	ldd	r23, Y+22	; 0x16
    21f2:	8f 89       	ldd	r24, Y+23	; 0x17
    21f4:	98 8d       	ldd	r25, Y+24	; 0x18
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	3f ef       	ldi	r19, 0xFF	; 255
    21fa:	4f e7       	ldi	r20, 0x7F	; 127
    21fc:	57 e4       	ldi	r21, 0x47	; 71
    21fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2202:	18 16       	cp	r1, r24
    2204:	4c f5       	brge	.+82     	; 0x2258 <enable+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2206:	69 8d       	ldd	r22, Y+25	; 0x19
    2208:	7a 8d       	ldd	r23, Y+26	; 0x1a
    220a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    220c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e2       	ldi	r20, 0x20	; 32
    2214:	51 e4       	ldi	r21, 0x41	; 65
    2216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	bc 01       	movw	r22, r24
    2220:	cd 01       	movw	r24, r26
    2222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	9c 8b       	std	Y+20, r25	; 0x14
    222c:	8b 8b       	std	Y+19, r24	; 0x13
    222e:	0f c0       	rjmp	.+30     	; 0x224e <enable+0xd0>
    2230:	88 ec       	ldi	r24, 0xC8	; 200
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	9a 8b       	std	Y+18, r25	; 0x12
    2236:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2238:	89 89       	ldd	r24, Y+17	; 0x11
    223a:	9a 89       	ldd	r25, Y+18	; 0x12
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	f1 f7       	brne	.-4      	; 0x223c <enable+0xbe>
    2240:	9a 8b       	std	Y+18, r25	; 0x12
    2242:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2244:	8b 89       	ldd	r24, Y+19	; 0x13
    2246:	9c 89       	ldd	r25, Y+20	; 0x14
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	9c 8b       	std	Y+20, r25	; 0x14
    224c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224e:	8b 89       	ldd	r24, Y+19	; 0x13
    2250:	9c 89       	ldd	r25, Y+20	; 0x14
    2252:	00 97       	sbiw	r24, 0x00	; 0
    2254:	69 f7       	brne	.-38     	; 0x2230 <enable+0xb2>
    2256:	14 c0       	rjmp	.+40     	; 0x2280 <enable+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2258:	6d 89       	ldd	r22, Y+21	; 0x15
    225a:	7e 89       	ldd	r23, Y+22	; 0x16
    225c:	8f 89       	ldd	r24, Y+23	; 0x17
    225e:	98 8d       	ldd	r25, Y+24	; 0x18
    2260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	9c 8b       	std	Y+20, r25	; 0x14
    226a:	8b 8b       	std	Y+19, r24	; 0x13
    226c:	8b 89       	ldd	r24, Y+19	; 0x13
    226e:	9c 89       	ldd	r25, Y+20	; 0x14
    2270:	98 8b       	std	Y+16, r25	; 0x10
    2272:	8f 87       	std	Y+15, r24	; 0x0f
    2274:	8f 85       	ldd	r24, Y+15	; 0x0f
    2276:	98 89       	ldd	r25, Y+16	; 0x10
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	f1 f7       	brne	.-4      	; 0x2278 <enable+0xfa>
    227c:	98 8b       	std	Y+16, r25	; 0x10
    227e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_Write_Pin(CONTROL_PORT,EN,LOW);
    2280:	83 e4       	ldi	r24, 0x43	; 67
    2282:	60 e0       	ldi	r22, 0x00	; 0
    2284:	40 e0       	ldi	r20, 0x00	; 0
    2286:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	a0 e0       	ldi	r26, 0x00	; 0
    2290:	b0 e4       	ldi	r27, 0x40	; 64
    2292:	8b 87       	std	Y+11, r24	; 0x0b
    2294:	9c 87       	std	Y+12, r25	; 0x0c
    2296:	ad 87       	std	Y+13, r26	; 0x0d
    2298:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229a:	6b 85       	ldd	r22, Y+11	; 0x0b
    229c:	7c 85       	ldd	r23, Y+12	; 0x0c
    229e:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	4a ef       	ldi	r20, 0xFA	; 250
    22a8:	54 e4       	ldi	r21, 0x44	; 68
    22aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	8f 83       	std	Y+7, r24	; 0x07
    22b4:	98 87       	std	Y+8, r25	; 0x08
    22b6:	a9 87       	std	Y+9, r26	; 0x09
    22b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22ba:	6f 81       	ldd	r22, Y+7	; 0x07
    22bc:	78 85       	ldd	r23, Y+8	; 0x08
    22be:	89 85       	ldd	r24, Y+9	; 0x09
    22c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e8       	ldi	r20, 0x80	; 128
    22c8:	5f e3       	ldi	r21, 0x3F	; 63
    22ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22ce:	88 23       	and	r24, r24
    22d0:	2c f4       	brge	.+10     	; 0x22dc <enable+0x15e>
		__ticks = 1;
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	9e 83       	std	Y+6, r25	; 0x06
    22d8:	8d 83       	std	Y+5, r24	; 0x05
    22da:	3f c0       	rjmp	.+126    	; 0x235a <enable+0x1dc>
	else if (__tmp > 65535)
    22dc:	6f 81       	ldd	r22, Y+7	; 0x07
    22de:	78 85       	ldd	r23, Y+8	; 0x08
    22e0:	89 85       	ldd	r24, Y+9	; 0x09
    22e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	3f ef       	ldi	r19, 0xFF	; 255
    22e8:	4f e7       	ldi	r20, 0x7F	; 127
    22ea:	57 e4       	ldi	r21, 0x47	; 71
    22ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22f0:	18 16       	cp	r1, r24
    22f2:	4c f5       	brge	.+82     	; 0x2346 <enable+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	40 e2       	ldi	r20, 0x20	; 32
    2302:	51 e4       	ldi	r21, 0x41	; 65
    2304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	bc 01       	movw	r22, r24
    230e:	cd 01       	movw	r24, r26
    2310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	9e 83       	std	Y+6, r25	; 0x06
    231a:	8d 83       	std	Y+5, r24	; 0x05
    231c:	0f c0       	rjmp	.+30     	; 0x233c <enable+0x1be>
    231e:	88 ec       	ldi	r24, 0xC8	; 200
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	9c 83       	std	Y+4, r25	; 0x04
    2324:	8b 83       	std	Y+3, r24	; 0x03
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	9c 81       	ldd	r25, Y+4	; 0x04
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	f1 f7       	brne	.-4      	; 0x232a <enable+0x1ac>
    232e:	9c 83       	std	Y+4, r25	; 0x04
    2330:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2332:	8d 81       	ldd	r24, Y+5	; 0x05
    2334:	9e 81       	ldd	r25, Y+6	; 0x06
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	9e 83       	std	Y+6, r25	; 0x06
    233a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233c:	8d 81       	ldd	r24, Y+5	; 0x05
    233e:	9e 81       	ldd	r25, Y+6	; 0x06
    2340:	00 97       	sbiw	r24, 0x00	; 0
    2342:	69 f7       	brne	.-38     	; 0x231e <enable+0x1a0>
    2344:	14 c0       	rjmp	.+40     	; 0x236e <enable+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2346:	6f 81       	ldd	r22, Y+7	; 0x07
    2348:	78 85       	ldd	r23, Y+8	; 0x08
    234a:	89 85       	ldd	r24, Y+9	; 0x09
    234c:	9a 85       	ldd	r25, Y+10	; 0x0a
    234e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	9e 83       	std	Y+6, r25	; 0x06
    2358:	8d 83       	std	Y+5, r24	; 0x05
    235a:	8d 81       	ldd	r24, Y+5	; 0x05
    235c:	9e 81       	ldd	r25, Y+6	; 0x06
    235e:	9a 83       	std	Y+2, r25	; 0x02
    2360:	89 83       	std	Y+1, r24	; 0x01
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	9a 81       	ldd	r25, Y+2	; 0x02
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	f1 f7       	brne	.-4      	; 0x2366 <enable+0x1e8>
    236a:	9a 83       	std	Y+2, r25	; 0x02
    236c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    236e:	6c 96       	adiw	r28, 0x1c	; 28
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	cd bf       	out	0x3d, r28	; 61
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <Data_Register_Select>:
// Write on Data Register ( Receive from data pins as a data to print )
void Data_Register_Select()
{
    2380:	df 93       	push	r29
    2382:	cf 93       	push	r28
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
	DIO_Write_Pin(CONTROL_PORT,RS,HIGH);
    2388:	83 e4       	ldi	r24, 0x43	; 67
    238a:	61 e0       	ldi	r22, 0x01	; 1
    238c:	41 e0       	ldi	r20, 0x01	; 1
    238e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
}
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	08 95       	ret

00002398 <Cmd_Register_Select>:
// // Write on Instruction Register ( Receive from data pins as a CMD to do )
void Cmd_Register_Select()
{
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
	DIO_Write_Pin(CONTROL_PORT,RS,LOW);
    23a0:	83 e4       	ldi	r24, 0x43	; 67
    23a2:	61 e0       	ldi	r22, 0x01	; 1
    23a4:	40 e0       	ldi	r20, 0x00	; 0
    23a6:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
}
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	08 95       	ret

000023b0 <LCD_Data_Direction>:
// Set the Direction of data ( Read == 1 ) ( Write == 0 ) ( Pin 5 in LCD ) ( In case of connecting R/W With MC )
void LCD_Data_Direction(u8 DIRECTION)
{
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	0f 92       	push	r0
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
    23ba:	89 83       	std	Y+1, r24	; 0x01
	DIO_Write_Pin(CONTROL_PORT,RW,DIRECTION);
    23bc:	83 e4       	ldi	r24, 0x43	; 67
    23be:	62 e0       	ldi	r22, 0x02	; 2
    23c0:	49 81       	ldd	r20, Y+1	; 0x01
    23c2:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
}
    23c6:	0f 90       	pop	r0
    23c8:	cf 91       	pop	r28
    23ca:	df 91       	pop	r29
    23cc:	08 95       	ret

000023ce <LCD_Send_Cmd>:
// Send Command to LCD to do
void LCD_Send_Cmd(u8 COMMAND)
{
    23ce:	df 93       	push	r29
    23d0:	cf 93       	push	r28
    23d2:	0f 92       	push	r0
    23d4:	cd b7       	in	r28, 0x3d	; 61
    23d6:	de b7       	in	r29, 0x3e	; 62
    23d8:	89 83       	std	Y+1, r24	; 0x01
	Cmd_Register_Select();
    23da:	0e 94 cc 11 	call	0x2398	; 0x2398 <Cmd_Register_Select>
#if defined EIGHT_BIT_MODE
	DIO_WritePort(DATA_PORT,COMMAND);
	enable();
#elif defined FOUR_BIT_MODE
#if defined HIGH_NIBBLE
	DIO_Write_High_Nibble(DATA_PORT,COMMAND>>FOUR);
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	98 2f       	mov	r25, r24
    23e2:	92 95       	swap	r25
    23e4:	9f 70       	andi	r25, 0x0F	; 15
    23e6:	83 e4       	ldi	r24, 0x43	; 67
    23e8:	69 2f       	mov	r22, r25
    23ea:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <DIO_Write_High_Nibble>
	enable();
    23ee:	0e 94 bf 10 	call	0x217e	; 0x217e <enable>
	DIO_Write_High_Nibble(DATA_PORT,COMMAND);
    23f2:	83 e4       	ldi	r24, 0x43	; 67
    23f4:	69 81       	ldd	r22, Y+1	; 0x01
    23f6:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <DIO_Write_High_Nibble>
	enable();
    23fa:	0e 94 bf 10 	call	0x217e	; 0x217e <enable>
	enable();
	DIO_Write_Low_Nibble(DATA_PORT,COMMAND);
	enable();
#endif // for Nibble
#endif // For Mode
}
    23fe:	0f 90       	pop	r0
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <LCD_Clear_Screen>:
// Clear LCD Screen
void LCD_Clear_Screen()
{
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	2e 97       	sbiw	r28, 0x0e	; 14
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	f8 94       	cli
    2414:	de bf       	out	0x3e, r29	; 62
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	cd bf       	out	0x3d, r28	; 61
	LCD_Send_Cmd(CLR_SCREEN);
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	0e 94 e7 11 	call	0x23ce	; 0x23ce <LCD_Send_Cmd>
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	a0 e2       	ldi	r26, 0x20	; 32
    2426:	b1 e4       	ldi	r27, 0x41	; 65
    2428:	8b 87       	std	Y+11, r24	; 0x0b
    242a:	9c 87       	std	Y+12, r25	; 0x0c
    242c:	ad 87       	std	Y+13, r26	; 0x0d
    242e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2430:	6b 85       	ldd	r22, Y+11	; 0x0b
    2432:	7c 85       	ldd	r23, Y+12	; 0x0c
    2434:	8d 85       	ldd	r24, Y+13	; 0x0d
    2436:	9e 85       	ldd	r25, Y+14	; 0x0e
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	4a ef       	ldi	r20, 0xFA	; 250
    243e:	54 e4       	ldi	r21, 0x44	; 68
    2440:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	8f 83       	std	Y+7, r24	; 0x07
    244a:	98 87       	std	Y+8, r25	; 0x08
    244c:	a9 87       	std	Y+9, r26	; 0x09
    244e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2450:	6f 81       	ldd	r22, Y+7	; 0x07
    2452:	78 85       	ldd	r23, Y+8	; 0x08
    2454:	89 85       	ldd	r24, Y+9	; 0x09
    2456:	9a 85       	ldd	r25, Y+10	; 0x0a
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	40 e8       	ldi	r20, 0x80	; 128
    245e:	5f e3       	ldi	r21, 0x3F	; 63
    2460:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2464:	88 23       	and	r24, r24
    2466:	2c f4       	brge	.+10     	; 0x2472 <LCD_Clear_Screen+0x6c>
		__ticks = 1;
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	9e 83       	std	Y+6, r25	; 0x06
    246e:	8d 83       	std	Y+5, r24	; 0x05
    2470:	3f c0       	rjmp	.+126    	; 0x24f0 <LCD_Clear_Screen+0xea>
	else if (__tmp > 65535)
    2472:	6f 81       	ldd	r22, Y+7	; 0x07
    2474:	78 85       	ldd	r23, Y+8	; 0x08
    2476:	89 85       	ldd	r24, Y+9	; 0x09
    2478:	9a 85       	ldd	r25, Y+10	; 0x0a
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	3f ef       	ldi	r19, 0xFF	; 255
    247e:	4f e7       	ldi	r20, 0x7F	; 127
    2480:	57 e4       	ldi	r21, 0x47	; 71
    2482:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2486:	18 16       	cp	r1, r24
    2488:	4c f5       	brge	.+82     	; 0x24dc <LCD_Clear_Screen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    248a:	6b 85       	ldd	r22, Y+11	; 0x0b
    248c:	7c 85       	ldd	r23, Y+12	; 0x0c
    248e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2490:	9e 85       	ldd	r25, Y+14	; 0x0e
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	40 e2       	ldi	r20, 0x20	; 32
    2498:	51 e4       	ldi	r21, 0x41	; 65
    249a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	bc 01       	movw	r22, r24
    24a4:	cd 01       	movw	r24, r26
    24a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	9e 83       	std	Y+6, r25	; 0x06
    24b0:	8d 83       	std	Y+5, r24	; 0x05
    24b2:	0f c0       	rjmp	.+30     	; 0x24d2 <LCD_Clear_Screen+0xcc>
    24b4:	88 ec       	ldi	r24, 0xC8	; 200
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	9c 83       	std	Y+4, r25	; 0x04
    24ba:	8b 83       	std	Y+3, r24	; 0x03
    24bc:	8b 81       	ldd	r24, Y+3	; 0x03
    24be:	9c 81       	ldd	r25, Y+4	; 0x04
    24c0:	01 97       	sbiw	r24, 0x01	; 1
    24c2:	f1 f7       	brne	.-4      	; 0x24c0 <LCD_Clear_Screen+0xba>
    24c4:	9c 83       	std	Y+4, r25	; 0x04
    24c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ca:	9e 81       	ldd	r25, Y+6	; 0x06
    24cc:	01 97       	sbiw	r24, 0x01	; 1
    24ce:	9e 83       	std	Y+6, r25	; 0x06
    24d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d2:	8d 81       	ldd	r24, Y+5	; 0x05
    24d4:	9e 81       	ldd	r25, Y+6	; 0x06
    24d6:	00 97       	sbiw	r24, 0x00	; 0
    24d8:	69 f7       	brne	.-38     	; 0x24b4 <LCD_Clear_Screen+0xae>
    24da:	14 c0       	rjmp	.+40     	; 0x2504 <LCD_Clear_Screen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24dc:	6f 81       	ldd	r22, Y+7	; 0x07
    24de:	78 85       	ldd	r23, Y+8	; 0x08
    24e0:	89 85       	ldd	r24, Y+9	; 0x09
    24e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	9e 83       	std	Y+6, r25	; 0x06
    24ee:	8d 83       	std	Y+5, r24	; 0x05
    24f0:	8d 81       	ldd	r24, Y+5	; 0x05
    24f2:	9e 81       	ldd	r25, Y+6	; 0x06
    24f4:	9a 83       	std	Y+2, r25	; 0x02
    24f6:	89 83       	std	Y+1, r24	; 0x01
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	9a 81       	ldd	r25, Y+2	; 0x02
    24fc:	01 97       	sbiw	r24, 0x01	; 1
    24fe:	f1 f7       	brne	.-4      	; 0x24fc <LCD_Clear_Screen+0xf6>
    2500:	9a 83       	std	Y+2, r25	; 0x02
    2502:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2504:	2e 96       	adiw	r28, 0x0e	; 14
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	de bf       	out	0x3e, r29	; 62
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	cd bf       	out	0x3d, r28	; 61
    2510:	cf 91       	pop	r28
    2512:	df 91       	pop	r29
    2514:	08 95       	ret

00002516 <LCD_Return_Home>:
//Return The Cursor at the beginning of LCD
void LCD_Return_Home()
{
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	2e 97       	sbiw	r28, 0x0e	; 14
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	de bf       	out	0x3e, r29	; 62
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	cd bf       	out	0x3d, r28	; 61
	LCD_Send_Cmd(RETURN_HOME);
    252a:	82 e0       	ldi	r24, 0x02	; 2
    252c:	0e 94 e7 11 	call	0x23ce	; 0x23ce <LCD_Send_Cmd>
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	a0 e2       	ldi	r26, 0x20	; 32
    2536:	b1 e4       	ldi	r27, 0x41	; 65
    2538:	8b 87       	std	Y+11, r24	; 0x0b
    253a:	9c 87       	std	Y+12, r25	; 0x0c
    253c:	ad 87       	std	Y+13, r26	; 0x0d
    253e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2540:	6b 85       	ldd	r22, Y+11	; 0x0b
    2542:	7c 85       	ldd	r23, Y+12	; 0x0c
    2544:	8d 85       	ldd	r24, Y+13	; 0x0d
    2546:	9e 85       	ldd	r25, Y+14	; 0x0e
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	4a ef       	ldi	r20, 0xFA	; 250
    254e:	54 e4       	ldi	r21, 0x44	; 68
    2550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	8f 83       	std	Y+7, r24	; 0x07
    255a:	98 87       	std	Y+8, r25	; 0x08
    255c:	a9 87       	std	Y+9, r26	; 0x09
    255e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2560:	6f 81       	ldd	r22, Y+7	; 0x07
    2562:	78 85       	ldd	r23, Y+8	; 0x08
    2564:	89 85       	ldd	r24, Y+9	; 0x09
    2566:	9a 85       	ldd	r25, Y+10	; 0x0a
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	40 e8       	ldi	r20, 0x80	; 128
    256e:	5f e3       	ldi	r21, 0x3F	; 63
    2570:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2574:	88 23       	and	r24, r24
    2576:	2c f4       	brge	.+10     	; 0x2582 <LCD_Return_Home+0x6c>
		__ticks = 1;
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	9e 83       	std	Y+6, r25	; 0x06
    257e:	8d 83       	std	Y+5, r24	; 0x05
    2580:	3f c0       	rjmp	.+126    	; 0x2600 <LCD_Return_Home+0xea>
	else if (__tmp > 65535)
    2582:	6f 81       	ldd	r22, Y+7	; 0x07
    2584:	78 85       	ldd	r23, Y+8	; 0x08
    2586:	89 85       	ldd	r24, Y+9	; 0x09
    2588:	9a 85       	ldd	r25, Y+10	; 0x0a
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	3f ef       	ldi	r19, 0xFF	; 255
    258e:	4f e7       	ldi	r20, 0x7F	; 127
    2590:	57 e4       	ldi	r21, 0x47	; 71
    2592:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2596:	18 16       	cp	r1, r24
    2598:	4c f5       	brge	.+82     	; 0x25ec <LCD_Return_Home+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    259a:	6b 85       	ldd	r22, Y+11	; 0x0b
    259c:	7c 85       	ldd	r23, Y+12	; 0x0c
    259e:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	40 e2       	ldi	r20, 0x20	; 32
    25a8:	51 e4       	ldi	r21, 0x41	; 65
    25aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	bc 01       	movw	r22, r24
    25b4:	cd 01       	movw	r24, r26
    25b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	9e 83       	std	Y+6, r25	; 0x06
    25c0:	8d 83       	std	Y+5, r24	; 0x05
    25c2:	0f c0       	rjmp	.+30     	; 0x25e2 <LCD_Return_Home+0xcc>
    25c4:	88 ec       	ldi	r24, 0xC8	; 200
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	9c 83       	std	Y+4, r25	; 0x04
    25ca:	8b 83       	std	Y+3, r24	; 0x03
    25cc:	8b 81       	ldd	r24, Y+3	; 0x03
    25ce:	9c 81       	ldd	r25, Y+4	; 0x04
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	f1 f7       	brne	.-4      	; 0x25d0 <LCD_Return_Home+0xba>
    25d4:	9c 83       	std	Y+4, r25	; 0x04
    25d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d8:	8d 81       	ldd	r24, Y+5	; 0x05
    25da:	9e 81       	ldd	r25, Y+6	; 0x06
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	9e 83       	std	Y+6, r25	; 0x06
    25e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e2:	8d 81       	ldd	r24, Y+5	; 0x05
    25e4:	9e 81       	ldd	r25, Y+6	; 0x06
    25e6:	00 97       	sbiw	r24, 0x00	; 0
    25e8:	69 f7       	brne	.-38     	; 0x25c4 <LCD_Return_Home+0xae>
    25ea:	14 c0       	rjmp	.+40     	; 0x2614 <LCD_Return_Home+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ec:	6f 81       	ldd	r22, Y+7	; 0x07
    25ee:	78 85       	ldd	r23, Y+8	; 0x08
    25f0:	89 85       	ldd	r24, Y+9	; 0x09
    25f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	9e 83       	std	Y+6, r25	; 0x06
    25fe:	8d 83       	std	Y+5, r24	; 0x05
    2600:	8d 81       	ldd	r24, Y+5	; 0x05
    2602:	9e 81       	ldd	r25, Y+6	; 0x06
    2604:	9a 83       	std	Y+2, r25	; 0x02
    2606:	89 83       	std	Y+1, r24	; 0x01
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	9a 81       	ldd	r25, Y+2	; 0x02
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	f1 f7       	brne	.-4      	; 0x260c <LCD_Return_Home+0xf6>
    2610:	9a 83       	std	Y+2, r25	; 0x02
    2612:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2614:	2e 96       	adiw	r28, 0x0e	; 14
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	f8 94       	cli
    261a:	de bf       	out	0x3e, r29	; 62
    261c:	0f be       	out	0x3f, r0	; 63
    261e:	cd bf       	out	0x3d, r28	; 61
    2620:	cf 91       	pop	r28
    2622:	df 91       	pop	r29
    2624:	08 95       	ret

00002626 <EntryMode>:
// Make the cursor Move Right After writing a Char in the place where the Cursor stand
void EntryMode()
{
    2626:	df 93       	push	r29
    2628:	cf 93       	push	r28
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	2e 97       	sbiw	r28, 0x0e	; 14
    2630:	0f b6       	in	r0, 0x3f	; 63
    2632:	f8 94       	cli
    2634:	de bf       	out	0x3e, r29	; 62
    2636:	0f be       	out	0x3f, r0	; 63
    2638:	cd bf       	out	0x3d, r28	; 61
	LCD_Send_Cmd(ENTRY_MODE);
    263a:	86 e0       	ldi	r24, 0x06	; 6
    263c:	0e 94 e7 11 	call	0x23ce	; 0x23ce <LCD_Send_Cmd>
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	a0 e8       	ldi	r26, 0x80	; 128
    2646:	bf e3       	ldi	r27, 0x3F	; 63
    2648:	8b 87       	std	Y+11, r24	; 0x0b
    264a:	9c 87       	std	Y+12, r25	; 0x0c
    264c:	ad 87       	std	Y+13, r26	; 0x0d
    264e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2650:	6b 85       	ldd	r22, Y+11	; 0x0b
    2652:	7c 85       	ldd	r23, Y+12	; 0x0c
    2654:	8d 85       	ldd	r24, Y+13	; 0x0d
    2656:	9e 85       	ldd	r25, Y+14	; 0x0e
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	4a ef       	ldi	r20, 0xFA	; 250
    265e:	54 e4       	ldi	r21, 0x44	; 68
    2660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	8f 83       	std	Y+7, r24	; 0x07
    266a:	98 87       	std	Y+8, r25	; 0x08
    266c:	a9 87       	std	Y+9, r26	; 0x09
    266e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2670:	6f 81       	ldd	r22, Y+7	; 0x07
    2672:	78 85       	ldd	r23, Y+8	; 0x08
    2674:	89 85       	ldd	r24, Y+9	; 0x09
    2676:	9a 85       	ldd	r25, Y+10	; 0x0a
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e8       	ldi	r20, 0x80	; 128
    267e:	5f e3       	ldi	r21, 0x3F	; 63
    2680:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2684:	88 23       	and	r24, r24
    2686:	2c f4       	brge	.+10     	; 0x2692 <EntryMode+0x6c>
		__ticks = 1;
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	9e 83       	std	Y+6, r25	; 0x06
    268e:	8d 83       	std	Y+5, r24	; 0x05
    2690:	3f c0       	rjmp	.+126    	; 0x2710 <EntryMode+0xea>
	else if (__tmp > 65535)
    2692:	6f 81       	ldd	r22, Y+7	; 0x07
    2694:	78 85       	ldd	r23, Y+8	; 0x08
    2696:	89 85       	ldd	r24, Y+9	; 0x09
    2698:	9a 85       	ldd	r25, Y+10	; 0x0a
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	3f ef       	ldi	r19, 0xFF	; 255
    269e:	4f e7       	ldi	r20, 0x7F	; 127
    26a0:	57 e4       	ldi	r21, 0x47	; 71
    26a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26a6:	18 16       	cp	r1, r24
    26a8:	4c f5       	brge	.+82     	; 0x26fc <EntryMode+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	40 e2       	ldi	r20, 0x20	; 32
    26b8:	51 e4       	ldi	r21, 0x41	; 65
    26ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	bc 01       	movw	r22, r24
    26c4:	cd 01       	movw	r24, r26
    26c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	9e 83       	std	Y+6, r25	; 0x06
    26d0:	8d 83       	std	Y+5, r24	; 0x05
    26d2:	0f c0       	rjmp	.+30     	; 0x26f2 <EntryMode+0xcc>
    26d4:	88 ec       	ldi	r24, 0xC8	; 200
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	9c 83       	std	Y+4, r25	; 0x04
    26da:	8b 83       	std	Y+3, r24	; 0x03
    26dc:	8b 81       	ldd	r24, Y+3	; 0x03
    26de:	9c 81       	ldd	r25, Y+4	; 0x04
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <EntryMode+0xba>
    26e4:	9c 83       	std	Y+4, r25	; 0x04
    26e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ea:	9e 81       	ldd	r25, Y+6	; 0x06
    26ec:	01 97       	sbiw	r24, 0x01	; 1
    26ee:	9e 83       	std	Y+6, r25	; 0x06
    26f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f2:	8d 81       	ldd	r24, Y+5	; 0x05
    26f4:	9e 81       	ldd	r25, Y+6	; 0x06
    26f6:	00 97       	sbiw	r24, 0x00	; 0
    26f8:	69 f7       	brne	.-38     	; 0x26d4 <EntryMode+0xae>
    26fa:	14 c0       	rjmp	.+40     	; 0x2724 <EntryMode+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26fc:	6f 81       	ldd	r22, Y+7	; 0x07
    26fe:	78 85       	ldd	r23, Y+8	; 0x08
    2700:	89 85       	ldd	r24, Y+9	; 0x09
    2702:	9a 85       	ldd	r25, Y+10	; 0x0a
    2704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	9e 83       	std	Y+6, r25	; 0x06
    270e:	8d 83       	std	Y+5, r24	; 0x05
    2710:	8d 81       	ldd	r24, Y+5	; 0x05
    2712:	9e 81       	ldd	r25, Y+6	; 0x06
    2714:	9a 83       	std	Y+2, r25	; 0x02
    2716:	89 83       	std	Y+1, r24	; 0x01
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	9a 81       	ldd	r25, Y+2	; 0x02
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	f1 f7       	brne	.-4      	; 0x271c <EntryMode+0xf6>
    2720:	9a 83       	std	Y+2, r25	; 0x02
    2722:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2724:	2e 96       	adiw	r28, 0x0e	; 14
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	f8 94       	cli
    272a:	de bf       	out	0x3e, r29	; 62
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	cd bf       	out	0x3d, r28	; 61
    2730:	cf 91       	pop	r28
    2732:	df 91       	pop	r29
    2734:	08 95       	ret

00002736 <LCD_DiplayON_CursorON>:
void LCD_DiplayON_CursorON()
{
    2736:	df 93       	push	r29
    2738:	cf 93       	push	r28
    273a:	cd b7       	in	r28, 0x3d	; 61
    273c:	de b7       	in	r29, 0x3e	; 62
    273e:	2e 97       	sbiw	r28, 0x0e	; 14
    2740:	0f b6       	in	r0, 0x3f	; 63
    2742:	f8 94       	cli
    2744:	de bf       	out	0x3e, r29	; 62
    2746:	0f be       	out	0x3f, r0	; 63
    2748:	cd bf       	out	0x3d, r28	; 61
	LCD_Send_Cmd(DISPLAYON_CURSORON);
    274a:	8e e0       	ldi	r24, 0x0E	; 14
    274c:	0e 94 e7 11 	call	0x23ce	; 0x23ce <LCD_Send_Cmd>
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	a0 e8       	ldi	r26, 0x80	; 128
    2756:	bf e3       	ldi	r27, 0x3F	; 63
    2758:	8b 87       	std	Y+11, r24	; 0x0b
    275a:	9c 87       	std	Y+12, r25	; 0x0c
    275c:	ad 87       	std	Y+13, r26	; 0x0d
    275e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2760:	6b 85       	ldd	r22, Y+11	; 0x0b
    2762:	7c 85       	ldd	r23, Y+12	; 0x0c
    2764:	8d 85       	ldd	r24, Y+13	; 0x0d
    2766:	9e 85       	ldd	r25, Y+14	; 0x0e
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	4a ef       	ldi	r20, 0xFA	; 250
    276e:	54 e4       	ldi	r21, 0x44	; 68
    2770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	8f 83       	std	Y+7, r24	; 0x07
    277a:	98 87       	std	Y+8, r25	; 0x08
    277c:	a9 87       	std	Y+9, r26	; 0x09
    277e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2780:	6f 81       	ldd	r22, Y+7	; 0x07
    2782:	78 85       	ldd	r23, Y+8	; 0x08
    2784:	89 85       	ldd	r24, Y+9	; 0x09
    2786:	9a 85       	ldd	r25, Y+10	; 0x0a
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	40 e8       	ldi	r20, 0x80	; 128
    278e:	5f e3       	ldi	r21, 0x3F	; 63
    2790:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2794:	88 23       	and	r24, r24
    2796:	2c f4       	brge	.+10     	; 0x27a2 <LCD_DiplayON_CursorON+0x6c>
		__ticks = 1;
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	9e 83       	std	Y+6, r25	; 0x06
    279e:	8d 83       	std	Y+5, r24	; 0x05
    27a0:	3f c0       	rjmp	.+126    	; 0x2820 <LCD_DiplayON_CursorON+0xea>
	else if (__tmp > 65535)
    27a2:	6f 81       	ldd	r22, Y+7	; 0x07
    27a4:	78 85       	ldd	r23, Y+8	; 0x08
    27a6:	89 85       	ldd	r24, Y+9	; 0x09
    27a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	3f ef       	ldi	r19, 0xFF	; 255
    27ae:	4f e7       	ldi	r20, 0x7F	; 127
    27b0:	57 e4       	ldi	r21, 0x47	; 71
    27b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27b6:	18 16       	cp	r1, r24
    27b8:	4c f5       	brge	.+82     	; 0x280c <LCD_DiplayON_CursorON+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    27bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    27be:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	40 e2       	ldi	r20, 0x20	; 32
    27c8:	51 e4       	ldi	r21, 0x41	; 65
    27ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	bc 01       	movw	r22, r24
    27d4:	cd 01       	movw	r24, r26
    27d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	9e 83       	std	Y+6, r25	; 0x06
    27e0:	8d 83       	std	Y+5, r24	; 0x05
    27e2:	0f c0       	rjmp	.+30     	; 0x2802 <LCD_DiplayON_CursorON+0xcc>
    27e4:	88 ec       	ldi	r24, 0xC8	; 200
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	9c 83       	std	Y+4, r25	; 0x04
    27ea:	8b 83       	std	Y+3, r24	; 0x03
    27ec:	8b 81       	ldd	r24, Y+3	; 0x03
    27ee:	9c 81       	ldd	r25, Y+4	; 0x04
    27f0:	01 97       	sbiw	r24, 0x01	; 1
    27f2:	f1 f7       	brne	.-4      	; 0x27f0 <LCD_DiplayON_CursorON+0xba>
    27f4:	9c 83       	std	Y+4, r25	; 0x04
    27f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f8:	8d 81       	ldd	r24, Y+5	; 0x05
    27fa:	9e 81       	ldd	r25, Y+6	; 0x06
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	9e 83       	std	Y+6, r25	; 0x06
    2800:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2802:	8d 81       	ldd	r24, Y+5	; 0x05
    2804:	9e 81       	ldd	r25, Y+6	; 0x06
    2806:	00 97       	sbiw	r24, 0x00	; 0
    2808:	69 f7       	brne	.-38     	; 0x27e4 <LCD_DiplayON_CursorON+0xae>
    280a:	14 c0       	rjmp	.+40     	; 0x2834 <LCD_DiplayON_CursorON+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    280c:	6f 81       	ldd	r22, Y+7	; 0x07
    280e:	78 85       	ldd	r23, Y+8	; 0x08
    2810:	89 85       	ldd	r24, Y+9	; 0x09
    2812:	9a 85       	ldd	r25, Y+10	; 0x0a
    2814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	9e 83       	std	Y+6, r25	; 0x06
    281e:	8d 83       	std	Y+5, r24	; 0x05
    2820:	8d 81       	ldd	r24, Y+5	; 0x05
    2822:	9e 81       	ldd	r25, Y+6	; 0x06
    2824:	9a 83       	std	Y+2, r25	; 0x02
    2826:	89 83       	std	Y+1, r24	; 0x01
    2828:	89 81       	ldd	r24, Y+1	; 0x01
    282a:	9a 81       	ldd	r25, Y+2	; 0x02
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	f1 f7       	brne	.-4      	; 0x282c <LCD_DiplayON_CursorON+0xf6>
    2830:	9a 83       	std	Y+2, r25	; 0x02
    2832:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2834:	2e 96       	adiw	r28, 0x0e	; 14
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	f8 94       	cli
    283a:	de bf       	out	0x3e, r29	; 62
    283c:	0f be       	out	0x3f, r0	; 63
    283e:	cd bf       	out	0x3d, r28	; 61
    2840:	cf 91       	pop	r28
    2842:	df 91       	pop	r29
    2844:	08 95       	ret

00002846 <LCD_DiplayON_CursorOff>:
void LCD_DiplayON_CursorOff()
{
    2846:	df 93       	push	r29
    2848:	cf 93       	push	r28
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
    284e:	2e 97       	sbiw	r28, 0x0e	; 14
    2850:	0f b6       	in	r0, 0x3f	; 63
    2852:	f8 94       	cli
    2854:	de bf       	out	0x3e, r29	; 62
    2856:	0f be       	out	0x3f, r0	; 63
    2858:	cd bf       	out	0x3d, r28	; 61
	LCD_Send_Cmd(DISPLAYON_CURSOROFF);
    285a:	8c e0       	ldi	r24, 0x0C	; 12
    285c:	0e 94 e7 11 	call	0x23ce	; 0x23ce <LCD_Send_Cmd>
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	a0 e8       	ldi	r26, 0x80	; 128
    2866:	bf e3       	ldi	r27, 0x3F	; 63
    2868:	8b 87       	std	Y+11, r24	; 0x0b
    286a:	9c 87       	std	Y+12, r25	; 0x0c
    286c:	ad 87       	std	Y+13, r26	; 0x0d
    286e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2870:	6b 85       	ldd	r22, Y+11	; 0x0b
    2872:	7c 85       	ldd	r23, Y+12	; 0x0c
    2874:	8d 85       	ldd	r24, Y+13	; 0x0d
    2876:	9e 85       	ldd	r25, Y+14	; 0x0e
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	4a ef       	ldi	r20, 0xFA	; 250
    287e:	54 e4       	ldi	r21, 0x44	; 68
    2880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	8f 83       	std	Y+7, r24	; 0x07
    288a:	98 87       	std	Y+8, r25	; 0x08
    288c:	a9 87       	std	Y+9, r26	; 0x09
    288e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2890:	6f 81       	ldd	r22, Y+7	; 0x07
    2892:	78 85       	ldd	r23, Y+8	; 0x08
    2894:	89 85       	ldd	r24, Y+9	; 0x09
    2896:	9a 85       	ldd	r25, Y+10	; 0x0a
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	40 e8       	ldi	r20, 0x80	; 128
    289e:	5f e3       	ldi	r21, 0x3F	; 63
    28a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28a4:	88 23       	and	r24, r24
    28a6:	2c f4       	brge	.+10     	; 0x28b2 <LCD_DiplayON_CursorOff+0x6c>
		__ticks = 1;
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	9e 83       	std	Y+6, r25	; 0x06
    28ae:	8d 83       	std	Y+5, r24	; 0x05
    28b0:	3f c0       	rjmp	.+126    	; 0x2930 <LCD_DiplayON_CursorOff+0xea>
	else if (__tmp > 65535)
    28b2:	6f 81       	ldd	r22, Y+7	; 0x07
    28b4:	78 85       	ldd	r23, Y+8	; 0x08
    28b6:	89 85       	ldd	r24, Y+9	; 0x09
    28b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	3f ef       	ldi	r19, 0xFF	; 255
    28be:	4f e7       	ldi	r20, 0x7F	; 127
    28c0:	57 e4       	ldi	r21, 0x47	; 71
    28c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28c6:	18 16       	cp	r1, r24
    28c8:	4c f5       	brge	.+82     	; 0x291c <LCD_DiplayON_CursorOff+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    28cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    28d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	40 e2       	ldi	r20, 0x20	; 32
    28d8:	51 e4       	ldi	r21, 0x41	; 65
    28da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	bc 01       	movw	r22, r24
    28e4:	cd 01       	movw	r24, r26
    28e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	9e 83       	std	Y+6, r25	; 0x06
    28f0:	8d 83       	std	Y+5, r24	; 0x05
    28f2:	0f c0       	rjmp	.+30     	; 0x2912 <LCD_DiplayON_CursorOff+0xcc>
    28f4:	88 ec       	ldi	r24, 0xC8	; 200
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	9c 83       	std	Y+4, r25	; 0x04
    28fa:	8b 83       	std	Y+3, r24	; 0x03
    28fc:	8b 81       	ldd	r24, Y+3	; 0x03
    28fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2900:	01 97       	sbiw	r24, 0x01	; 1
    2902:	f1 f7       	brne	.-4      	; 0x2900 <LCD_DiplayON_CursorOff+0xba>
    2904:	9c 83       	std	Y+4, r25	; 0x04
    2906:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2908:	8d 81       	ldd	r24, Y+5	; 0x05
    290a:	9e 81       	ldd	r25, Y+6	; 0x06
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	9e 83       	std	Y+6, r25	; 0x06
    2910:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2912:	8d 81       	ldd	r24, Y+5	; 0x05
    2914:	9e 81       	ldd	r25, Y+6	; 0x06
    2916:	00 97       	sbiw	r24, 0x00	; 0
    2918:	69 f7       	brne	.-38     	; 0x28f4 <LCD_DiplayON_CursorOff+0xae>
    291a:	14 c0       	rjmp	.+40     	; 0x2944 <LCD_DiplayON_CursorOff+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    291c:	6f 81       	ldd	r22, Y+7	; 0x07
    291e:	78 85       	ldd	r23, Y+8	; 0x08
    2920:	89 85       	ldd	r24, Y+9	; 0x09
    2922:	9a 85       	ldd	r25, Y+10	; 0x0a
    2924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	9e 83       	std	Y+6, r25	; 0x06
    292e:	8d 83       	std	Y+5, r24	; 0x05
    2930:	8d 81       	ldd	r24, Y+5	; 0x05
    2932:	9e 81       	ldd	r25, Y+6	; 0x06
    2934:	9a 83       	std	Y+2, r25	; 0x02
    2936:	89 83       	std	Y+1, r24	; 0x01
    2938:	89 81       	ldd	r24, Y+1	; 0x01
    293a:	9a 81       	ldd	r25, Y+2	; 0x02
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	f1 f7       	brne	.-4      	; 0x293c <LCD_DiplayON_CursorOff+0xf6>
    2940:	9a 83       	std	Y+2, r25	; 0x02
    2942:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2944:	2e 96       	adiw	r28, 0x0e	; 14
    2946:	0f b6       	in	r0, 0x3f	; 63
    2948:	f8 94       	cli
    294a:	de bf       	out	0x3e, r29	; 62
    294c:	0f be       	out	0x3f, r0	; 63
    294e:	cd bf       	out	0x3d, r28	; 61
    2950:	cf 91       	pop	r28
    2952:	df 91       	pop	r29
    2954:	08 95       	ret

00002956 <LCD_DiplayON_CursorBlink>:
void LCD_DiplayON_CursorBlink()
{
    2956:	df 93       	push	r29
    2958:	cf 93       	push	r28
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
    295e:	2e 97       	sbiw	r28, 0x0e	; 14
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	f8 94       	cli
    2964:	de bf       	out	0x3e, r29	; 62
    2966:	0f be       	out	0x3f, r0	; 63
    2968:	cd bf       	out	0x3d, r28	; 61
	LCD_Send_Cmd(DISPLAYON_CURSORBLINK);
    296a:	8f e0       	ldi	r24, 0x0F	; 15
    296c:	0e 94 e7 11 	call	0x23ce	; 0x23ce <LCD_Send_Cmd>
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	a0 e8       	ldi	r26, 0x80	; 128
    2976:	bf e3       	ldi	r27, 0x3F	; 63
    2978:	8b 87       	std	Y+11, r24	; 0x0b
    297a:	9c 87       	std	Y+12, r25	; 0x0c
    297c:	ad 87       	std	Y+13, r26	; 0x0d
    297e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2980:	6b 85       	ldd	r22, Y+11	; 0x0b
    2982:	7c 85       	ldd	r23, Y+12	; 0x0c
    2984:	8d 85       	ldd	r24, Y+13	; 0x0d
    2986:	9e 85       	ldd	r25, Y+14	; 0x0e
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	4a ef       	ldi	r20, 0xFA	; 250
    298e:	54 e4       	ldi	r21, 0x44	; 68
    2990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	8f 83       	std	Y+7, r24	; 0x07
    299a:	98 87       	std	Y+8, r25	; 0x08
    299c:	a9 87       	std	Y+9, r26	; 0x09
    299e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29a0:	6f 81       	ldd	r22, Y+7	; 0x07
    29a2:	78 85       	ldd	r23, Y+8	; 0x08
    29a4:	89 85       	ldd	r24, Y+9	; 0x09
    29a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	40 e8       	ldi	r20, 0x80	; 128
    29ae:	5f e3       	ldi	r21, 0x3F	; 63
    29b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29b4:	88 23       	and	r24, r24
    29b6:	2c f4       	brge	.+10     	; 0x29c2 <LCD_DiplayON_CursorBlink+0x6c>
		__ticks = 1;
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	9e 83       	std	Y+6, r25	; 0x06
    29be:	8d 83       	std	Y+5, r24	; 0x05
    29c0:	3f c0       	rjmp	.+126    	; 0x2a40 <LCD_DiplayON_CursorBlink+0xea>
	else if (__tmp > 65535)
    29c2:	6f 81       	ldd	r22, Y+7	; 0x07
    29c4:	78 85       	ldd	r23, Y+8	; 0x08
    29c6:	89 85       	ldd	r24, Y+9	; 0x09
    29c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	3f ef       	ldi	r19, 0xFF	; 255
    29ce:	4f e7       	ldi	r20, 0x7F	; 127
    29d0:	57 e4       	ldi	r21, 0x47	; 71
    29d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29d6:	18 16       	cp	r1, r24
    29d8:	4c f5       	brge	.+82     	; 0x2a2c <LCD_DiplayON_CursorBlink+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29da:	6b 85       	ldd	r22, Y+11	; 0x0b
    29dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    29de:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e2       	ldi	r20, 0x20	; 32
    29e8:	51 e4       	ldi	r21, 0x41	; 65
    29ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	bc 01       	movw	r22, r24
    29f4:	cd 01       	movw	r24, r26
    29f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	9e 83       	std	Y+6, r25	; 0x06
    2a00:	8d 83       	std	Y+5, r24	; 0x05
    2a02:	0f c0       	rjmp	.+30     	; 0x2a22 <LCD_DiplayON_CursorBlink+0xcc>
    2a04:	88 ec       	ldi	r24, 0xC8	; 200
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	9c 83       	std	Y+4, r25	; 0x04
    2a0a:	8b 83       	std	Y+3, r24	; 0x03
    2a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	f1 f7       	brne	.-4      	; 0x2a10 <LCD_DiplayON_CursorBlink+0xba>
    2a14:	9c 83       	std	Y+4, r25	; 0x04
    2a16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a18:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1c:	01 97       	sbiw	r24, 0x01	; 1
    2a1e:	9e 83       	std	Y+6, r25	; 0x06
    2a20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a22:	8d 81       	ldd	r24, Y+5	; 0x05
    2a24:	9e 81       	ldd	r25, Y+6	; 0x06
    2a26:	00 97       	sbiw	r24, 0x00	; 0
    2a28:	69 f7       	brne	.-38     	; 0x2a04 <LCD_DiplayON_CursorBlink+0xae>
    2a2a:	14 c0       	rjmp	.+40     	; 0x2a54 <LCD_DiplayON_CursorBlink+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a2e:	78 85       	ldd	r23, Y+8	; 0x08
    2a30:	89 85       	ldd	r24, Y+9	; 0x09
    2a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	9e 83       	std	Y+6, r25	; 0x06
    2a3e:	8d 83       	std	Y+5, r24	; 0x05
    2a40:	8d 81       	ldd	r24, Y+5	; 0x05
    2a42:	9e 81       	ldd	r25, Y+6	; 0x06
    2a44:	9a 83       	std	Y+2, r25	; 0x02
    2a46:	89 83       	std	Y+1, r24	; 0x01
    2a48:	89 81       	ldd	r24, Y+1	; 0x01
    2a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	f1 f7       	brne	.-4      	; 0x2a4c <LCD_DiplayON_CursorBlink+0xf6>
    2a50:	9a 83       	std	Y+2, r25	; 0x02
    2a52:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2a54:	2e 96       	adiw	r28, 0x0e	; 14
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	f8 94       	cli
    2a5a:	de bf       	out	0x3e, r29	; 62
    2a5c:	0f be       	out	0x3f, r0	; 63
    2a5e:	cd bf       	out	0x3d, r28	; 61
    2a60:	cf 91       	pop	r28
    2a62:	df 91       	pop	r29
    2a64:	08 95       	ret

00002a66 <LCD_CursorToLeft>:
void LCD_CursorToLeft()
{
    2a66:	df 93       	push	r29
    2a68:	cf 93       	push	r28
    2a6a:	cd b7       	in	r28, 0x3d	; 61
    2a6c:	de b7       	in	r29, 0x3e	; 62
	LCD_Send_Cmd(CURSOR_TO_LEFT);
    2a6e:	84 e1       	ldi	r24, 0x14	; 20
    2a70:	0e 94 e7 11 	call	0x23ce	; 0x23ce <LCD_Send_Cmd>
}
    2a74:	cf 91       	pop	r28
    2a76:	df 91       	pop	r29
    2a78:	08 95       	ret

00002a7a <LCD_CursorToRight>:
void LCD_CursorToRight()
{
    2a7a:	df 93       	push	r29
    2a7c:	cf 93       	push	r28
    2a7e:	cd b7       	in	r28, 0x3d	; 61
    2a80:	de b7       	in	r29, 0x3e	; 62
	LCD_Send_Cmd(CURSOR_TO_RIGHT);
    2a82:	80 e1       	ldi	r24, 0x10	; 16
    2a84:	0e 94 e7 11 	call	0x23ce	; 0x23ce <LCD_Send_Cmd>
}
    2a88:	cf 91       	pop	r28
    2a8a:	df 91       	pop	r29
    2a8c:	08 95       	ret

00002a8e <LCD_Writing_To_Left>:
void LCD_Writing_To_Left()
{
    2a8e:	df 93       	push	r29
    2a90:	cf 93       	push	r28
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
    2a96:	2e 97       	sbiw	r28, 0x0e	; 14
    2a98:	0f b6       	in	r0, 0x3f	; 63
    2a9a:	f8 94       	cli
    2a9c:	de bf       	out	0x3e, r29	; 62
    2a9e:	0f be       	out	0x3f, r0	; 63
    2aa0:	cd bf       	out	0x3d, r28	; 61
	LCD_Send_Cmd(WRITING_TO_LEFT);
    2aa2:	84 e0       	ldi	r24, 0x04	; 4
    2aa4:	0e 94 e7 11 	call	0x23ce	; 0x23ce <LCD_Send_Cmd>
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	a0 e8       	ldi	r26, 0x80	; 128
    2aae:	bf e3       	ldi	r27, 0x3F	; 63
    2ab0:	8b 87       	std	Y+11, r24	; 0x0b
    2ab2:	9c 87       	std	Y+12, r25	; 0x0c
    2ab4:	ad 87       	std	Y+13, r26	; 0x0d
    2ab6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aba:	7c 85       	ldd	r23, Y+12	; 0x0c
    2abc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2abe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	4a ef       	ldi	r20, 0xFA	; 250
    2ac6:	54 e4       	ldi	r21, 0x44	; 68
    2ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	8f 83       	std	Y+7, r24	; 0x07
    2ad2:	98 87       	std	Y+8, r25	; 0x08
    2ad4:	a9 87       	std	Y+9, r26	; 0x09
    2ad6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ad8:	6f 81       	ldd	r22, Y+7	; 0x07
    2ada:	78 85       	ldd	r23, Y+8	; 0x08
    2adc:	89 85       	ldd	r24, Y+9	; 0x09
    2ade:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e8       	ldi	r20, 0x80	; 128
    2ae6:	5f e3       	ldi	r21, 0x3F	; 63
    2ae8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aec:	88 23       	and	r24, r24
    2aee:	2c f4       	brge	.+10     	; 0x2afa <LCD_Writing_To_Left+0x6c>
		__ticks = 1;
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	9e 83       	std	Y+6, r25	; 0x06
    2af6:	8d 83       	std	Y+5, r24	; 0x05
    2af8:	3f c0       	rjmp	.+126    	; 0x2b78 <LCD_Writing_To_Left+0xea>
	else if (__tmp > 65535)
    2afa:	6f 81       	ldd	r22, Y+7	; 0x07
    2afc:	78 85       	ldd	r23, Y+8	; 0x08
    2afe:	89 85       	ldd	r24, Y+9	; 0x09
    2b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	3f ef       	ldi	r19, 0xFF	; 255
    2b06:	4f e7       	ldi	r20, 0x7F	; 127
    2b08:	57 e4       	ldi	r21, 0x47	; 71
    2b0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b0e:	18 16       	cp	r1, r24
    2b10:	4c f5       	brge	.+82     	; 0x2b64 <LCD_Writing_To_Left+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	40 e2       	ldi	r20, 0x20	; 32
    2b20:	51 e4       	ldi	r21, 0x41	; 65
    2b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	bc 01       	movw	r22, r24
    2b2c:	cd 01       	movw	r24, r26
    2b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	9e 83       	std	Y+6, r25	; 0x06
    2b38:	8d 83       	std	Y+5, r24	; 0x05
    2b3a:	0f c0       	rjmp	.+30     	; 0x2b5a <LCD_Writing_To_Left+0xcc>
    2b3c:	88 ec       	ldi	r24, 0xC8	; 200
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	9c 83       	std	Y+4, r25	; 0x04
    2b42:	8b 83       	std	Y+3, r24	; 0x03
    2b44:	8b 81       	ldd	r24, Y+3	; 0x03
    2b46:	9c 81       	ldd	r25, Y+4	; 0x04
    2b48:	01 97       	sbiw	r24, 0x01	; 1
    2b4a:	f1 f7       	brne	.-4      	; 0x2b48 <LCD_Writing_To_Left+0xba>
    2b4c:	9c 83       	std	Y+4, r25	; 0x04
    2b4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b50:	8d 81       	ldd	r24, Y+5	; 0x05
    2b52:	9e 81       	ldd	r25, Y+6	; 0x06
    2b54:	01 97       	sbiw	r24, 0x01	; 1
    2b56:	9e 83       	std	Y+6, r25	; 0x06
    2b58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b5e:	00 97       	sbiw	r24, 0x00	; 0
    2b60:	69 f7       	brne	.-38     	; 0x2b3c <LCD_Writing_To_Left+0xae>
    2b62:	14 c0       	rjmp	.+40     	; 0x2b8c <LCD_Writing_To_Left+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b64:	6f 81       	ldd	r22, Y+7	; 0x07
    2b66:	78 85       	ldd	r23, Y+8	; 0x08
    2b68:	89 85       	ldd	r24, Y+9	; 0x09
    2b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	9e 83       	std	Y+6, r25	; 0x06
    2b76:	8d 83       	std	Y+5, r24	; 0x05
    2b78:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7c:	9a 83       	std	Y+2, r25	; 0x02
    2b7e:	89 83       	std	Y+1, r24	; 0x01
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	9a 81       	ldd	r25, Y+2	; 0x02
    2b84:	01 97       	sbiw	r24, 0x01	; 1
    2b86:	f1 f7       	brne	.-4      	; 0x2b84 <LCD_Writing_To_Left+0xf6>
    2b88:	9a 83       	std	Y+2, r25	; 0x02
    2b8a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2b8c:	2e 96       	adiw	r28, 0x0e	; 14
    2b8e:	0f b6       	in	r0, 0x3f	; 63
    2b90:	f8 94       	cli
    2b92:	de bf       	out	0x3e, r29	; 62
    2b94:	0f be       	out	0x3f, r0	; 63
    2b96:	cd bf       	out	0x3d, r28	; 61
    2b98:	cf 91       	pop	r28
    2b9a:	df 91       	pop	r29
    2b9c:	08 95       	ret

00002b9e <LCD_Shift_Display_Right>:
void LCD_Shift_Display_Right()
{
    2b9e:	df 93       	push	r29
    2ba0:	cf 93       	push	r28
    2ba2:	cd b7       	in	r28, 0x3d	; 61
    2ba4:	de b7       	in	r29, 0x3e	; 62
	LCD_Send_Cmd(SHIFT_DISPLAY_TO_RIGHT);
    2ba6:	8c e1       	ldi	r24, 0x1C	; 28
    2ba8:	0e 94 e7 11 	call	0x23ce	; 0x23ce <LCD_Send_Cmd>
}
    2bac:	cf 91       	pop	r28
    2bae:	df 91       	pop	r29
    2bb0:	08 95       	ret

00002bb2 <LCD_Shift_Display_Left>:
void LCD_Shift_Display_Left()
{
    2bb2:	df 93       	push	r29
    2bb4:	cf 93       	push	r28
    2bb6:	cd b7       	in	r28, 0x3d	; 61
    2bb8:	de b7       	in	r29, 0x3e	; 62
	LCD_Send_Cmd(SHIFT_DISPLAY_TO_LEFT);
    2bba:	88 e1       	ldi	r24, 0x18	; 24
    2bbc:	0e 94 e7 11 	call	0x23ce	; 0x23ce <LCD_Send_Cmd>
}
    2bc0:	cf 91       	pop	r28
    2bc2:	df 91       	pop	r29
    2bc4:	08 95       	ret

00002bc6 <LCD_Move_Cursor>:
void LCD_Move_Cursor(u8 ROW, u8 COLUMN){
    2bc6:	df 93       	push	r29
    2bc8:	cf 93       	push	r28
    2bca:	00 d0       	rcall	.+0      	; 0x2bcc <LCD_Move_Cursor+0x6>
    2bcc:	0f 92       	push	r0
    2bce:	cd b7       	in	r28, 0x3d	; 61
    2bd0:	de b7       	in	r29, 0x3e	; 62
    2bd2:	8a 83       	std	Y+2, r24	; 0x02
    2bd4:	6b 83       	std	Y+3, r22	; 0x03
	u8 COMMAND = 0x80;
    2bd6:	80 e8       	ldi	r24, 0x80	; 128
    2bd8:	89 83       	std	Y+1, r24	; 0x01
	if (ROW > LCD_ROWS || ROW < 1 || COLUMN > LCD_COLUMNS || COLUMN < 1)
    2bda:	8a 81       	ldd	r24, Y+2	; 0x02
    2bdc:	83 30       	cpi	r24, 0x03	; 3
    2bde:	48 f4       	brcc	.+18     	; 0x2bf2 <LCD_Move_Cursor+0x2c>
    2be0:	8a 81       	ldd	r24, Y+2	; 0x02
    2be2:	88 23       	and	r24, r24
    2be4:	31 f0       	breq	.+12     	; 0x2bf2 <LCD_Move_Cursor+0x2c>
    2be6:	8b 81       	ldd	r24, Y+3	; 0x03
    2be8:	81 31       	cpi	r24, 0x11	; 17
    2bea:	18 f4       	brcc	.+6      	; 0x2bf2 <LCD_Move_Cursor+0x2c>
    2bec:	8b 81       	ldd	r24, Y+3	; 0x03
    2bee:	88 23       	and	r24, r24
    2bf0:	21 f4       	brne	.+8      	; 0x2bfa <LCD_Move_Cursor+0x34>
	{
		LCD_Send_Cmd(COMMAND);
    2bf2:	89 81       	ldd	r24, Y+1	; 0x01
    2bf4:	0e 94 e7 11 	call	0x23ce	; 0x23ce <LCD_Send_Cmd>
    2bf8:	13 c0       	rjmp	.+38     	; 0x2c20 <LCD_Move_Cursor+0x5a>
	}
	else if (ROW == 1)
    2bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfc:	81 30       	cpi	r24, 0x01	; 1
    2bfe:	39 f4       	brne	.+14     	; 0x2c0e <LCD_Move_Cursor+0x48>
	{
		COMMAND = 0x80 + (COLUMN - 1);
    2c00:	8b 81       	ldd	r24, Y+3	; 0x03
    2c02:	81 58       	subi	r24, 0x81	; 129
    2c04:	89 83       	std	Y+1, r24	; 0x01
		LCD_Send_Cmd(COMMAND);
    2c06:	89 81       	ldd	r24, Y+1	; 0x01
    2c08:	0e 94 e7 11 	call	0x23ce	; 0x23ce <LCD_Send_Cmd>
    2c0c:	09 c0       	rjmp	.+18     	; 0x2c20 <LCD_Move_Cursor+0x5a>
	}
	else if (ROW == 2)
    2c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c10:	82 30       	cpi	r24, 0x02	; 2
    2c12:	31 f4       	brne	.+12     	; 0x2c20 <LCD_Move_Cursor+0x5a>
	{
		COMMAND = 0xC0 + (COLUMN - 1);
    2c14:	8b 81       	ldd	r24, Y+3	; 0x03
    2c16:	81 54       	subi	r24, 0x41	; 65
    2c18:	89 83       	std	Y+1, r24	; 0x01
		LCD_Send_Cmd(COMMAND);
    2c1a:	89 81       	ldd	r24, Y+1	; 0x01
    2c1c:	0e 94 e7 11 	call	0x23ce	; 0x23ce <LCD_Send_Cmd>
	/*
	 * else if tany lw el rows zado
	 * bt3dl el command w el equation lw el rows zado aw el columns mn el datasheet
	 */

}
    2c20:	0f 90       	pop	r0
    2c22:	0f 90       	pop	r0
    2c24:	0f 90       	pop	r0
    2c26:	cf 91       	pop	r28
    2c28:	df 91       	pop	r29
    2c2a:	08 95       	ret

00002c2c <LCD_vSendChar>:
// Send character to LCD To display it
void LCD_vSendChar(u8 DATA)
{
    2c2c:	df 93       	push	r29
    2c2e:	cf 93       	push	r28
    2c30:	0f 92       	push	r0
    2c32:	cd b7       	in	r28, 0x3d	; 61
    2c34:	de b7       	in	r29, 0x3e	; 62
    2c36:	89 83       	std	Y+1, r24	; 0x01
	Data_Register_Select();
    2c38:	0e 94 c0 11 	call	0x2380	; 0x2380 <Data_Register_Select>
#if defined EIGH_BIT_MODE
	DIO_WritePort(DATA_PORT,DATA);
	enable();
#elif defined FOUR_BIT_MODE
#if defined HIGH_NIBBLE
	DIO_Write_High_Nibble(DATA_PORT,DATA>>FOUR);
    2c3c:	89 81       	ldd	r24, Y+1	; 0x01
    2c3e:	98 2f       	mov	r25, r24
    2c40:	92 95       	swap	r25
    2c42:	9f 70       	andi	r25, 0x0F	; 15
    2c44:	83 e4       	ldi	r24, 0x43	; 67
    2c46:	69 2f       	mov	r22, r25
    2c48:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <DIO_Write_High_Nibble>
	enable();
    2c4c:	0e 94 bf 10 	call	0x217e	; 0x217e <enable>
	DIO_Write_High_Nibble(DATA_PORT,DATA);
    2c50:	83 e4       	ldi	r24, 0x43	; 67
    2c52:	69 81       	ldd	r22, Y+1	; 0x01
    2c54:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <DIO_Write_High_Nibble>
	enable();
    2c58:	0e 94 bf 10 	call	0x217e	; 0x217e <enable>
	enable();
	DIO_Write_Low_Nibble(DATA_PORT,DATA);
	enable();
#endif // for Nibble
#endif // for Mode
}
    2c5c:	0f 90       	pop	r0
    2c5e:	cf 91       	pop	r28
    2c60:	df 91       	pop	r29
    2c62:	08 95       	ret

00002c64 <LCD_vSendString>:
// Send String To Print It
void LCD_vSendString(u8 *DATA)
{
    2c64:	df 93       	push	r29
    2c66:	cf 93       	push	r28
    2c68:	00 d0       	rcall	.+0      	; 0x2c6a <LCD_vSendString+0x6>
    2c6a:	cd b7       	in	r28, 0x3d	; 61
    2c6c:	de b7       	in	r29, 0x3e	; 62
    2c6e:	9a 83       	std	Y+2, r25	; 0x02
    2c70:	89 83       	std	Y+1, r24	; 0x01
    2c72:	0a c0       	rjmp	.+20     	; 0x2c88 <LCD_vSendString+0x24>
	while ((*DATA) != 0)
	{
		LCD_vSendChar(*DATA);
    2c74:	e9 81       	ldd	r30, Y+1	; 0x01
    2c76:	fa 81       	ldd	r31, Y+2	; 0x02
    2c78:	80 81       	ld	r24, Z
    2c7a:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <LCD_vSendChar>
		DATA++;
    2c7e:	89 81       	ldd	r24, Y+1	; 0x01
    2c80:	9a 81       	ldd	r25, Y+2	; 0x02
    2c82:	01 96       	adiw	r24, 0x01	; 1
    2c84:	9a 83       	std	Y+2, r25	; 0x02
    2c86:	89 83       	std	Y+1, r24	; 0x01
#endif // for Mode
}
// Send String To Print It
void LCD_vSendString(u8 *DATA)
{
	while ((*DATA) != 0)
    2c88:	e9 81       	ldd	r30, Y+1	; 0x01
    2c8a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c8c:	80 81       	ld	r24, Z
    2c8e:	88 23       	and	r24, r24
    2c90:	89 f7       	brne	.-30     	; 0x2c74 <LCD_vSendString+0x10>
	{
		LCD_vSendChar(*DATA);
		DATA++;
	}
}
    2c92:	0f 90       	pop	r0
    2c94:	0f 90       	pop	r0
    2c96:	cf 91       	pop	r28
    2c98:	df 91       	pop	r29
    2c9a:	08 95       	ret

00002c9c <LCD_vInit>:
//Initializing LCD
void LCD_vInit()
{
    2c9c:	df 93       	push	r29
    2c9e:	cf 93       	push	r28
    2ca0:	cd b7       	in	r28, 0x3d	; 61
    2ca2:	de b7       	in	r29, 0x3e	; 62
    2ca4:	aa 97       	sbiw	r28, 0x2a	; 42
    2ca6:	0f b6       	in	r0, 0x3f	; 63
    2ca8:	f8 94       	cli
    2caa:	de bf       	out	0x3e, r29	; 62
    2cac:	0f be       	out	0x3f, r0	; 63
    2cae:	cd bf       	out	0x3d, r28	; 61
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	a8 e4       	ldi	r26, 0x48	; 72
    2cb6:	b3 e4       	ldi	r27, 0x43	; 67
    2cb8:	8f a3       	std	Y+39, r24	; 0x27
    2cba:	98 a7       	std	Y+40, r25	; 0x28
    2cbc:	a9 a7       	std	Y+41, r26	; 0x29
    2cbe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cc0:	6f a1       	ldd	r22, Y+39	; 0x27
    2cc2:	78 a5       	ldd	r23, Y+40	; 0x28
    2cc4:	89 a5       	ldd	r24, Y+41	; 0x29
    2cc6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cc8:	20 e0       	ldi	r18, 0x00	; 0
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	4a ef       	ldi	r20, 0xFA	; 250
    2cce:	54 e4       	ldi	r21, 0x44	; 68
    2cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	8b a3       	std	Y+35, r24	; 0x23
    2cda:	9c a3       	std	Y+36, r25	; 0x24
    2cdc:	ad a3       	std	Y+37, r26	; 0x25
    2cde:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ce0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ce2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ce4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ce6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ce8:	20 e0       	ldi	r18, 0x00	; 0
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	40 e8       	ldi	r20, 0x80	; 128
    2cee:	5f e3       	ldi	r21, 0x3F	; 63
    2cf0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cf4:	88 23       	and	r24, r24
    2cf6:	2c f4       	brge	.+10     	; 0x2d02 <LCD_vInit+0x66>
		__ticks = 1;
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	9a a3       	std	Y+34, r25	; 0x22
    2cfe:	89 a3       	std	Y+33, r24	; 0x21
    2d00:	3f c0       	rjmp	.+126    	; 0x2d80 <LCD_vInit+0xe4>
	else if (__tmp > 65535)
    2d02:	6b a1       	ldd	r22, Y+35	; 0x23
    2d04:	7c a1       	ldd	r23, Y+36	; 0x24
    2d06:	8d a1       	ldd	r24, Y+37	; 0x25
    2d08:	9e a1       	ldd	r25, Y+38	; 0x26
    2d0a:	20 e0       	ldi	r18, 0x00	; 0
    2d0c:	3f ef       	ldi	r19, 0xFF	; 255
    2d0e:	4f e7       	ldi	r20, 0x7F	; 127
    2d10:	57 e4       	ldi	r21, 0x47	; 71
    2d12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d16:	18 16       	cp	r1, r24
    2d18:	4c f5       	brge	.+82     	; 0x2d6c <LCD_vInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d1a:	6f a1       	ldd	r22, Y+39	; 0x27
    2d1c:	78 a5       	ldd	r23, Y+40	; 0x28
    2d1e:	89 a5       	ldd	r24, Y+41	; 0x29
    2d20:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	40 e2       	ldi	r20, 0x20	; 32
    2d28:	51 e4       	ldi	r21, 0x41	; 65
    2d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	bc 01       	movw	r22, r24
    2d34:	cd 01       	movw	r24, r26
    2d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	9a a3       	std	Y+34, r25	; 0x22
    2d40:	89 a3       	std	Y+33, r24	; 0x21
    2d42:	0f c0       	rjmp	.+30     	; 0x2d62 <LCD_vInit+0xc6>
    2d44:	88 ec       	ldi	r24, 0xC8	; 200
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	98 a3       	std	Y+32, r25	; 0x20
    2d4a:	8f 8f       	std	Y+31, r24	; 0x1f
    2d4c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d4e:	98 a1       	ldd	r25, Y+32	; 0x20
    2d50:	01 97       	sbiw	r24, 0x01	; 1
    2d52:	f1 f7       	brne	.-4      	; 0x2d50 <LCD_vInit+0xb4>
    2d54:	98 a3       	std	Y+32, r25	; 0x20
    2d56:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d58:	89 a1       	ldd	r24, Y+33	; 0x21
    2d5a:	9a a1       	ldd	r25, Y+34	; 0x22
    2d5c:	01 97       	sbiw	r24, 0x01	; 1
    2d5e:	9a a3       	std	Y+34, r25	; 0x22
    2d60:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d62:	89 a1       	ldd	r24, Y+33	; 0x21
    2d64:	9a a1       	ldd	r25, Y+34	; 0x22
    2d66:	00 97       	sbiw	r24, 0x00	; 0
    2d68:	69 f7       	brne	.-38     	; 0x2d44 <LCD_vInit+0xa8>
    2d6a:	14 c0       	rjmp	.+40     	; 0x2d94 <LCD_vInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d6c:	6b a1       	ldd	r22, Y+35	; 0x23
    2d6e:	7c a1       	ldd	r23, Y+36	; 0x24
    2d70:	8d a1       	ldd	r24, Y+37	; 0x25
    2d72:	9e a1       	ldd	r25, Y+38	; 0x26
    2d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	9a a3       	std	Y+34, r25	; 0x22
    2d7e:	89 a3       	std	Y+33, r24	; 0x21
    2d80:	89 a1       	ldd	r24, Y+33	; 0x21
    2d82:	9a a1       	ldd	r25, Y+34	; 0x22
    2d84:	9e 8f       	std	Y+30, r25	; 0x1e
    2d86:	8d 8f       	std	Y+29, r24	; 0x1d
    2d88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d8a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d8c:	01 97       	sbiw	r24, 0x01	; 1
    2d8e:	f1 f7       	brne	.-4      	; 0x2d8c <LCD_vInit+0xf0>
    2d90:	9e 8f       	std	Y+30, r25	; 0x1e
    2d92:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_DiplayON_CursorON();
	LCD_Clear_Screen();
	EntryMode();
#elif defined FOUR_BIT_MODE
#if defined HIGH_NIBBLE
	DIO_Set_High_Nibble_Direction(DATA_PORT,OUTPUT);
    2d94:	83 e4       	ldi	r24, 0x43	; 67
    2d96:	61 e0       	ldi	r22, 0x01	; 1
    2d98:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <DIO_Set_High_Nibble_Direction>
#elif defined LOW_NIBBLE
	DIO_Set_Low_Nibble_Direction(DATA_PORT,OUTPUT);
#endif // For Nibble
	DIO_Set_Pin_Direction(CONTROL_PORT,RS,OUTPUT);
    2d9c:	83 e4       	ldi	r24, 0x43	; 67
    2d9e:	61 e0       	ldi	r22, 0x01	; 1
    2da0:	41 e0       	ldi	r20, 0x01	; 1
    2da2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	//DIO_Set_Pin_Direction(CONTROL_PORT,RW,OUTPUT);
	DIO_Set_Pin_Direction(CONTROL_PORT,EN,OUTPUT);
    2da6:	83 e4       	ldi	r24, 0x43	; 67
    2da8:	60 e0       	ldi	r22, 0x00	; 0
    2daa:	41 e0       	ldi	r20, 0x01	; 1
    2dac:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	//LCD_Data_Direction(0);
	LCD_Send_Cmd(FOUR_BITS_1);
    2db0:	82 e0       	ldi	r24, 0x02	; 2
    2db2:	0e 94 e7 11 	call	0x23ce	; 0x23ce <LCD_Send_Cmd>
    2db6:	80 e0       	ldi	r24, 0x00	; 0
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	a0 e8       	ldi	r26, 0x80	; 128
    2dbc:	bf e3       	ldi	r27, 0x3F	; 63
    2dbe:	89 8f       	std	Y+25, r24	; 0x19
    2dc0:	9a 8f       	std	Y+26, r25	; 0x1a
    2dc2:	ab 8f       	std	Y+27, r26	; 0x1b
    2dc4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc6:	69 8d       	ldd	r22, Y+25	; 0x19
    2dc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	4a ef       	ldi	r20, 0xFA	; 250
    2dd4:	54 e4       	ldi	r21, 0x44	; 68
    2dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	cb 01       	movw	r24, r22
    2dde:	8d 8b       	std	Y+21, r24	; 0x15
    2de0:	9e 8b       	std	Y+22, r25	; 0x16
    2de2:	af 8b       	std	Y+23, r26	; 0x17
    2de4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2de6:	6d 89       	ldd	r22, Y+21	; 0x15
    2de8:	7e 89       	ldd	r23, Y+22	; 0x16
    2dea:	8f 89       	ldd	r24, Y+23	; 0x17
    2dec:	98 8d       	ldd	r25, Y+24	; 0x18
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	40 e8       	ldi	r20, 0x80	; 128
    2df4:	5f e3       	ldi	r21, 0x3F	; 63
    2df6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dfa:	88 23       	and	r24, r24
    2dfc:	2c f4       	brge	.+10     	; 0x2e08 <LCD_vInit+0x16c>
		__ticks = 1;
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	9c 8b       	std	Y+20, r25	; 0x14
    2e04:	8b 8b       	std	Y+19, r24	; 0x13
    2e06:	3f c0       	rjmp	.+126    	; 0x2e86 <LCD_vInit+0x1ea>
	else if (__tmp > 65535)
    2e08:	6d 89       	ldd	r22, Y+21	; 0x15
    2e0a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e0c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e0e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	3f ef       	ldi	r19, 0xFF	; 255
    2e14:	4f e7       	ldi	r20, 0x7F	; 127
    2e16:	57 e4       	ldi	r21, 0x47	; 71
    2e18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e1c:	18 16       	cp	r1, r24
    2e1e:	4c f5       	brge	.+82     	; 0x2e72 <LCD_vInit+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e20:	69 8d       	ldd	r22, Y+25	; 0x19
    2e22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	40 e2       	ldi	r20, 0x20	; 32
    2e2e:	51 e4       	ldi	r21, 0x41	; 65
    2e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	bc 01       	movw	r22, r24
    2e3a:	cd 01       	movw	r24, r26
    2e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	9c 8b       	std	Y+20, r25	; 0x14
    2e46:	8b 8b       	std	Y+19, r24	; 0x13
    2e48:	0f c0       	rjmp	.+30     	; 0x2e68 <LCD_vInit+0x1cc>
    2e4a:	88 ec       	ldi	r24, 0xC8	; 200
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	9a 8b       	std	Y+18, r25	; 0x12
    2e50:	89 8b       	std	Y+17, r24	; 0x11
    2e52:	89 89       	ldd	r24, Y+17	; 0x11
    2e54:	9a 89       	ldd	r25, Y+18	; 0x12
    2e56:	01 97       	sbiw	r24, 0x01	; 1
    2e58:	f1 f7       	brne	.-4      	; 0x2e56 <LCD_vInit+0x1ba>
    2e5a:	9a 8b       	std	Y+18, r25	; 0x12
    2e5c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e60:	9c 89       	ldd	r25, Y+20	; 0x14
    2e62:	01 97       	sbiw	r24, 0x01	; 1
    2e64:	9c 8b       	std	Y+20, r25	; 0x14
    2e66:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e68:	8b 89       	ldd	r24, Y+19	; 0x13
    2e6a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e6c:	00 97       	sbiw	r24, 0x00	; 0
    2e6e:	69 f7       	brne	.-38     	; 0x2e4a <LCD_vInit+0x1ae>
    2e70:	14 c0       	rjmp	.+40     	; 0x2e9a <LCD_vInit+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e72:	6d 89       	ldd	r22, Y+21	; 0x15
    2e74:	7e 89       	ldd	r23, Y+22	; 0x16
    2e76:	8f 89       	ldd	r24, Y+23	; 0x17
    2e78:	98 8d       	ldd	r25, Y+24	; 0x18
    2e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	9c 8b       	std	Y+20, r25	; 0x14
    2e84:	8b 8b       	std	Y+19, r24	; 0x13
    2e86:	8b 89       	ldd	r24, Y+19	; 0x13
    2e88:	9c 89       	ldd	r25, Y+20	; 0x14
    2e8a:	98 8b       	std	Y+16, r25	; 0x10
    2e8c:	8f 87       	std	Y+15, r24	; 0x0f
    2e8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e90:	98 89       	ldd	r25, Y+16	; 0x10
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	f1 f7       	brne	.-4      	; 0x2e92 <LCD_vInit+0x1f6>
    2e96:	98 8b       	std	Y+16, r25	; 0x10
    2e98:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_Send_Cmd(FOUR_BITS_2);
    2e9a:	88 e2       	ldi	r24, 0x28	; 40
    2e9c:	0e 94 e7 11 	call	0x23ce	; 0x23ce <LCD_Send_Cmd>
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	a0 e8       	ldi	r26, 0x80	; 128
    2ea6:	bf e3       	ldi	r27, 0x3F	; 63
    2ea8:	8b 87       	std	Y+11, r24	; 0x0b
    2eaa:	9c 87       	std	Y+12, r25	; 0x0c
    2eac:	ad 87       	std	Y+13, r26	; 0x0d
    2eae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	4a ef       	ldi	r20, 0xFA	; 250
    2ebe:	54 e4       	ldi	r21, 0x44	; 68
    2ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	8f 83       	std	Y+7, r24	; 0x07
    2eca:	98 87       	std	Y+8, r25	; 0x08
    2ecc:	a9 87       	std	Y+9, r26	; 0x09
    2ece:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ed0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed2:	78 85       	ldd	r23, Y+8	; 0x08
    2ed4:	89 85       	ldd	r24, Y+9	; 0x09
    2ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	40 e8       	ldi	r20, 0x80	; 128
    2ede:	5f e3       	ldi	r21, 0x3F	; 63
    2ee0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ee4:	88 23       	and	r24, r24
    2ee6:	2c f4       	brge	.+10     	; 0x2ef2 <LCD_vInit+0x256>
		__ticks = 1;
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	9e 83       	std	Y+6, r25	; 0x06
    2eee:	8d 83       	std	Y+5, r24	; 0x05
    2ef0:	3f c0       	rjmp	.+126    	; 0x2f70 <LCD_vInit+0x2d4>
	else if (__tmp > 65535)
    2ef2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef4:	78 85       	ldd	r23, Y+8	; 0x08
    2ef6:	89 85       	ldd	r24, Y+9	; 0x09
    2ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	3f ef       	ldi	r19, 0xFF	; 255
    2efe:	4f e7       	ldi	r20, 0x7F	; 127
    2f00:	57 e4       	ldi	r21, 0x47	; 71
    2f02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f06:	18 16       	cp	r1, r24
    2f08:	4c f5       	brge	.+82     	; 0x2f5c <LCD_vInit+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	40 e2       	ldi	r20, 0x20	; 32
    2f18:	51 e4       	ldi	r21, 0x41	; 65
    2f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	bc 01       	movw	r22, r24
    2f24:	cd 01       	movw	r24, r26
    2f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2a:	dc 01       	movw	r26, r24
    2f2c:	cb 01       	movw	r24, r22
    2f2e:	9e 83       	std	Y+6, r25	; 0x06
    2f30:	8d 83       	std	Y+5, r24	; 0x05
    2f32:	0f c0       	rjmp	.+30     	; 0x2f52 <LCD_vInit+0x2b6>
    2f34:	88 ec       	ldi	r24, 0xC8	; 200
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	9c 83       	std	Y+4, r25	; 0x04
    2f3a:	8b 83       	std	Y+3, r24	; 0x03
    2f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f40:	01 97       	sbiw	r24, 0x01	; 1
    2f42:	f1 f7       	brne	.-4      	; 0x2f40 <LCD_vInit+0x2a4>
    2f44:	9c 83       	std	Y+4, r25	; 0x04
    2f46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f48:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f4c:	01 97       	sbiw	r24, 0x01	; 1
    2f4e:	9e 83       	std	Y+6, r25	; 0x06
    2f50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f52:	8d 81       	ldd	r24, Y+5	; 0x05
    2f54:	9e 81       	ldd	r25, Y+6	; 0x06
    2f56:	00 97       	sbiw	r24, 0x00	; 0
    2f58:	69 f7       	brne	.-38     	; 0x2f34 <LCD_vInit+0x298>
    2f5a:	14 c0       	rjmp	.+40     	; 0x2f84 <LCD_vInit+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f5e:	78 85       	ldd	r23, Y+8	; 0x08
    2f60:	89 85       	ldd	r24, Y+9	; 0x09
    2f62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	9e 83       	std	Y+6, r25	; 0x06
    2f6e:	8d 83       	std	Y+5, r24	; 0x05
    2f70:	8d 81       	ldd	r24, Y+5	; 0x05
    2f72:	9e 81       	ldd	r25, Y+6	; 0x06
    2f74:	9a 83       	std	Y+2, r25	; 0x02
    2f76:	89 83       	std	Y+1, r24	; 0x01
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	f1 f7       	brne	.-4      	; 0x2f7c <LCD_vInit+0x2e0>
    2f80:	9a 83       	std	Y+2, r25	; 0x02
    2f82:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCD_Return_Home();
    2f84:	0e 94 8b 12 	call	0x2516	; 0x2516 <LCD_Return_Home>
	LCD_DiplayON_CursorON();
    2f88:	0e 94 9b 13 	call	0x2736	; 0x2736 <LCD_DiplayON_CursorON>
	LCD_Clear_Screen();
    2f8c:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_Clear_Screen>
	EntryMode();
    2f90:	0e 94 13 13 	call	0x2626	; 0x2626 <EntryMode>
#endif // For Mode
}
    2f94:	aa 96       	adiw	r28, 0x2a	; 42
    2f96:	0f b6       	in	r0, 0x3f	; 63
    2f98:	f8 94       	cli
    2f9a:	de bf       	out	0x3e, r29	; 62
    2f9c:	0f be       	out	0x3f, r0	; 63
    2f9e:	cd bf       	out	0x3d, r28	; 61
    2fa0:	cf 91       	pop	r28
    2fa2:	df 91       	pop	r29
    2fa4:	08 95       	ret

00002fa6 <LCD_Integer_To_String>:
void LCD_Integer_To_String(uint16 DATA)
{
    2fa6:	df 93       	push	r29
    2fa8:	cf 93       	push	r28
    2faa:	cd b7       	in	r28, 0x3d	; 61
    2fac:	de b7       	in	r29, 0x3e	; 62
    2fae:	62 97       	sbiw	r28, 0x12	; 18
    2fb0:	0f b6       	in	r0, 0x3f	; 63
    2fb2:	f8 94       	cli
    2fb4:	de bf       	out	0x3e, r29	; 62
    2fb6:	0f be       	out	0x3f, r0	; 63
    2fb8:	cd bf       	out	0x3d, r28	; 61
    2fba:	9a 8b       	std	Y+18, r25	; 0x12
    2fbc:	89 8b       	std	Y+17, r24	; 0x11
	char BUFF[16]; /* String to hold the ascii result */
	itoa(DATA,BUFF,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2fbe:	89 89       	ldd	r24, Y+17	; 0x11
    2fc0:	9a 89       	ldd	r25, Y+18	; 0x12
    2fc2:	9e 01       	movw	r18, r28
    2fc4:	2f 5f       	subi	r18, 0xFF	; 255
    2fc6:	3f 4f       	sbci	r19, 0xFF	; 255
    2fc8:	b9 01       	movw	r22, r18
    2fca:	4a e0       	ldi	r20, 0x0A	; 10
    2fcc:	50 e0       	ldi	r21, 0x00	; 0
    2fce:	0e 94 cc 2c 	call	0x5998	; 0x5998 <itoa>
	LCD_vSendString(BUFF); /* Display the string */
    2fd2:	ce 01       	movw	r24, r28
    2fd4:	01 96       	adiw	r24, 0x01	; 1
    2fd6:	0e 94 32 16 	call	0x2c64	; 0x2c64 <LCD_vSendString>
}
    2fda:	62 96       	adiw	r28, 0x12	; 18
    2fdc:	0f b6       	in	r0, 0x3f	; 63
    2fde:	f8 94       	cli
    2fe0:	de bf       	out	0x3e, r29	; 62
    2fe2:	0f be       	out	0x3f, r0	; 63
    2fe4:	cd bf       	out	0x3d, r28	; 61
    2fe6:	cf 91       	pop	r28
    2fe8:	df 91       	pop	r29
    2fea:	08 95       	ret

00002fec <LED_vintial>:
#include "LED.h"

void LED_vintial(u8 PORT_NO, u8 PIN_NO)
{
    2fec:	df 93       	push	r29
    2fee:	cf 93       	push	r28
    2ff0:	00 d0       	rcall	.+0      	; 0x2ff2 <LED_vintial+0x6>
    2ff2:	cd b7       	in	r28, 0x3d	; 61
    2ff4:	de b7       	in	r29, 0x3e	; 62
    2ff6:	89 83       	std	Y+1, r24	; 0x01
    2ff8:	6a 83       	std	Y+2, r22	; 0x02
	DIO_Set_Pin_Direction(PORT_NO,PIN_NO,OUTPUT);
    2ffa:	89 81       	ldd	r24, Y+1	; 0x01
    2ffc:	6a 81       	ldd	r22, Y+2	; 0x02
    2ffe:	41 e0       	ldi	r20, 0x01	; 1
    3000:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
}
    3004:	0f 90       	pop	r0
    3006:	0f 90       	pop	r0
    3008:	cf 91       	pop	r28
    300a:	df 91       	pop	r29
    300c:	08 95       	ret

0000300e <LED_ON>:
void LED_ON(u8 PORT_NO, u8 PIN_NO)
{
    300e:	df 93       	push	r29
    3010:	cf 93       	push	r28
    3012:	00 d0       	rcall	.+0      	; 0x3014 <LED_ON+0x6>
    3014:	cd b7       	in	r28, 0x3d	; 61
    3016:	de b7       	in	r29, 0x3e	; 62
    3018:	89 83       	std	Y+1, r24	; 0x01
    301a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_Write_Pin(PORT_NO,PIN_NO,LED__ON);
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	6a 81       	ldd	r22, Y+2	; 0x02
    3020:	41 e0       	ldi	r20, 0x01	; 1
    3022:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
}
    3026:	0f 90       	pop	r0
    3028:	0f 90       	pop	r0
    302a:	cf 91       	pop	r28
    302c:	df 91       	pop	r29
    302e:	08 95       	ret

00003030 <LED_OFF>:
void LED_OFF(u8 PORT_NO, u8 PIN_NO)
{
    3030:	df 93       	push	r29
    3032:	cf 93       	push	r28
    3034:	00 d0       	rcall	.+0      	; 0x3036 <LED_OFF+0x6>
    3036:	cd b7       	in	r28, 0x3d	; 61
    3038:	de b7       	in	r29, 0x3e	; 62
    303a:	89 83       	std	Y+1, r24	; 0x01
    303c:	6a 83       	std	Y+2, r22	; 0x02
	DIO_Write_Pin(PORT_NO,PIN_NO,LED__OFF);
    303e:	89 81       	ldd	r24, Y+1	; 0x01
    3040:	6a 81       	ldd	r22, Y+2	; 0x02
    3042:	40 e0       	ldi	r20, 0x00	; 0
    3044:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
}
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	cf 91       	pop	r28
    304e:	df 91       	pop	r29
    3050:	08 95       	ret

00003052 <LED_Toggle>:
void LED_Toggle(u8 PORT_NO, u8 PIN_NO)
{
    3052:	df 93       	push	r29
    3054:	cf 93       	push	r28
    3056:	00 d0       	rcall	.+0      	; 0x3058 <LED_Toggle+0x6>
    3058:	cd b7       	in	r28, 0x3d	; 61
    305a:	de b7       	in	r29, 0x3e	; 62
    305c:	89 83       	std	Y+1, r24	; 0x01
    305e:	6a 83       	std	Y+2, r22	; 0x02
	DIO_TogglePin(PORT_NO,PIN_NO);
    3060:	89 81       	ldd	r24, Y+1	; 0x01
    3062:	6a 81       	ldd	r22, Y+2	; 0x02
    3064:	0e 94 0e 0a 	call	0x141c	; 0x141c <DIO_TogglePin>
}
    3068:	0f 90       	pop	r0
    306a:	0f 90       	pop	r0
    306c:	cf 91       	pop	r28
    306e:	df 91       	pop	r29
    3070:	08 95       	ret

00003072 <LED_u8ReadStatus>:
u8 LED_u8ReadStatus(u8 PORT_NO, u8 PIN_NO)
{
    3072:	df 93       	push	r29
    3074:	cf 93       	push	r28
    3076:	00 d0       	rcall	.+0      	; 0x3078 <LED_u8ReadStatus+0x6>
    3078:	cd b7       	in	r28, 0x3d	; 61
    307a:	de b7       	in	r29, 0x3e	; 62
    307c:	89 83       	std	Y+1, r24	; 0x01
    307e:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_u8ReadPin(PORT_NO,PIN_NO);
    3080:	89 81       	ldd	r24, Y+1	; 0x01
    3082:	6a 81       	ldd	r22, Y+2	; 0x02
    3084:	0e 94 a8 0a 	call	0x1550	; 0x1550 <DIO_u8ReadPin>
}
    3088:	0f 90       	pop	r0
    308a:	0f 90       	pop	r0
    308c:	cf 91       	pop	r28
    308e:	df 91       	pop	r29
    3090:	08 95       	ret

00003092 <DC_Motors_vInit>:
#include "Motors.h"

void DC_Motors_vInit(u8 MOTORS_PORT, u8 NIBBLE)
{
    3092:	df 93       	push	r29
    3094:	cf 93       	push	r28
    3096:	00 d0       	rcall	.+0      	; 0x3098 <DC_Motors_vInit+0x6>
    3098:	00 d0       	rcall	.+0      	; 0x309a <DC_Motors_vInit+0x8>
    309a:	cd b7       	in	r28, 0x3d	; 61
    309c:	de b7       	in	r29, 0x3e	; 62
    309e:	89 83       	std	Y+1, r24	; 0x01
    30a0:	6a 83       	std	Y+2, r22	; 0x02
	switch(NIBBLE)
    30a2:	8a 81       	ldd	r24, Y+2	; 0x02
    30a4:	28 2f       	mov	r18, r24
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	3c 83       	std	Y+4, r19	; 0x04
    30aa:	2b 83       	std	Y+3, r18	; 0x03
    30ac:	8b 81       	ldd	r24, Y+3	; 0x03
    30ae:	9c 81       	ldd	r25, Y+4	; 0x04
    30b0:	00 97       	sbiw	r24, 0x00	; 0
    30b2:	51 f0       	breq	.+20     	; 0x30c8 <DC_Motors_vInit+0x36>
    30b4:	2b 81       	ldd	r18, Y+3	; 0x03
    30b6:	3c 81       	ldd	r19, Y+4	; 0x04
    30b8:	21 30       	cpi	r18, 0x01	; 1
    30ba:	31 05       	cpc	r19, r1
    30bc:	49 f4       	brne	.+18     	; 0x30d0 <DC_Motors_vInit+0x3e>
	{
	case HIGH:
		DIO_Set_High_Nibble_Direction(MOTORS_PORT, OUTPUT);
    30be:	89 81       	ldd	r24, Y+1	; 0x01
    30c0:	61 e0       	ldi	r22, 0x01	; 1
    30c2:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <DIO_Set_High_Nibble_Direction>
    30c6:	04 c0       	rjmp	.+8      	; 0x30d0 <DC_Motors_vInit+0x3e>
		break;
	case LOW:
		DIO_Set_Low_Nibble_Direction(MOTORS_PORT, OUTPUT);
    30c8:	89 81       	ldd	r24, Y+1	; 0x01
    30ca:	61 e0       	ldi	r22, 0x01	; 1
    30cc:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <DIO_Set_Low_Nibble_Direction>
		break;
	}
}
    30d0:	0f 90       	pop	r0
    30d2:	0f 90       	pop	r0
    30d4:	0f 90       	pop	r0
    30d6:	0f 90       	pop	r0
    30d8:	cf 91       	pop	r28
    30da:	df 91       	pop	r29
    30dc:	08 95       	ret

000030de <DC_Move_Forward>:

void DC_Move_Forward(u8 MOTORS_PORT, u8 NIBBLE)
{
    30de:	df 93       	push	r29
    30e0:	cf 93       	push	r28
    30e2:	00 d0       	rcall	.+0      	; 0x30e4 <DC_Move_Forward+0x6>
    30e4:	00 d0       	rcall	.+0      	; 0x30e6 <DC_Move_Forward+0x8>
    30e6:	cd b7       	in	r28, 0x3d	; 61
    30e8:	de b7       	in	r29, 0x3e	; 62
    30ea:	89 83       	std	Y+1, r24	; 0x01
    30ec:	6a 83       	std	Y+2, r22	; 0x02
	switch(NIBBLE)
    30ee:	8a 81       	ldd	r24, Y+2	; 0x02
    30f0:	28 2f       	mov	r18, r24
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	3c 83       	std	Y+4, r19	; 0x04
    30f6:	2b 83       	std	Y+3, r18	; 0x03
    30f8:	8b 81       	ldd	r24, Y+3	; 0x03
    30fa:	9c 81       	ldd	r25, Y+4	; 0x04
    30fc:	00 97       	sbiw	r24, 0x00	; 0
    30fe:	d1 f0       	breq	.+52     	; 0x3134 <DC_Move_Forward+0x56>
    3100:	2b 81       	ldd	r18, Y+3	; 0x03
    3102:	3c 81       	ldd	r19, Y+4	; 0x04
    3104:	21 30       	cpi	r18, 0x01	; 1
    3106:	31 05       	cpc	r19, r1
    3108:	49 f5       	brne	.+82     	; 0x315c <DC_Move_Forward+0x7e>
	{
	case HIGH:
		DIO_Write_Pin(MOTORS_PORT, 4, HIGH);
    310a:	89 81       	ldd	r24, Y+1	; 0x01
    310c:	64 e0       	ldi	r22, 0x04	; 4
    310e:	41 e0       	ldi	r20, 0x01	; 1
    3110:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 5, LOW);
    3114:	89 81       	ldd	r24, Y+1	; 0x01
    3116:	65 e0       	ldi	r22, 0x05	; 5
    3118:	40 e0       	ldi	r20, 0x00	; 0
    311a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 6, HIGH);
    311e:	89 81       	ldd	r24, Y+1	; 0x01
    3120:	66 e0       	ldi	r22, 0x06	; 6
    3122:	41 e0       	ldi	r20, 0x01	; 1
    3124:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 7, LOW);
    3128:	89 81       	ldd	r24, Y+1	; 0x01
    312a:	67 e0       	ldi	r22, 0x07	; 7
    312c:	40 e0       	ldi	r20, 0x00	; 0
    312e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
    3132:	14 c0       	rjmp	.+40     	; 0x315c <DC_Move_Forward+0x7e>
		break;
	case LOW:
		DIO_Write_Pin(MOTORS_PORT, 0, HIGH);
    3134:	89 81       	ldd	r24, Y+1	; 0x01
    3136:	60 e0       	ldi	r22, 0x00	; 0
    3138:	41 e0       	ldi	r20, 0x01	; 1
    313a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 1, LOW);
    313e:	89 81       	ldd	r24, Y+1	; 0x01
    3140:	61 e0       	ldi	r22, 0x01	; 1
    3142:	40 e0       	ldi	r20, 0x00	; 0
    3144:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 2, HIGH);
    3148:	89 81       	ldd	r24, Y+1	; 0x01
    314a:	62 e0       	ldi	r22, 0x02	; 2
    314c:	41 e0       	ldi	r20, 0x01	; 1
    314e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 3, LOW);
    3152:	89 81       	ldd	r24, Y+1	; 0x01
    3154:	63 e0       	ldi	r22, 0x03	; 3
    3156:	40 e0       	ldi	r20, 0x00	; 0
    3158:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		break;
	}
}
    315c:	0f 90       	pop	r0
    315e:	0f 90       	pop	r0
    3160:	0f 90       	pop	r0
    3162:	0f 90       	pop	r0
    3164:	cf 91       	pop	r28
    3166:	df 91       	pop	r29
    3168:	08 95       	ret

0000316a <DC_Move_Backward>:

void DC_Move_Backward(u8 MOTORS_PORT, u8 NIBBLE)
{
    316a:	df 93       	push	r29
    316c:	cf 93       	push	r28
    316e:	00 d0       	rcall	.+0      	; 0x3170 <DC_Move_Backward+0x6>
    3170:	00 d0       	rcall	.+0      	; 0x3172 <DC_Move_Backward+0x8>
    3172:	cd b7       	in	r28, 0x3d	; 61
    3174:	de b7       	in	r29, 0x3e	; 62
    3176:	89 83       	std	Y+1, r24	; 0x01
    3178:	6a 83       	std	Y+2, r22	; 0x02
	switch(NIBBLE){
    317a:	8a 81       	ldd	r24, Y+2	; 0x02
    317c:	28 2f       	mov	r18, r24
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	3c 83       	std	Y+4, r19	; 0x04
    3182:	2b 83       	std	Y+3, r18	; 0x03
    3184:	8b 81       	ldd	r24, Y+3	; 0x03
    3186:	9c 81       	ldd	r25, Y+4	; 0x04
    3188:	00 97       	sbiw	r24, 0x00	; 0
    318a:	d1 f0       	breq	.+52     	; 0x31c0 <DC_Move_Backward+0x56>
    318c:	2b 81       	ldd	r18, Y+3	; 0x03
    318e:	3c 81       	ldd	r19, Y+4	; 0x04
    3190:	21 30       	cpi	r18, 0x01	; 1
    3192:	31 05       	cpc	r19, r1
    3194:	49 f5       	brne	.+82     	; 0x31e8 <DC_Move_Backward+0x7e>
	case HIGH:
		DIO_Write_Pin(MOTORS_PORT, 4, LOW);
    3196:	89 81       	ldd	r24, Y+1	; 0x01
    3198:	64 e0       	ldi	r22, 0x04	; 4
    319a:	40 e0       	ldi	r20, 0x00	; 0
    319c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 5, HIGH);
    31a0:	89 81       	ldd	r24, Y+1	; 0x01
    31a2:	65 e0       	ldi	r22, 0x05	; 5
    31a4:	41 e0       	ldi	r20, 0x01	; 1
    31a6:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 6, LOW);
    31aa:	89 81       	ldd	r24, Y+1	; 0x01
    31ac:	66 e0       	ldi	r22, 0x06	; 6
    31ae:	40 e0       	ldi	r20, 0x00	; 0
    31b0:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 7, HIGH);
    31b4:	89 81       	ldd	r24, Y+1	; 0x01
    31b6:	67 e0       	ldi	r22, 0x07	; 7
    31b8:	41 e0       	ldi	r20, 0x01	; 1
    31ba:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
    31be:	14 c0       	rjmp	.+40     	; 0x31e8 <DC_Move_Backward+0x7e>
		break;
	case LOW:
		DIO_Write_Pin(MOTORS_PORT, 0, LOW);
    31c0:	89 81       	ldd	r24, Y+1	; 0x01
    31c2:	60 e0       	ldi	r22, 0x00	; 0
    31c4:	40 e0       	ldi	r20, 0x00	; 0
    31c6:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 1, HIGH);
    31ca:	89 81       	ldd	r24, Y+1	; 0x01
    31cc:	61 e0       	ldi	r22, 0x01	; 1
    31ce:	41 e0       	ldi	r20, 0x01	; 1
    31d0:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 2, LOW);
    31d4:	89 81       	ldd	r24, Y+1	; 0x01
    31d6:	62 e0       	ldi	r22, 0x02	; 2
    31d8:	40 e0       	ldi	r20, 0x00	; 0
    31da:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 3, HIGH);
    31de:	89 81       	ldd	r24, Y+1	; 0x01
    31e0:	63 e0       	ldi	r22, 0x03	; 3
    31e2:	41 e0       	ldi	r20, 0x01	; 1
    31e4:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		break;
	}
}
    31e8:	0f 90       	pop	r0
    31ea:	0f 90       	pop	r0
    31ec:	0f 90       	pop	r0
    31ee:	0f 90       	pop	r0
    31f0:	cf 91       	pop	r28
    31f2:	df 91       	pop	r29
    31f4:	08 95       	ret

000031f6 <DC_Move_Right>:

void DC_Move_Right(u8 MOTORS_PORT, u8 NIBBLE)
{
    31f6:	df 93       	push	r29
    31f8:	cf 93       	push	r28
    31fa:	00 d0       	rcall	.+0      	; 0x31fc <DC_Move_Right+0x6>
    31fc:	00 d0       	rcall	.+0      	; 0x31fe <DC_Move_Right+0x8>
    31fe:	cd b7       	in	r28, 0x3d	; 61
    3200:	de b7       	in	r29, 0x3e	; 62
    3202:	89 83       	std	Y+1, r24	; 0x01
    3204:	6a 83       	std	Y+2, r22	; 0x02
	switch(NIBBLE)
    3206:	8a 81       	ldd	r24, Y+2	; 0x02
    3208:	28 2f       	mov	r18, r24
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	3c 83       	std	Y+4, r19	; 0x04
    320e:	2b 83       	std	Y+3, r18	; 0x03
    3210:	8b 81       	ldd	r24, Y+3	; 0x03
    3212:	9c 81       	ldd	r25, Y+4	; 0x04
    3214:	00 97       	sbiw	r24, 0x00	; 0
    3216:	d1 f0       	breq	.+52     	; 0x324c <DC_Move_Right+0x56>
    3218:	2b 81       	ldd	r18, Y+3	; 0x03
    321a:	3c 81       	ldd	r19, Y+4	; 0x04
    321c:	21 30       	cpi	r18, 0x01	; 1
    321e:	31 05       	cpc	r19, r1
    3220:	49 f5       	brne	.+82     	; 0x3274 <DC_Move_Right+0x7e>
	{
	case HIGH:
		DIO_Write_Pin(MOTORS_PORT, 4, HIGH);
    3222:	89 81       	ldd	r24, Y+1	; 0x01
    3224:	64 e0       	ldi	r22, 0x04	; 4
    3226:	41 e0       	ldi	r20, 0x01	; 1
    3228:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 5, LOW);
    322c:	89 81       	ldd	r24, Y+1	; 0x01
    322e:	65 e0       	ldi	r22, 0x05	; 5
    3230:	40 e0       	ldi	r20, 0x00	; 0
    3232:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 6, LOW);
    3236:	89 81       	ldd	r24, Y+1	; 0x01
    3238:	66 e0       	ldi	r22, 0x06	; 6
    323a:	40 e0       	ldi	r20, 0x00	; 0
    323c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 7, HIGH);
    3240:	89 81       	ldd	r24, Y+1	; 0x01
    3242:	67 e0       	ldi	r22, 0x07	; 7
    3244:	41 e0       	ldi	r20, 0x01	; 1
    3246:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
    324a:	14 c0       	rjmp	.+40     	; 0x3274 <DC_Move_Right+0x7e>
		break;
	case LOW:
		DIO_Write_Pin(MOTORS_PORT, 0, HIGH);
    324c:	89 81       	ldd	r24, Y+1	; 0x01
    324e:	60 e0       	ldi	r22, 0x00	; 0
    3250:	41 e0       	ldi	r20, 0x01	; 1
    3252:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 1, LOW);
    3256:	89 81       	ldd	r24, Y+1	; 0x01
    3258:	61 e0       	ldi	r22, 0x01	; 1
    325a:	40 e0       	ldi	r20, 0x00	; 0
    325c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 2, LOW);
    3260:	89 81       	ldd	r24, Y+1	; 0x01
    3262:	62 e0       	ldi	r22, 0x02	; 2
    3264:	40 e0       	ldi	r20, 0x00	; 0
    3266:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 3, HIGH);
    326a:	89 81       	ldd	r24, Y+1	; 0x01
    326c:	63 e0       	ldi	r22, 0x03	; 3
    326e:	41 e0       	ldi	r20, 0x01	; 1
    3270:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		break;
	}
}
    3274:	0f 90       	pop	r0
    3276:	0f 90       	pop	r0
    3278:	0f 90       	pop	r0
    327a:	0f 90       	pop	r0
    327c:	cf 91       	pop	r28
    327e:	df 91       	pop	r29
    3280:	08 95       	ret

00003282 <DC_Move_Left>:

void DC_Move_Left(u8 MOTORS_PORT, u8 NIBBLE)
{
    3282:	df 93       	push	r29
    3284:	cf 93       	push	r28
    3286:	00 d0       	rcall	.+0      	; 0x3288 <DC_Move_Left+0x6>
    3288:	00 d0       	rcall	.+0      	; 0x328a <DC_Move_Left+0x8>
    328a:	cd b7       	in	r28, 0x3d	; 61
    328c:	de b7       	in	r29, 0x3e	; 62
    328e:	89 83       	std	Y+1, r24	; 0x01
    3290:	6a 83       	std	Y+2, r22	; 0x02
	switch(NIBBLE)
    3292:	8a 81       	ldd	r24, Y+2	; 0x02
    3294:	28 2f       	mov	r18, r24
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	3c 83       	std	Y+4, r19	; 0x04
    329a:	2b 83       	std	Y+3, r18	; 0x03
    329c:	8b 81       	ldd	r24, Y+3	; 0x03
    329e:	9c 81       	ldd	r25, Y+4	; 0x04
    32a0:	00 97       	sbiw	r24, 0x00	; 0
    32a2:	d1 f0       	breq	.+52     	; 0x32d8 <DC_Move_Left+0x56>
    32a4:	2b 81       	ldd	r18, Y+3	; 0x03
    32a6:	3c 81       	ldd	r19, Y+4	; 0x04
    32a8:	21 30       	cpi	r18, 0x01	; 1
    32aa:	31 05       	cpc	r19, r1
    32ac:	49 f5       	brne	.+82     	; 0x3300 <DC_Move_Left+0x7e>
	{
	case HIGH:
		DIO_Write_Pin(MOTORS_PORT, 4, LOW);
    32ae:	89 81       	ldd	r24, Y+1	; 0x01
    32b0:	64 e0       	ldi	r22, 0x04	; 4
    32b2:	40 e0       	ldi	r20, 0x00	; 0
    32b4:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 5, HIGH);
    32b8:	89 81       	ldd	r24, Y+1	; 0x01
    32ba:	65 e0       	ldi	r22, 0x05	; 5
    32bc:	41 e0       	ldi	r20, 0x01	; 1
    32be:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 6, HIGH);
    32c2:	89 81       	ldd	r24, Y+1	; 0x01
    32c4:	66 e0       	ldi	r22, 0x06	; 6
    32c6:	41 e0       	ldi	r20, 0x01	; 1
    32c8:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 7, LOW);
    32cc:	89 81       	ldd	r24, Y+1	; 0x01
    32ce:	67 e0       	ldi	r22, 0x07	; 7
    32d0:	40 e0       	ldi	r20, 0x00	; 0
    32d2:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
    32d6:	14 c0       	rjmp	.+40     	; 0x3300 <DC_Move_Left+0x7e>
		break;
	case LOW:
		DIO_Write_Pin(MOTORS_PORT, 0, LOW);
    32d8:	89 81       	ldd	r24, Y+1	; 0x01
    32da:	60 e0       	ldi	r22, 0x00	; 0
    32dc:	40 e0       	ldi	r20, 0x00	; 0
    32de:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 1, HIGH);
    32e2:	89 81       	ldd	r24, Y+1	; 0x01
    32e4:	61 e0       	ldi	r22, 0x01	; 1
    32e6:	41 e0       	ldi	r20, 0x01	; 1
    32e8:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 2, HIGH);
    32ec:	89 81       	ldd	r24, Y+1	; 0x01
    32ee:	62 e0       	ldi	r22, 0x02	; 2
    32f0:	41 e0       	ldi	r20, 0x01	; 1
    32f2:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 3, LOW);
    32f6:	89 81       	ldd	r24, Y+1	; 0x01
    32f8:	63 e0       	ldi	r22, 0x03	; 3
    32fa:	40 e0       	ldi	r20, 0x00	; 0
    32fc:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		break;
	}
}
    3300:	0f 90       	pop	r0
    3302:	0f 90       	pop	r0
    3304:	0f 90       	pop	r0
    3306:	0f 90       	pop	r0
    3308:	cf 91       	pop	r28
    330a:	df 91       	pop	r29
    330c:	08 95       	ret

0000330e <DC_Drift_Left>:

void DC_Drift_Left(u8 MOTORS_PORT, u8 NIBBLE)
{
    330e:	df 93       	push	r29
    3310:	cf 93       	push	r28
    3312:	00 d0       	rcall	.+0      	; 0x3314 <DC_Drift_Left+0x6>
    3314:	00 d0       	rcall	.+0      	; 0x3316 <DC_Drift_Left+0x8>
    3316:	cd b7       	in	r28, 0x3d	; 61
    3318:	de b7       	in	r29, 0x3e	; 62
    331a:	89 83       	std	Y+1, r24	; 0x01
    331c:	6a 83       	std	Y+2, r22	; 0x02
	switch(NIBBLE)
    331e:	8a 81       	ldd	r24, Y+2	; 0x02
    3320:	28 2f       	mov	r18, r24
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	3c 83       	std	Y+4, r19	; 0x04
    3326:	2b 83       	std	Y+3, r18	; 0x03
    3328:	8b 81       	ldd	r24, Y+3	; 0x03
    332a:	9c 81       	ldd	r25, Y+4	; 0x04
    332c:	00 97       	sbiw	r24, 0x00	; 0
    332e:	d1 f0       	breq	.+52     	; 0x3364 <DC_Drift_Left+0x56>
    3330:	2b 81       	ldd	r18, Y+3	; 0x03
    3332:	3c 81       	ldd	r19, Y+4	; 0x04
    3334:	21 30       	cpi	r18, 0x01	; 1
    3336:	31 05       	cpc	r19, r1
    3338:	49 f5       	brne	.+82     	; 0x338c <DC_Drift_Left+0x7e>
	{
	case HIGH:
		DIO_Write_Pin(MOTORS_PORT, 4, LOW);
    333a:	89 81       	ldd	r24, Y+1	; 0x01
    333c:	64 e0       	ldi	r22, 0x04	; 4
    333e:	40 e0       	ldi	r20, 0x00	; 0
    3340:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 5, LOW);
    3344:	89 81       	ldd	r24, Y+1	; 0x01
    3346:	65 e0       	ldi	r22, 0x05	; 5
    3348:	40 e0       	ldi	r20, 0x00	; 0
    334a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 6, HIGH);
    334e:	89 81       	ldd	r24, Y+1	; 0x01
    3350:	66 e0       	ldi	r22, 0x06	; 6
    3352:	41 e0       	ldi	r20, 0x01	; 1
    3354:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 7, LOW);
    3358:	89 81       	ldd	r24, Y+1	; 0x01
    335a:	67 e0       	ldi	r22, 0x07	; 7
    335c:	40 e0       	ldi	r20, 0x00	; 0
    335e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
    3362:	14 c0       	rjmp	.+40     	; 0x338c <DC_Drift_Left+0x7e>
		break;
	case LOW:
		DIO_Write_Pin(MOTORS_PORT, 0, LOW);
    3364:	89 81       	ldd	r24, Y+1	; 0x01
    3366:	60 e0       	ldi	r22, 0x00	; 0
    3368:	40 e0       	ldi	r20, 0x00	; 0
    336a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 1, LOW);
    336e:	89 81       	ldd	r24, Y+1	; 0x01
    3370:	61 e0       	ldi	r22, 0x01	; 1
    3372:	40 e0       	ldi	r20, 0x00	; 0
    3374:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 2, HIGH);
    3378:	89 81       	ldd	r24, Y+1	; 0x01
    337a:	62 e0       	ldi	r22, 0x02	; 2
    337c:	41 e0       	ldi	r20, 0x01	; 1
    337e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 3, LOW);
    3382:	89 81       	ldd	r24, Y+1	; 0x01
    3384:	63 e0       	ldi	r22, 0x03	; 3
    3386:	40 e0       	ldi	r20, 0x00	; 0
    3388:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		break;
	}
}
    338c:	0f 90       	pop	r0
    338e:	0f 90       	pop	r0
    3390:	0f 90       	pop	r0
    3392:	0f 90       	pop	r0
    3394:	cf 91       	pop	r28
    3396:	df 91       	pop	r29
    3398:	08 95       	ret

0000339a <DC_Drift_Right>:

void DC_Drift_Right(u8 MOTORS_PORT, u8 NIBBLE)
{
    339a:	df 93       	push	r29
    339c:	cf 93       	push	r28
    339e:	00 d0       	rcall	.+0      	; 0x33a0 <DC_Drift_Right+0x6>
    33a0:	00 d0       	rcall	.+0      	; 0x33a2 <DC_Drift_Right+0x8>
    33a2:	cd b7       	in	r28, 0x3d	; 61
    33a4:	de b7       	in	r29, 0x3e	; 62
    33a6:	89 83       	std	Y+1, r24	; 0x01
    33a8:	6a 83       	std	Y+2, r22	; 0x02
	switch(NIBBLE)
    33aa:	8a 81       	ldd	r24, Y+2	; 0x02
    33ac:	28 2f       	mov	r18, r24
    33ae:	30 e0       	ldi	r19, 0x00	; 0
    33b0:	3c 83       	std	Y+4, r19	; 0x04
    33b2:	2b 83       	std	Y+3, r18	; 0x03
    33b4:	8b 81       	ldd	r24, Y+3	; 0x03
    33b6:	9c 81       	ldd	r25, Y+4	; 0x04
    33b8:	00 97       	sbiw	r24, 0x00	; 0
    33ba:	d1 f0       	breq	.+52     	; 0x33f0 <DC_Drift_Right+0x56>
    33bc:	2b 81       	ldd	r18, Y+3	; 0x03
    33be:	3c 81       	ldd	r19, Y+4	; 0x04
    33c0:	21 30       	cpi	r18, 0x01	; 1
    33c2:	31 05       	cpc	r19, r1
    33c4:	49 f5       	brne	.+82     	; 0x3418 <DC_Drift_Right+0x7e>
	{
	case HIGH:
		DIO_Write_Pin(MOTORS_PORT, 4, HIGH);
    33c6:	89 81       	ldd	r24, Y+1	; 0x01
    33c8:	64 e0       	ldi	r22, 0x04	; 4
    33ca:	41 e0       	ldi	r20, 0x01	; 1
    33cc:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 5, LOW);
    33d0:	89 81       	ldd	r24, Y+1	; 0x01
    33d2:	65 e0       	ldi	r22, 0x05	; 5
    33d4:	40 e0       	ldi	r20, 0x00	; 0
    33d6:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 6, LOW);
    33da:	89 81       	ldd	r24, Y+1	; 0x01
    33dc:	66 e0       	ldi	r22, 0x06	; 6
    33de:	40 e0       	ldi	r20, 0x00	; 0
    33e0:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 7, LOW);
    33e4:	89 81       	ldd	r24, Y+1	; 0x01
    33e6:	67 e0       	ldi	r22, 0x07	; 7
    33e8:	40 e0       	ldi	r20, 0x00	; 0
    33ea:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
    33ee:	14 c0       	rjmp	.+40     	; 0x3418 <DC_Drift_Right+0x7e>
		break;
	case LOW:
		DIO_Write_Pin(MOTORS_PORT, 0, HIGH);
    33f0:	89 81       	ldd	r24, Y+1	; 0x01
    33f2:	60 e0       	ldi	r22, 0x00	; 0
    33f4:	41 e0       	ldi	r20, 0x01	; 1
    33f6:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 1, LOW);
    33fa:	89 81       	ldd	r24, Y+1	; 0x01
    33fc:	61 e0       	ldi	r22, 0x01	; 1
    33fe:	40 e0       	ldi	r20, 0x00	; 0
    3400:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 2, LOW);
    3404:	89 81       	ldd	r24, Y+1	; 0x01
    3406:	62 e0       	ldi	r22, 0x02	; 2
    3408:	40 e0       	ldi	r20, 0x00	; 0
    340a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 3, LOW);
    340e:	89 81       	ldd	r24, Y+1	; 0x01
    3410:	63 e0       	ldi	r22, 0x03	; 3
    3412:	40 e0       	ldi	r20, 0x00	; 0
    3414:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		break;
	}
}
    3418:	0f 90       	pop	r0
    341a:	0f 90       	pop	r0
    341c:	0f 90       	pop	r0
    341e:	0f 90       	pop	r0
    3420:	cf 91       	pop	r28
    3422:	df 91       	pop	r29
    3424:	08 95       	ret

00003426 <DC_Drift_Back_Right>:

void DC_Drift_Back_Right(u8 MOTORS_PORT, u8 NIBBLE)
{
    3426:	df 93       	push	r29
    3428:	cf 93       	push	r28
    342a:	00 d0       	rcall	.+0      	; 0x342c <DC_Drift_Back_Right+0x6>
    342c:	00 d0       	rcall	.+0      	; 0x342e <DC_Drift_Back_Right+0x8>
    342e:	cd b7       	in	r28, 0x3d	; 61
    3430:	de b7       	in	r29, 0x3e	; 62
    3432:	89 83       	std	Y+1, r24	; 0x01
    3434:	6a 83       	std	Y+2, r22	; 0x02
	switch(NIBBLE)
    3436:	8a 81       	ldd	r24, Y+2	; 0x02
    3438:	28 2f       	mov	r18, r24
    343a:	30 e0       	ldi	r19, 0x00	; 0
    343c:	3c 83       	std	Y+4, r19	; 0x04
    343e:	2b 83       	std	Y+3, r18	; 0x03
    3440:	8b 81       	ldd	r24, Y+3	; 0x03
    3442:	9c 81       	ldd	r25, Y+4	; 0x04
    3444:	00 97       	sbiw	r24, 0x00	; 0
    3446:	d1 f0       	breq	.+52     	; 0x347c <DC_Drift_Back_Right+0x56>
    3448:	2b 81       	ldd	r18, Y+3	; 0x03
    344a:	3c 81       	ldd	r19, Y+4	; 0x04
    344c:	21 30       	cpi	r18, 0x01	; 1
    344e:	31 05       	cpc	r19, r1
    3450:	49 f5       	brne	.+82     	; 0x34a4 <DC_Drift_Back_Right+0x7e>
	{
	case HIGH:
		DIO_Write_Pin(MOTORS_PORT, 4, LOW);
    3452:	89 81       	ldd	r24, Y+1	; 0x01
    3454:	64 e0       	ldi	r22, 0x04	; 4
    3456:	40 e0       	ldi	r20, 0x00	; 0
    3458:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 5, HIGH);
    345c:	89 81       	ldd	r24, Y+1	; 0x01
    345e:	65 e0       	ldi	r22, 0x05	; 5
    3460:	41 e0       	ldi	r20, 0x01	; 1
    3462:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 6, LOW);
    3466:	89 81       	ldd	r24, Y+1	; 0x01
    3468:	66 e0       	ldi	r22, 0x06	; 6
    346a:	40 e0       	ldi	r20, 0x00	; 0
    346c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 7, LOW);
    3470:	89 81       	ldd	r24, Y+1	; 0x01
    3472:	67 e0       	ldi	r22, 0x07	; 7
    3474:	40 e0       	ldi	r20, 0x00	; 0
    3476:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
    347a:	14 c0       	rjmp	.+40     	; 0x34a4 <DC_Drift_Back_Right+0x7e>
		break;
	case LOW:
		DIO_Write_Pin(MOTORS_PORT, 0, LOW);
    347c:	89 81       	ldd	r24, Y+1	; 0x01
    347e:	60 e0       	ldi	r22, 0x00	; 0
    3480:	40 e0       	ldi	r20, 0x00	; 0
    3482:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 1, HIGH);
    3486:	89 81       	ldd	r24, Y+1	; 0x01
    3488:	61 e0       	ldi	r22, 0x01	; 1
    348a:	41 e0       	ldi	r20, 0x01	; 1
    348c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 2, LOW);
    3490:	89 81       	ldd	r24, Y+1	; 0x01
    3492:	62 e0       	ldi	r22, 0x02	; 2
    3494:	40 e0       	ldi	r20, 0x00	; 0
    3496:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 3, LOW);
    349a:	89 81       	ldd	r24, Y+1	; 0x01
    349c:	63 e0       	ldi	r22, 0x03	; 3
    349e:	40 e0       	ldi	r20, 0x00	; 0
    34a0:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		break;
	}
}
    34a4:	0f 90       	pop	r0
    34a6:	0f 90       	pop	r0
    34a8:	0f 90       	pop	r0
    34aa:	0f 90       	pop	r0
    34ac:	cf 91       	pop	r28
    34ae:	df 91       	pop	r29
    34b0:	08 95       	ret

000034b2 <DC_Drift_Back_Left>:

void DC_Drift_Back_Left(u8 MOTORS_PORT, u8 NIBBLE)
{
    34b2:	df 93       	push	r29
    34b4:	cf 93       	push	r28
    34b6:	00 d0       	rcall	.+0      	; 0x34b8 <DC_Drift_Back_Left+0x6>
    34b8:	00 d0       	rcall	.+0      	; 0x34ba <DC_Drift_Back_Left+0x8>
    34ba:	cd b7       	in	r28, 0x3d	; 61
    34bc:	de b7       	in	r29, 0x3e	; 62
    34be:	89 83       	std	Y+1, r24	; 0x01
    34c0:	6a 83       	std	Y+2, r22	; 0x02
	switch(NIBBLE)
    34c2:	8a 81       	ldd	r24, Y+2	; 0x02
    34c4:	28 2f       	mov	r18, r24
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	3c 83       	std	Y+4, r19	; 0x04
    34ca:	2b 83       	std	Y+3, r18	; 0x03
    34cc:	8b 81       	ldd	r24, Y+3	; 0x03
    34ce:	9c 81       	ldd	r25, Y+4	; 0x04
    34d0:	00 97       	sbiw	r24, 0x00	; 0
    34d2:	d1 f0       	breq	.+52     	; 0x3508 <DC_Drift_Back_Left+0x56>
    34d4:	2b 81       	ldd	r18, Y+3	; 0x03
    34d6:	3c 81       	ldd	r19, Y+4	; 0x04
    34d8:	21 30       	cpi	r18, 0x01	; 1
    34da:	31 05       	cpc	r19, r1
    34dc:	49 f5       	brne	.+82     	; 0x3530 <DC_Drift_Back_Left+0x7e>
	{
	case HIGH:
		DIO_Write_Pin(MOTORS_PORT, 4, LOW);
    34de:	89 81       	ldd	r24, Y+1	; 0x01
    34e0:	64 e0       	ldi	r22, 0x04	; 4
    34e2:	40 e0       	ldi	r20, 0x00	; 0
    34e4:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 5, LOW);
    34e8:	89 81       	ldd	r24, Y+1	; 0x01
    34ea:	65 e0       	ldi	r22, 0x05	; 5
    34ec:	40 e0       	ldi	r20, 0x00	; 0
    34ee:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 6, LOW);
    34f2:	89 81       	ldd	r24, Y+1	; 0x01
    34f4:	66 e0       	ldi	r22, 0x06	; 6
    34f6:	40 e0       	ldi	r20, 0x00	; 0
    34f8:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 7, HIGH);
    34fc:	89 81       	ldd	r24, Y+1	; 0x01
    34fe:	67 e0       	ldi	r22, 0x07	; 7
    3500:	41 e0       	ldi	r20, 0x01	; 1
    3502:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
    3506:	14 c0       	rjmp	.+40     	; 0x3530 <DC_Drift_Back_Left+0x7e>
		break;
	case LOW:
		DIO_Write_Pin(MOTORS_PORT, 0, LOW);
    3508:	89 81       	ldd	r24, Y+1	; 0x01
    350a:	60 e0       	ldi	r22, 0x00	; 0
    350c:	40 e0       	ldi	r20, 0x00	; 0
    350e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 1, LOW);
    3512:	89 81       	ldd	r24, Y+1	; 0x01
    3514:	61 e0       	ldi	r22, 0x01	; 1
    3516:	40 e0       	ldi	r20, 0x00	; 0
    3518:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 2, LOW);
    351c:	89 81       	ldd	r24, Y+1	; 0x01
    351e:	62 e0       	ldi	r22, 0x02	; 2
    3520:	40 e0       	ldi	r20, 0x00	; 0
    3522:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 3, HIGH);
    3526:	89 81       	ldd	r24, Y+1	; 0x01
    3528:	63 e0       	ldi	r22, 0x03	; 3
    352a:	41 e0       	ldi	r20, 0x01	; 1
    352c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		break;
	}
}
    3530:	0f 90       	pop	r0
    3532:	0f 90       	pop	r0
    3534:	0f 90       	pop	r0
    3536:	0f 90       	pop	r0
    3538:	cf 91       	pop	r28
    353a:	df 91       	pop	r29
    353c:	08 95       	ret

0000353e <DC_STOP>:

void DC_STOP(u8 MOTORS_PORT, u8 NIBBLE)
{
    353e:	df 93       	push	r29
    3540:	cf 93       	push	r28
    3542:	00 d0       	rcall	.+0      	; 0x3544 <DC_STOP+0x6>
    3544:	00 d0       	rcall	.+0      	; 0x3546 <DC_STOP+0x8>
    3546:	cd b7       	in	r28, 0x3d	; 61
    3548:	de b7       	in	r29, 0x3e	; 62
    354a:	89 83       	std	Y+1, r24	; 0x01
    354c:	6a 83       	std	Y+2, r22	; 0x02
	switch(NIBBLE)
    354e:	8a 81       	ldd	r24, Y+2	; 0x02
    3550:	28 2f       	mov	r18, r24
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	3c 83       	std	Y+4, r19	; 0x04
    3556:	2b 83       	std	Y+3, r18	; 0x03
    3558:	8b 81       	ldd	r24, Y+3	; 0x03
    355a:	9c 81       	ldd	r25, Y+4	; 0x04
    355c:	00 97       	sbiw	r24, 0x00	; 0
    355e:	d1 f0       	breq	.+52     	; 0x3594 <DC_STOP+0x56>
    3560:	2b 81       	ldd	r18, Y+3	; 0x03
    3562:	3c 81       	ldd	r19, Y+4	; 0x04
    3564:	21 30       	cpi	r18, 0x01	; 1
    3566:	31 05       	cpc	r19, r1
    3568:	49 f5       	brne	.+82     	; 0x35bc <DC_STOP+0x7e>
	{
	case HIGH:
		DIO_Write_Pin(MOTORS_PORT, 4, LOW);
    356a:	89 81       	ldd	r24, Y+1	; 0x01
    356c:	64 e0       	ldi	r22, 0x04	; 4
    356e:	40 e0       	ldi	r20, 0x00	; 0
    3570:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 5, LOW);
    3574:	89 81       	ldd	r24, Y+1	; 0x01
    3576:	65 e0       	ldi	r22, 0x05	; 5
    3578:	40 e0       	ldi	r20, 0x00	; 0
    357a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 6, LOW);
    357e:	89 81       	ldd	r24, Y+1	; 0x01
    3580:	66 e0       	ldi	r22, 0x06	; 6
    3582:	40 e0       	ldi	r20, 0x00	; 0
    3584:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 7, LOW);
    3588:	89 81       	ldd	r24, Y+1	; 0x01
    358a:	67 e0       	ldi	r22, 0x07	; 7
    358c:	40 e0       	ldi	r20, 0x00	; 0
    358e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
    3592:	14 c0       	rjmp	.+40     	; 0x35bc <DC_STOP+0x7e>
		break;
	case LOW:
		DIO_Write_Pin(MOTORS_PORT, 0, LOW);
    3594:	89 81       	ldd	r24, Y+1	; 0x01
    3596:	60 e0       	ldi	r22, 0x00	; 0
    3598:	40 e0       	ldi	r20, 0x00	; 0
    359a:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 1, LOW);
    359e:	89 81       	ldd	r24, Y+1	; 0x01
    35a0:	61 e0       	ldi	r22, 0x01	; 1
    35a2:	40 e0       	ldi	r20, 0x00	; 0
    35a4:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 2, LOW);
    35a8:	89 81       	ldd	r24, Y+1	; 0x01
    35aa:	62 e0       	ldi	r22, 0x02	; 2
    35ac:	40 e0       	ldi	r20, 0x00	; 0
    35ae:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		DIO_Write_Pin(MOTORS_PORT, 3, LOW);
    35b2:	89 81       	ldd	r24, Y+1	; 0x01
    35b4:	63 e0       	ldi	r22, 0x03	; 3
    35b6:	40 e0       	ldi	r20, 0x00	; 0
    35b8:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
		break;
	}
}
    35bc:	0f 90       	pop	r0
    35be:	0f 90       	pop	r0
    35c0:	0f 90       	pop	r0
    35c2:	0f 90       	pop	r0
    35c4:	cf 91       	pop	r28
    35c6:	df 91       	pop	r29
    35c8:	08 95       	ret

000035ca <Servo_vInit_Pin_OC1A>:

void Servo_vInit_Pin_OC1A()
{
    35ca:	df 93       	push	r29
    35cc:	cf 93       	push	r28
    35ce:	cd b7       	in	r28, 0x3d	; 61
    35d0:	de b7       	in	r29, 0x3e	; 62
	DIO_Set_Pin_Direction(PORT_D, PIN_NO_5, OUTPUT);
    35d2:	84 e4       	ldi	r24, 0x44	; 68
    35d4:	65 e0       	ldi	r22, 0x05	; 5
    35d6:	41 e0       	ldi	r20, 0x01	; 1
    35d8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
}
    35dc:	cf 91       	pop	r28
    35de:	df 91       	pop	r29
    35e0:	08 95       	ret

000035e2 <Servo_vInit_Pin_OC1B>:
void Servo_vInit_Pin_OC1B()
{
    35e2:	df 93       	push	r29
    35e4:	cf 93       	push	r28
    35e6:	cd b7       	in	r28, 0x3d	; 61
    35e8:	de b7       	in	r29, 0x3e	; 62
	DIO_Set_Pin_Direction(PORT_D, PIN_NO_4, OUTPUT);
    35ea:	84 e4       	ldi	r24, 0x44	; 68
    35ec:	64 e0       	ldi	r22, 0x04	; 4
    35ee:	41 e0       	ldi	r20, 0x01	; 1
    35f0:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
}
    35f4:	cf 91       	pop	r28
    35f6:	df 91       	pop	r29
    35f8:	08 95       	ret

000035fa <Servo_Direction_Pin_OC1A>:

void Servo_Direction_Pin_OC1A(double DEGREE)
{
    35fa:	0f 93       	push	r16
    35fc:	1f 93       	push	r17
    35fe:	df 93       	push	r29
    3600:	cf 93       	push	r28
    3602:	00 d0       	rcall	.+0      	; 0x3604 <Servo_Direction_Pin_OC1A+0xa>
    3604:	00 d0       	rcall	.+0      	; 0x3606 <Servo_Direction_Pin_OC1A+0xc>
    3606:	cd b7       	in	r28, 0x3d	; 61
    3608:	de b7       	in	r29, 0x3e	; 62
    360a:	69 83       	std	Y+1, r22	; 0x01
    360c:	7a 83       	std	Y+2, r23	; 0x02
    360e:	8b 83       	std	Y+3, r24	; 0x03
    3610:	9c 83       	std	Y+4, r25	; 0x04
	/* select fast PWM mode */
	CLEAR_BIT(TCCR1A, WGM10);
    3612:	af e4       	ldi	r26, 0x4F	; 79
    3614:	b0 e0       	ldi	r27, 0x00	; 0
    3616:	ef e4       	ldi	r30, 0x4F	; 79
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	80 81       	ld	r24, Z
    361c:	8e 7f       	andi	r24, 0xFE	; 254
    361e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
    3620:	af e4       	ldi	r26, 0x4F	; 79
    3622:	b0 e0       	ldi	r27, 0x00	; 0
    3624:	ef e4       	ldi	r30, 0x4F	; 79
    3626:	f0 e0       	ldi	r31, 0x00	; 0
    3628:	80 81       	ld	r24, Z
    362a:	82 60       	ori	r24, 0x02	; 2
    362c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
    362e:	ae e4       	ldi	r26, 0x4E	; 78
    3630:	b0 e0       	ldi	r27, 0x00	; 0
    3632:	ee e4       	ldi	r30, 0x4E	; 78
    3634:	f0 e0       	ldi	r31, 0x00	; 0
    3636:	80 81       	ld	r24, Z
    3638:	88 60       	ori	r24, 0x08	; 8
    363a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM13);
    363c:	ae e4       	ldi	r26, 0x4E	; 78
    363e:	b0 e0       	ldi	r27, 0x00	; 0
    3640:	ee e4       	ldi	r30, 0x4E	; 78
    3642:	f0 e0       	ldi	r31, 0x00	; 0
    3644:	80 81       	ld	r24, Z
    3646:	80 61       	ori	r24, 0x10	; 16
    3648:	8c 93       	st	X, r24
	/* load a value in OCR1A, ICR1 */
	OCR1A = 1000 + (DEGREE*1000)/180;
    364a:	0a e4       	ldi	r16, 0x4A	; 74
    364c:	10 e0       	ldi	r17, 0x00	; 0
    364e:	69 81       	ldd	r22, Y+1	; 0x01
    3650:	7a 81       	ldd	r23, Y+2	; 0x02
    3652:	8b 81       	ldd	r24, Y+3	; 0x03
    3654:	9c 81       	ldd	r25, Y+4	; 0x04
    3656:	20 e0       	ldi	r18, 0x00	; 0
    3658:	30 e0       	ldi	r19, 0x00	; 0
    365a:	4a e7       	ldi	r20, 0x7A	; 122
    365c:	54 e4       	ldi	r21, 0x44	; 68
    365e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3662:	dc 01       	movw	r26, r24
    3664:	cb 01       	movw	r24, r22
    3666:	bc 01       	movw	r22, r24
    3668:	cd 01       	movw	r24, r26
    366a:	20 e0       	ldi	r18, 0x00	; 0
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	44 e3       	ldi	r20, 0x34	; 52
    3670:	53 e4       	ldi	r21, 0x43	; 67
    3672:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3676:	dc 01       	movw	r26, r24
    3678:	cb 01       	movw	r24, r22
    367a:	bc 01       	movw	r22, r24
    367c:	cd 01       	movw	r24, r26
    367e:	20 e0       	ldi	r18, 0x00	; 0
    3680:	30 e0       	ldi	r19, 0x00	; 0
    3682:	4a e7       	ldi	r20, 0x7A	; 122
    3684:	54 e4       	ldi	r21, 0x44	; 68
    3686:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    368a:	dc 01       	movw	r26, r24
    368c:	cb 01       	movw	r24, r22
    368e:	bc 01       	movw	r22, r24
    3690:	cd 01       	movw	r24, r26
    3692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	f8 01       	movw	r30, r16
    369c:	91 83       	std	Z+1, r25	; 0x01
    369e:	80 83       	st	Z, r24
	ICR1 = 20000;
    36a0:	e6 e4       	ldi	r30, 0x46	; 70
    36a2:	f0 e0       	ldi	r31, 0x00	; 0
    36a4:	80 e2       	ldi	r24, 0x20	; 32
    36a6:	9e e4       	ldi	r25, 0x4E	; 78
    36a8:	91 83       	std	Z+1, r25	; 0x01
    36aa:	80 83       	st	Z, r24

	/* select timer clock, Divide by 8 , F_timer1 = 1 MHZ */
	CLEAR_BIT(TCCR1B,CS10);
    36ac:	ae e4       	ldi	r26, 0x4E	; 78
    36ae:	b0 e0       	ldi	r27, 0x00	; 0
    36b0:	ee e4       	ldi	r30, 0x4E	; 78
    36b2:	f0 e0       	ldi	r31, 0x00	; 0
    36b4:	80 81       	ld	r24, Z
    36b6:	8e 7f       	andi	r24, 0xFE	; 254
    36b8:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS11);
    36ba:	ae e4       	ldi	r26, 0x4E	; 78
    36bc:	b0 e0       	ldi	r27, 0x00	; 0
    36be:	ee e4       	ldi	r30, 0x4E	; 78
    36c0:	f0 e0       	ldi	r31, 0x00	; 0
    36c2:	80 81       	ld	r24, Z
    36c4:	82 60       	ori	r24, 0x02	; 2
    36c6:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS12);
    36c8:	ae e4       	ldi	r26, 0x4E	; 78
    36ca:	b0 e0       	ldi	r27, 0x00	; 0
    36cc:	ee e4       	ldi	r30, 0x4E	; 78
    36ce:	f0 e0       	ldi	r31, 0x00	; 0
    36d0:	80 81       	ld	r24, Z
    36d2:	8b 7f       	andi	r24, 0xFB	; 251
    36d4:	8c 93       	st	X, r24

	/* clear OC1A on compare match, set OC1A at BOTTOM (non-inverting mode) */
	CLEAR_BIT(TCCR1A, COM1A0);
    36d6:	af e4       	ldi	r26, 0x4F	; 79
    36d8:	b0 e0       	ldi	r27, 0x00	; 0
    36da:	ef e4       	ldi	r30, 0x4F	; 79
    36dc:	f0 e0       	ldi	r31, 0x00	; 0
    36de:	80 81       	ld	r24, Z
    36e0:	8f 7b       	andi	r24, 0xBF	; 191
    36e2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A1);
    36e4:	af e4       	ldi	r26, 0x4F	; 79
    36e6:	b0 e0       	ldi	r27, 0x00	; 0
    36e8:	ef e4       	ldi	r30, 0x4F	; 79
    36ea:	f0 e0       	ldi	r31, 0x00	; 0
    36ec:	80 81       	ld	r24, Z
    36ee:	80 68       	ori	r24, 0x80	; 128
    36f0:	8c 93       	st	X, r24
}
    36f2:	0f 90       	pop	r0
    36f4:	0f 90       	pop	r0
    36f6:	0f 90       	pop	r0
    36f8:	0f 90       	pop	r0
    36fa:	cf 91       	pop	r28
    36fc:	df 91       	pop	r29
    36fe:	1f 91       	pop	r17
    3700:	0f 91       	pop	r16
    3702:	08 95       	ret

00003704 <Servo_Direction_Pin_OC1B>:
void Servo_Direction_Pin_OC1B(double DEGREE)
{
    3704:	0f 93       	push	r16
    3706:	1f 93       	push	r17
    3708:	df 93       	push	r29
    370a:	cf 93       	push	r28
    370c:	00 d0       	rcall	.+0      	; 0x370e <Servo_Direction_Pin_OC1B+0xa>
    370e:	00 d0       	rcall	.+0      	; 0x3710 <Servo_Direction_Pin_OC1B+0xc>
    3710:	cd b7       	in	r28, 0x3d	; 61
    3712:	de b7       	in	r29, 0x3e	; 62
    3714:	69 83       	std	Y+1, r22	; 0x01
    3716:	7a 83       	std	Y+2, r23	; 0x02
    3718:	8b 83       	std	Y+3, r24	; 0x03
    371a:	9c 83       	std	Y+4, r25	; 0x04
	/* select fast PWM mode */
	CLEAR_BIT(TCCR1A, WGM10);
    371c:	af e4       	ldi	r26, 0x4F	; 79
    371e:	b0 e0       	ldi	r27, 0x00	; 0
    3720:	ef e4       	ldi	r30, 0x4F	; 79
    3722:	f0 e0       	ldi	r31, 0x00	; 0
    3724:	80 81       	ld	r24, Z
    3726:	8e 7f       	andi	r24, 0xFE	; 254
    3728:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
    372a:	af e4       	ldi	r26, 0x4F	; 79
    372c:	b0 e0       	ldi	r27, 0x00	; 0
    372e:	ef e4       	ldi	r30, 0x4F	; 79
    3730:	f0 e0       	ldi	r31, 0x00	; 0
    3732:	80 81       	ld	r24, Z
    3734:	82 60       	ori	r24, 0x02	; 2
    3736:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
    3738:	ae e4       	ldi	r26, 0x4E	; 78
    373a:	b0 e0       	ldi	r27, 0x00	; 0
    373c:	ee e4       	ldi	r30, 0x4E	; 78
    373e:	f0 e0       	ldi	r31, 0x00	; 0
    3740:	80 81       	ld	r24, Z
    3742:	88 60       	ori	r24, 0x08	; 8
    3744:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM13);
    3746:	ae e4       	ldi	r26, 0x4E	; 78
    3748:	b0 e0       	ldi	r27, 0x00	; 0
    374a:	ee e4       	ldi	r30, 0x4E	; 78
    374c:	f0 e0       	ldi	r31, 0x00	; 0
    374e:	80 81       	ld	r24, Z
    3750:	80 61       	ori	r24, 0x10	; 16
    3752:	8c 93       	st	X, r24
	/* load a value in OCR1B, ICR1 */
	OCR1B = 1000 + (DEGREE*1000)/180;
    3754:	08 e4       	ldi	r16, 0x48	; 72
    3756:	10 e0       	ldi	r17, 0x00	; 0
    3758:	69 81       	ldd	r22, Y+1	; 0x01
    375a:	7a 81       	ldd	r23, Y+2	; 0x02
    375c:	8b 81       	ldd	r24, Y+3	; 0x03
    375e:	9c 81       	ldd	r25, Y+4	; 0x04
    3760:	20 e0       	ldi	r18, 0x00	; 0
    3762:	30 e0       	ldi	r19, 0x00	; 0
    3764:	4a e7       	ldi	r20, 0x7A	; 122
    3766:	54 e4       	ldi	r21, 0x44	; 68
    3768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    376c:	dc 01       	movw	r26, r24
    376e:	cb 01       	movw	r24, r22
    3770:	bc 01       	movw	r22, r24
    3772:	cd 01       	movw	r24, r26
    3774:	20 e0       	ldi	r18, 0x00	; 0
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	44 e3       	ldi	r20, 0x34	; 52
    377a:	53 e4       	ldi	r21, 0x43	; 67
    377c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3780:	dc 01       	movw	r26, r24
    3782:	cb 01       	movw	r24, r22
    3784:	bc 01       	movw	r22, r24
    3786:	cd 01       	movw	r24, r26
    3788:	20 e0       	ldi	r18, 0x00	; 0
    378a:	30 e0       	ldi	r19, 0x00	; 0
    378c:	4a e7       	ldi	r20, 0x7A	; 122
    378e:	54 e4       	ldi	r21, 0x44	; 68
    3790:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3794:	dc 01       	movw	r26, r24
    3796:	cb 01       	movw	r24, r22
    3798:	bc 01       	movw	r22, r24
    379a:	cd 01       	movw	r24, r26
    379c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a0:	dc 01       	movw	r26, r24
    37a2:	cb 01       	movw	r24, r22
    37a4:	f8 01       	movw	r30, r16
    37a6:	91 83       	std	Z+1, r25	; 0x01
    37a8:	80 83       	st	Z, r24
	ICR1 = 20000;
    37aa:	e6 e4       	ldi	r30, 0x46	; 70
    37ac:	f0 e0       	ldi	r31, 0x00	; 0
    37ae:	80 e2       	ldi	r24, 0x20	; 32
    37b0:	9e e4       	ldi	r25, 0x4E	; 78
    37b2:	91 83       	std	Z+1, r25	; 0x01
    37b4:	80 83       	st	Z, r24

	/* select timer clock, Divide by 8 , F_timer1 = 1 MHZ */
	CLEAR_BIT(TCCR1B,CS10);
    37b6:	ae e4       	ldi	r26, 0x4E	; 78
    37b8:	b0 e0       	ldi	r27, 0x00	; 0
    37ba:	ee e4       	ldi	r30, 0x4E	; 78
    37bc:	f0 e0       	ldi	r31, 0x00	; 0
    37be:	80 81       	ld	r24, Z
    37c0:	8e 7f       	andi	r24, 0xFE	; 254
    37c2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS11);
    37c4:	ae e4       	ldi	r26, 0x4E	; 78
    37c6:	b0 e0       	ldi	r27, 0x00	; 0
    37c8:	ee e4       	ldi	r30, 0x4E	; 78
    37ca:	f0 e0       	ldi	r31, 0x00	; 0
    37cc:	80 81       	ld	r24, Z
    37ce:	82 60       	ori	r24, 0x02	; 2
    37d0:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS12);
    37d2:	ae e4       	ldi	r26, 0x4E	; 78
    37d4:	b0 e0       	ldi	r27, 0x00	; 0
    37d6:	ee e4       	ldi	r30, 0x4E	; 78
    37d8:	f0 e0       	ldi	r31, 0x00	; 0
    37da:	80 81       	ld	r24, Z
    37dc:	8b 7f       	andi	r24, 0xFB	; 251
    37de:	8c 93       	st	X, r24

	/* clear OC1A on compare match, set OC1A at BOTTOM (non-inverting mode) */
	CLEAR_BIT(TCCR1A, COM1B0);
    37e0:	af e4       	ldi	r26, 0x4F	; 79
    37e2:	b0 e0       	ldi	r27, 0x00	; 0
    37e4:	ef e4       	ldi	r30, 0x4F	; 79
    37e6:	f0 e0       	ldi	r31, 0x00	; 0
    37e8:	80 81       	ld	r24, Z
    37ea:	8f 7e       	andi	r24, 0xEF	; 239
    37ec:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1B1);
    37ee:	af e4       	ldi	r26, 0x4F	; 79
    37f0:	b0 e0       	ldi	r27, 0x00	; 0
    37f2:	ef e4       	ldi	r30, 0x4F	; 79
    37f4:	f0 e0       	ldi	r31, 0x00	; 0
    37f6:	80 81       	ld	r24, Z
    37f8:	80 62       	ori	r24, 0x20	; 32
    37fa:	8c 93       	st	X, r24
}
    37fc:	0f 90       	pop	r0
    37fe:	0f 90       	pop	r0
    3800:	0f 90       	pop	r0
    3802:	0f 90       	pop	r0
    3804:	cf 91       	pop	r28
    3806:	df 91       	pop	r29
    3808:	1f 91       	pop	r17
    380a:	0f 91       	pop	r16
    380c:	08 95       	ret

0000380e <Servo_vInit_Pin_OC0>:

void Servo_vInit_Pin_OC0()
{
    380e:	df 93       	push	r29
    3810:	cf 93       	push	r28
    3812:	cd b7       	in	r28, 0x3d	; 61
    3814:	de b7       	in	r29, 0x3e	; 62
	DIO_Set_Pin_Direction(PORT_B,PIN_NO_3,OUTPUT);
    3816:	82 e4       	ldi	r24, 0x42	; 66
    3818:	63 e0       	ldi	r22, 0x03	; 3
    381a:	41 e0       	ldi	r20, 0x01	; 1
    381c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
}
    3820:	cf 91       	pop	r28
    3822:	df 91       	pop	r29
    3824:	08 95       	ret

00003826 <Servo_Direction_Pin_OC0>:

void Servo_Direction_Pin_OC0(u8 DEGREE) {
    3826:	df 93       	push	r29
    3828:	cf 93       	push	r28
    382a:	00 d0       	rcall	.+0      	; 0x382c <Servo_Direction_Pin_OC0+0x6>
    382c:	0f 92       	push	r0
    382e:	cd b7       	in	r28, 0x3d	; 61
    3830:	de b7       	in	r29, 0x3e	; 62
    3832:	89 83       	std	Y+1, r24	; 0x01
	switch(DEGREE)
    3834:	89 81       	ldd	r24, Y+1	; 0x01
    3836:	28 2f       	mov	r18, r24
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	3b 83       	std	Y+3, r19	; 0x03
    383c:	2a 83       	std	Y+2, r18	; 0x02
    383e:	8a 81       	ldd	r24, Y+2	; 0x02
    3840:	9b 81       	ldd	r25, Y+3	; 0x03
    3842:	8a 35       	cpi	r24, 0x5A	; 90
    3844:	91 05       	cpc	r25, r1
    3846:	69 f0       	breq	.+26     	; 0x3862 <Servo_Direction_Pin_OC0+0x3c>
    3848:	2a 81       	ldd	r18, Y+2	; 0x02
    384a:	3b 81       	ldd	r19, Y+3	; 0x03
    384c:	24 3b       	cpi	r18, 0xB4	; 180
    384e:	31 05       	cpc	r19, r1
    3850:	61 f0       	breq	.+24     	; 0x386a <Servo_Direction_Pin_OC0+0x44>
    3852:	8a 81       	ldd	r24, Y+2	; 0x02
    3854:	9b 81       	ldd	r25, Y+3	; 0x03
    3856:	00 97       	sbiw	r24, 0x00	; 0
    3858:	59 f4       	brne	.+22     	; 0x3870 <Servo_Direction_Pin_OC0+0x4a>
	{
	case 0:
		Timer0_Set_FastPWM_Mode(6);
    385a:	86 e0       	ldi	r24, 0x06	; 6
    385c:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <Timer0_Set_FastPWM_Mode>
    3860:	07 c0       	rjmp	.+14     	; 0x3870 <Servo_Direction_Pin_OC0+0x4a>
		break;
	case 90:
		Timer0_Set_FastPWM_Mode(11);
    3862:	8b e0       	ldi	r24, 0x0B	; 11
    3864:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <Timer0_Set_FastPWM_Mode>
    3868:	03 c0       	rjmp	.+6      	; 0x3870 <Servo_Direction_Pin_OC0+0x4a>
		break;
	case 180:
		Timer0_Set_FastPWM_Mode(16);
    386a:	80 e1       	ldi	r24, 0x10	; 16
    386c:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <Timer0_Set_FastPWM_Mode>
		break;
	}
}
    3870:	0f 90       	pop	r0
    3872:	0f 90       	pop	r0
    3874:	0f 90       	pop	r0
    3876:	cf 91       	pop	r28
    3878:	df 91       	pop	r29
    387a:	08 95       	ret

0000387c <Timer0_Set_Clk>:
/*====================================================================================*/
/* Timer0 Funtions */
/*====================================================================================*/

void Timer0_Set_Clk()
{
    387c:	df 93       	push	r29
    387e:	cf 93       	push	r28
    3880:	cd b7       	in	r28, 0x3d	; 61
    3882:	de b7       	in	r29, 0x3e	; 62
#elif TIMER0_DIVIDE_CLK_BY_256
	CLEAR_BIT(TCCR0,CS00);
	CLEAR_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS02);
#elif TIMER0_DIVIDE_CLK_BY_1024
	SET_BIT(TCCR0,CS00);
    3884:	a3 e5       	ldi	r26, 0x53	; 83
    3886:	b0 e0       	ldi	r27, 0x00	; 0
    3888:	e3 e5       	ldi	r30, 0x53	; 83
    388a:	f0 e0       	ldi	r31, 0x00	; 0
    388c:	80 81       	ld	r24, Z
    388e:	81 60       	ori	r24, 0x01	; 1
    3890:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS01);
    3892:	a3 e5       	ldi	r26, 0x53	; 83
    3894:	b0 e0       	ldi	r27, 0x00	; 0
    3896:	e3 e5       	ldi	r30, 0x53	; 83
    3898:	f0 e0       	ldi	r31, 0x00	; 0
    389a:	80 81       	ld	r24, Z
    389c:	8d 7f       	andi	r24, 0xFD	; 253
    389e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
    38a0:	a3 e5       	ldi	r26, 0x53	; 83
    38a2:	b0 e0       	ldi	r27, 0x00	; 0
    38a4:	e3 e5       	ldi	r30, 0x53	; 83
    38a6:	f0 e0       	ldi	r31, 0x00	; 0
    38a8:	80 81       	ld	r24, Z
    38aa:	84 60       	ori	r24, 0x04	; 4
    38ac:	8c 93       	st	X, r24
#endif
}
    38ae:	cf 91       	pop	r28
    38b0:	df 91       	pop	r29
    38b2:	08 95       	ret

000038b4 <Timer0_Stop_Count>:
void Timer0_Stop_Count()
{
    38b4:	df 93       	push	r29
    38b6:	cf 93       	push	r28
    38b8:	cd b7       	in	r28, 0x3d	; 61
    38ba:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR0,CS00);
    38bc:	a3 e5       	ldi	r26, 0x53	; 83
    38be:	b0 e0       	ldi	r27, 0x00	; 0
    38c0:	e3 e5       	ldi	r30, 0x53	; 83
    38c2:	f0 e0       	ldi	r31, 0x00	; 0
    38c4:	80 81       	ld	r24, Z
    38c6:	8e 7f       	andi	r24, 0xFE	; 254
    38c8:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS01);
    38ca:	a3 e5       	ldi	r26, 0x53	; 83
    38cc:	b0 e0       	ldi	r27, 0x00	; 0
    38ce:	e3 e5       	ldi	r30, 0x53	; 83
    38d0:	f0 e0       	ldi	r31, 0x00	; 0
    38d2:	80 81       	ld	r24, Z
    38d4:	8d 7f       	andi	r24, 0xFD	; 253
    38d6:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,CS02);
    38d8:	a3 e5       	ldi	r26, 0x53	; 83
    38da:	b0 e0       	ldi	r27, 0x00	; 0
    38dc:	e3 e5       	ldi	r30, 0x53	; 83
    38de:	f0 e0       	ldi	r31, 0x00	; 0
    38e0:	80 81       	ld	r24, Z
    38e2:	8b 7f       	andi	r24, 0xFB	; 251
    38e4:	8c 93       	st	X, r24
}
    38e6:	cf 91       	pop	r28
    38e8:	df 91       	pop	r29
    38ea:	08 95       	ret

000038ec <Timer0_Start_Count>:
void Timer0_Start_Count()
{
    38ec:	df 93       	push	r29
    38ee:	cf 93       	push	r28
    38f0:	cd b7       	in	r28, 0x3d	; 61
    38f2:	de b7       	in	r29, 0x3e	; 62
	Timer0_Set_Clk();
    38f4:	0e 94 3e 1c 	call	0x387c	; 0x387c <Timer0_Set_Clk>
}
    38f8:	cf 91       	pop	r28
    38fa:	df 91       	pop	r29
    38fc:	08 95       	ret

000038fe <Timer0_Pin_T0_Sense>:
void Timer0_Pin_T0_Sense()
{
    38fe:	df 93       	push	r29
    3900:	cf 93       	push	r28
    3902:	cd b7       	in	r28, 0x3d	; 61
    3904:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_EXTERNAL_FALLING_EDGE
	CLEAR_BIT(TCCR0,CS00);
	SET_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS02);
#elif TIMER0_EXTERNAL_RISING_EDGE
	SET_BIT(TCCR0,CS00);
    3906:	a3 e5       	ldi	r26, 0x53	; 83
    3908:	b0 e0       	ldi	r27, 0x00	; 0
    390a:	e3 e5       	ldi	r30, 0x53	; 83
    390c:	f0 e0       	ldi	r31, 0x00	; 0
    390e:	80 81       	ld	r24, Z
    3910:	81 60       	ori	r24, 0x01	; 1
    3912:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    3914:	a3 e5       	ldi	r26, 0x53	; 83
    3916:	b0 e0       	ldi	r27, 0x00	; 0
    3918:	e3 e5       	ldi	r30, 0x53	; 83
    391a:	f0 e0       	ldi	r31, 0x00	; 0
    391c:	80 81       	ld	r24, Z
    391e:	82 60       	ori	r24, 0x02	; 2
    3920:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS02);
    3922:	a3 e5       	ldi	r26, 0x53	; 83
    3924:	b0 e0       	ldi	r27, 0x00	; 0
    3926:	e3 e5       	ldi	r30, 0x53	; 83
    3928:	f0 e0       	ldi	r31, 0x00	; 0
    392a:	80 81       	ld	r24, Z
    392c:	84 60       	ori	r24, 0x04	; 4
    392e:	8c 93       	st	X, r24
#endif
}
    3930:	cf 91       	pop	r28
    3932:	df 91       	pop	r29
    3934:	08 95       	ret

00003936 <Timer0_Set_OverFlow_Mode>:
void Timer0_Set_OverFlow_Mode()
{
    3936:	df 93       	push	r29
    3938:	cf 93       	push	r28
    393a:	cd b7       	in	r28, 0x3d	; 61
    393c:	de b7       	in	r29, 0x3e	; 62
	/* Set the Timer Mode to overflow mode */
	CLEAR_BIT(TCCR0,WGM00);
    393e:	a3 e5       	ldi	r26, 0x53	; 83
    3940:	b0 e0       	ldi	r27, 0x00	; 0
    3942:	e3 e5       	ldi	r30, 0x53	; 83
    3944:	f0 e0       	ldi	r31, 0x00	; 0
    3946:	80 81       	ld	r24, Z
    3948:	8f 7b       	andi	r24, 0xBF	; 191
    394a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,WGM01);
    394c:	a3 e5       	ldi	r26, 0x53	; 83
    394e:	b0 e0       	ldi	r27, 0x00	; 0
    3950:	e3 e5       	ldi	r30, 0x53	; 83
    3952:	f0 e0       	ldi	r31, 0x00	; 0
    3954:	80 81       	ld	r24, Z
    3956:	87 7f       	andi	r24, 0xF7	; 247
    3958:	8c 93       	st	X, r24
	/* Set Global Interrupt */
	Set_Global_Interrupt();
    395a:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <Set_Global_Interrupt>
	/* Set TOIE0 BIT */
	SET_BIT(TIMSK,TOIE0);
    395e:	a9 e5       	ldi	r26, 0x59	; 89
    3960:	b0 e0       	ldi	r27, 0x00	; 0
    3962:	e9 e5       	ldi	r30, 0x59	; 89
    3964:	f0 e0       	ldi	r31, 0x00	; 0
    3966:	80 81       	ld	r24, Z
    3968:	81 60       	ori	r24, 0x01	; 1
    396a:	8c 93       	st	X, r24
	/* Set the Timer Clk */
	Timer0_Start_Count();
    396c:	0e 94 76 1c 	call	0x38ec	; 0x38ec <Timer0_Start_Count>
}
    3970:	cf 91       	pop	r28
    3972:	df 91       	pop	r29
    3974:	08 95       	ret

00003976 <Timer0_Set_CTC_Mode>:
void Timer0_Set_CTC_Mode(u8 OCRO_VALUE)
{
    3976:	df 93       	push	r29
    3978:	cf 93       	push	r28
    397a:	0f 92       	push	r0
    397c:	cd b7       	in	r28, 0x3d	; 61
    397e:	de b7       	in	r29, 0x3e	; 62
    3980:	89 83       	std	Y+1, r24	; 0x01
	/* Set the Timer Mode to CTC mode */
	CLEAR_BIT(TCCR0,WGM00);
    3982:	a3 e5       	ldi	r26, 0x53	; 83
    3984:	b0 e0       	ldi	r27, 0x00	; 0
    3986:	e3 e5       	ldi	r30, 0x53	; 83
    3988:	f0 e0       	ldi	r31, 0x00	; 0
    398a:	80 81       	ld	r24, Z
    398c:	8f 7b       	andi	r24, 0xBF	; 191
    398e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    3990:	a3 e5       	ldi	r26, 0x53	; 83
    3992:	b0 e0       	ldi	r27, 0x00	; 0
    3994:	e3 e5       	ldi	r30, 0x53	; 83
    3996:	f0 e0       	ldi	r31, 0x00	; 0
    3998:	80 81       	ld	r24, Z
    399a:	88 60       	ori	r24, 0x08	; 8
    399c:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0 = OCRO_VALUE;
    399e:	ec e5       	ldi	r30, 0x5C	; 92
    39a0:	f0 e0       	ldi	r31, 0x00	; 0
    39a2:	89 81       	ldd	r24, Y+1	; 0x01
    39a4:	80 83       	st	Z, r24
	/* Set Global Interrupt */
	Set_Global_Interrupt();
    39a6:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <Set_Global_Interrupt>
	/* Set OCIE0 BIT */
	SET_BIT(TIMSK,OCIE0);
    39aa:	a9 e5       	ldi	r26, 0x59	; 89
    39ac:	b0 e0       	ldi	r27, 0x00	; 0
    39ae:	e9 e5       	ldi	r30, 0x59	; 89
    39b0:	f0 e0       	ldi	r31, 0x00	; 0
    39b2:	80 81       	ld	r24, Z
    39b4:	82 60       	ori	r24, 0x02	; 2
    39b6:	8c 93       	st	X, r24
	/* Set the Timer Clk */
	Timer0_Start_Count();
    39b8:	0e 94 76 1c 	call	0x38ec	; 0x38ec <Timer0_Start_Count>
}
    39bc:	0f 90       	pop	r0
    39be:	cf 91       	pop	r28
    39c0:	df 91       	pop	r29
    39c2:	08 95       	ret

000039c4 <Timer0_CTC_Generate_Signal>:
void Timer0_CTC_Generate_Signal(u8 OCRO_VALUE)
{
    39c4:	df 93       	push	r29
    39c6:	cf 93       	push	r28
    39c8:	0f 92       	push	r0
    39ca:	cd b7       	in	r28, 0x3d	; 61
    39cc:	de b7       	in	r29, 0x3e	; 62
    39ce:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_B,PIN_NO_3,OUTPUT);
    39d0:	82 e4       	ldi	r24, 0x42	; 66
    39d2:	63 e0       	ldi	r22, 0x03	; 3
    39d4:	41 e0       	ldi	r20, 0x01	; 1
    39d6:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to CTC mode */
	CLEAR_BIT(TCCR0,WGM00);
    39da:	a3 e5       	ldi	r26, 0x53	; 83
    39dc:	b0 e0       	ldi	r27, 0x00	; 0
    39de:	e3 e5       	ldi	r30, 0x53	; 83
    39e0:	f0 e0       	ldi	r31, 0x00	; 0
    39e2:	80 81       	ld	r24, Z
    39e4:	8f 7b       	andi	r24, 0xBF	; 191
    39e6:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    39e8:	a3 e5       	ldi	r26, 0x53	; 83
    39ea:	b0 e0       	ldi	r27, 0x00	; 0
    39ec:	e3 e5       	ldi	r30, 0x53	; 83
    39ee:	f0 e0       	ldi	r31, 0x00	; 0
    39f0:	80 81       	ld	r24, Z
    39f2:	88 60       	ori	r24, 0x08	; 8
    39f4:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0 = OCRO_VALUE;
    39f6:	ec e5       	ldi	r30, 0x5C	; 92
    39f8:	f0 e0       	ldi	r31, 0x00	; 0
    39fa:	89 81       	ldd	r24, Y+1	; 0x01
    39fc:	80 83       	st	Z, r24
	/* Set Signal to be Toggle at Compare Match*/
	/* Pin PB3 ( OCO ) */
	SET_BIT(TCCR0,COM00);
    39fe:	a3 e5       	ldi	r26, 0x53	; 83
    3a00:	b0 e0       	ldi	r27, 0x00	; 0
    3a02:	e3 e5       	ldi	r30, 0x53	; 83
    3a04:	f0 e0       	ldi	r31, 0x00	; 0
    3a06:	80 81       	ld	r24, Z
    3a08:	80 61       	ori	r24, 0x10	; 16
    3a0a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,COM01);
    3a0c:	a3 e5       	ldi	r26, 0x53	; 83
    3a0e:	b0 e0       	ldi	r27, 0x00	; 0
    3a10:	e3 e5       	ldi	r30, 0x53	; 83
    3a12:	f0 e0       	ldi	r31, 0x00	; 0
    3a14:	80 81       	ld	r24, Z
    3a16:	8f 7d       	andi	r24, 0xDF	; 223
    3a18:	8c 93       	st	X, r24
	/* Set the Timer Clk */
	Timer0_Start_Count();
    3a1a:	0e 94 76 1c 	call	0x38ec	; 0x38ec <Timer0_Start_Count>
}
    3a1e:	0f 90       	pop	r0
    3a20:	cf 91       	pop	r28
    3a22:	df 91       	pop	r29
    3a24:	08 95       	ret

00003a26 <Timer0_Set_FastPWM_Mode>:
void Timer0_Set_FastPWM_Mode(u8 OCRO_VALUE)
{
    3a26:	df 93       	push	r29
    3a28:	cf 93       	push	r28
    3a2a:	0f 92       	push	r0
    3a2c:	cd b7       	in	r28, 0x3d	; 61
    3a2e:	de b7       	in	r29, 0x3e	; 62
    3a30:	89 83       	std	Y+1, r24	; 0x01
	//DIO_Set_Pin_Direction(PORT_B,PIN_NO_3,OUTPUT);
	/* Set the Timer Mode to Fast PWM mode */
	SET_BIT(TCCR0,WGM00);
    3a32:	a3 e5       	ldi	r26, 0x53	; 83
    3a34:	b0 e0       	ldi	r27, 0x00	; 0
    3a36:	e3 e5       	ldi	r30, 0x53	; 83
    3a38:	f0 e0       	ldi	r31, 0x00	; 0
    3a3a:	80 81       	ld	r24, Z
    3a3c:	80 64       	ori	r24, 0x40	; 64
    3a3e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    3a40:	a3 e5       	ldi	r26, 0x53	; 83
    3a42:	b0 e0       	ldi	r27, 0x00	; 0
    3a44:	e3 e5       	ldi	r30, 0x53	; 83
    3a46:	f0 e0       	ldi	r31, 0x00	; 0
    3a48:	80 81       	ld	r24, Z
    3a4a:	88 60       	ori	r24, 0x08	; 8
    3a4c:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0 = OCRO_VALUE;
    3a4e:	ec e5       	ldi	r30, 0x5C	; 92
    3a50:	f0 e0       	ldi	r31, 0x00	; 0
    3a52:	89 81       	ldd	r24, Y+1	; 0x01
    3a54:	80 83       	st	Z, r24
	/* Set the Timer Clk */
	Timer0_Set_Clk();
    3a56:	0e 94 3e 1c 	call	0x387c	; 0x387c <Timer0_Set_Clk>
	/* Set PWM On / Off  */
#if TIMER0_SET_OCO_ON_BOTTOM
	CLEAR_BIT(TCCR0,COM00);
    3a5a:	a3 e5       	ldi	r26, 0x53	; 83
    3a5c:	b0 e0       	ldi	r27, 0x00	; 0
    3a5e:	e3 e5       	ldi	r30, 0x53	; 83
    3a60:	f0 e0       	ldi	r31, 0x00	; 0
    3a62:	80 81       	ld	r24, Z
    3a64:	8f 7e       	andi	r24, 0xEF	; 239
    3a66:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
    3a68:	a3 e5       	ldi	r26, 0x53	; 83
    3a6a:	b0 e0       	ldi	r27, 0x00	; 0
    3a6c:	e3 e5       	ldi	r30, 0x53	; 83
    3a6e:	f0 e0       	ldi	r31, 0x00	; 0
    3a70:	80 81       	ld	r24, Z
    3a72:	80 62       	ori	r24, 0x20	; 32
    3a74:	8c 93       	st	X, r24
#elif TIMER0_SET_OCO_ON_COMPARE_MATCH
	SET_BIT(TCCR0,COM00);
	SET_BIT(TCCR0,COM01);
#endif
}
    3a76:	0f 90       	pop	r0
    3a78:	cf 91       	pop	r28
    3a7a:	df 91       	pop	r29
    3a7c:	08 95       	ret

00003a7e <PWM_Timer0_Generate>:
void PWM_Timer0_Generate(u8 SPEED_PERCENT)
{
    3a7e:	df 93       	push	r29
    3a80:	cf 93       	push	r28
    3a82:	0f 92       	push	r0
    3a84:	cd b7       	in	r28, 0x3d	; 61
    3a86:	de b7       	in	r29, 0x3e	; 62
    3a88:	89 83       	std	Y+1, r24	; 0x01
	Timer0_Set_FastPWM_Mode((SPEED_PERCENT * 2.55));
    3a8a:	89 81       	ldd	r24, Y+1	; 0x01
    3a8c:	88 2f       	mov	r24, r24
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	aa 27       	eor	r26, r26
    3a92:	97 fd       	sbrc	r25, 7
    3a94:	a0 95       	com	r26
    3a96:	ba 2f       	mov	r27, r26
    3a98:	bc 01       	movw	r22, r24
    3a9a:	cd 01       	movw	r24, r26
    3a9c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3aa0:	dc 01       	movw	r26, r24
    3aa2:	cb 01       	movw	r24, r22
    3aa4:	bc 01       	movw	r22, r24
    3aa6:	cd 01       	movw	r24, r26
    3aa8:	23 e3       	ldi	r18, 0x33	; 51
    3aaa:	33 e3       	ldi	r19, 0x33	; 51
    3aac:	43 e2       	ldi	r20, 0x23	; 35
    3aae:	50 e4       	ldi	r21, 0x40	; 64
    3ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab4:	dc 01       	movw	r26, r24
    3ab6:	cb 01       	movw	r24, r22
    3ab8:	bc 01       	movw	r22, r24
    3aba:	cd 01       	movw	r24, r26
    3abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac0:	dc 01       	movw	r26, r24
    3ac2:	cb 01       	movw	r24, r22
    3ac4:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <Timer0_Set_FastPWM_Mode>
}
    3ac8:	0f 90       	pop	r0
    3aca:	cf 91       	pop	r28
    3acc:	df 91       	pop	r29
    3ace:	08 95       	ret

00003ad0 <Timer0_Set_PhaseCorrect_PWM_Mode>:
void Timer0_Set_PhaseCorrect_PWM_Mode(u8 OCRO_VALUE)
{
    3ad0:	df 93       	push	r29
    3ad2:	cf 93       	push	r28
    3ad4:	0f 92       	push	r0
    3ad6:	cd b7       	in	r28, 0x3d	; 61
    3ad8:	de b7       	in	r29, 0x3e	; 62
    3ada:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_B,PIN_NO_3,OUTPUT);
    3adc:	82 e4       	ldi	r24, 0x42	; 66
    3ade:	63 e0       	ldi	r22, 0x03	; 3
    3ae0:	41 e0       	ldi	r20, 0x01	; 1
    3ae2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to Phase Correct PWM mode */
	SET_BIT(TCCR0,WGM00);
    3ae6:	a3 e5       	ldi	r26, 0x53	; 83
    3ae8:	b0 e0       	ldi	r27, 0x00	; 0
    3aea:	e3 e5       	ldi	r30, 0x53	; 83
    3aec:	f0 e0       	ldi	r31, 0x00	; 0
    3aee:	80 81       	ld	r24, Z
    3af0:	80 64       	ori	r24, 0x40	; 64
    3af2:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0,WGM01);
    3af4:	a3 e5       	ldi	r26, 0x53	; 83
    3af6:	b0 e0       	ldi	r27, 0x00	; 0
    3af8:	e3 e5       	ldi	r30, 0x53	; 83
    3afa:	f0 e0       	ldi	r31, 0x00	; 0
    3afc:	80 81       	ld	r24, Z
    3afe:	87 7f       	andi	r24, 0xF7	; 247
    3b00:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR0 = OCRO_VALUE;
    3b02:	ec e5       	ldi	r30, 0x5C	; 92
    3b04:	f0 e0       	ldi	r31, 0x00	; 0
    3b06:	89 81       	ldd	r24, Y+1	; 0x01
    3b08:	80 83       	st	Z, r24
	/* Set the Timer Clk */
	Timer0_Set_Clk();
    3b0a:	0e 94 3e 1c 	call	0x387c	; 0x387c <Timer0_Set_Clk>
#if TIMER0_SET_OCO_ON_DOWN_COUNTING
	CLEAR_BIT(TCCR0,COM00);
    3b0e:	a3 e5       	ldi	r26, 0x53	; 83
    3b10:	b0 e0       	ldi	r27, 0x00	; 0
    3b12:	e3 e5       	ldi	r30, 0x53	; 83
    3b14:	f0 e0       	ldi	r31, 0x00	; 0
    3b16:	80 81       	ld	r24, Z
    3b18:	8f 7e       	andi	r24, 0xEF	; 239
    3b1a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
    3b1c:	a3 e5       	ldi	r26, 0x53	; 83
    3b1e:	b0 e0       	ldi	r27, 0x00	; 0
    3b20:	e3 e5       	ldi	r30, 0x53	; 83
    3b22:	f0 e0       	ldi	r31, 0x00	; 0
    3b24:	80 81       	ld	r24, Z
    3b26:	80 62       	ori	r24, 0x20	; 32
    3b28:	8c 93       	st	X, r24
#elif TIMER0_SET_OCO_ON_UP_COUNTING
	SET_BIT(TCCR0,COM00);
	SET_BIT(TCCR0,COM01);
#endif
}
    3b2a:	0f 90       	pop	r0
    3b2c:	cf 91       	pop	r28
    3b2e:	df 91       	pop	r29
    3b30:	08 95       	ret

00003b32 <Timer0_Clear_TCNT0>:
void Timer0_Clear_TCNT0()
{
    3b32:	df 93       	push	r29
    3b34:	cf 93       	push	r28
    3b36:	cd b7       	in	r28, 0x3d	; 61
    3b38:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
    3b3a:	e2 e5       	ldi	r30, 0x52	; 82
    3b3c:	f0 e0       	ldi	r31, 0x00	; 0
    3b3e:	10 82       	st	Z, r1
}
    3b40:	cf 91       	pop	r28
    3b42:	df 91       	pop	r29
    3b44:	08 95       	ret

00003b46 <Timer1_Set_Clk>:
/*====================================================================================*/
/* Timer 1 Functions*/
/*====================================================================================*/

void Timer1_Set_Clk()
{
    3b46:	df 93       	push	r29
    3b48:	cf 93       	push	r28
    3b4a:	cd b7       	in	r28, 0x3d	; 61
    3b4c:	de b7       	in	r29, 0x3e	; 62
#elif TIMER1_DIVIDE_CLK_BY_256
	CLEAR_BIT(TCCR1B,CS10);
	CLEAR_BIT(TCCR1B,CS11);
	SET_BIT(TCCR1B,CS12);
#elif TIMER1_DIVIDE_CLK_BY_1024
	SET_BIT(TCCR1B,CS10);
    3b4e:	ae e4       	ldi	r26, 0x4E	; 78
    3b50:	b0 e0       	ldi	r27, 0x00	; 0
    3b52:	ee e4       	ldi	r30, 0x4E	; 78
    3b54:	f0 e0       	ldi	r31, 0x00	; 0
    3b56:	80 81       	ld	r24, Z
    3b58:	81 60       	ori	r24, 0x01	; 1
    3b5a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS11);
    3b5c:	ae e4       	ldi	r26, 0x4E	; 78
    3b5e:	b0 e0       	ldi	r27, 0x00	; 0
    3b60:	ee e4       	ldi	r30, 0x4E	; 78
    3b62:	f0 e0       	ldi	r31, 0x00	; 0
    3b64:	80 81       	ld	r24, Z
    3b66:	8d 7f       	andi	r24, 0xFD	; 253
    3b68:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS12);
    3b6a:	ae e4       	ldi	r26, 0x4E	; 78
    3b6c:	b0 e0       	ldi	r27, 0x00	; 0
    3b6e:	ee e4       	ldi	r30, 0x4E	; 78
    3b70:	f0 e0       	ldi	r31, 0x00	; 0
    3b72:	80 81       	ld	r24, Z
    3b74:	84 60       	ori	r24, 0x04	; 4
    3b76:	8c 93       	st	X, r24
#endif
}
    3b78:	cf 91       	pop	r28
    3b7a:	df 91       	pop	r29
    3b7c:	08 95       	ret

00003b7e <Timer1_Stop_Count>:
void Timer1_Stop_Count()
{
    3b7e:	df 93       	push	r29
    3b80:	cf 93       	push	r28
    3b82:	cd b7       	in	r28, 0x3d	; 61
    3b84:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR1B,CS10);
    3b86:	ae e4       	ldi	r26, 0x4E	; 78
    3b88:	b0 e0       	ldi	r27, 0x00	; 0
    3b8a:	ee e4       	ldi	r30, 0x4E	; 78
    3b8c:	f0 e0       	ldi	r31, 0x00	; 0
    3b8e:	80 81       	ld	r24, Z
    3b90:	8e 7f       	andi	r24, 0xFE	; 254
    3b92:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS11);
    3b94:	ae e4       	ldi	r26, 0x4E	; 78
    3b96:	b0 e0       	ldi	r27, 0x00	; 0
    3b98:	ee e4       	ldi	r30, 0x4E	; 78
    3b9a:	f0 e0       	ldi	r31, 0x00	; 0
    3b9c:	80 81       	ld	r24, Z
    3b9e:	8d 7f       	andi	r24, 0xFD	; 253
    3ba0:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,CS12);
    3ba2:	ae e4       	ldi	r26, 0x4E	; 78
    3ba4:	b0 e0       	ldi	r27, 0x00	; 0
    3ba6:	ee e4       	ldi	r30, 0x4E	; 78
    3ba8:	f0 e0       	ldi	r31, 0x00	; 0
    3baa:	80 81       	ld	r24, Z
    3bac:	8b 7f       	andi	r24, 0xFB	; 251
    3bae:	8c 93       	st	X, r24
}
    3bb0:	cf 91       	pop	r28
    3bb2:	df 91       	pop	r29
    3bb4:	08 95       	ret

00003bb6 <Timer1_Start_Count>:
void Timer1_Start_Count()
{
    3bb6:	df 93       	push	r29
    3bb8:	cf 93       	push	r28
    3bba:	cd b7       	in	r28, 0x3d	; 61
    3bbc:	de b7       	in	r29, 0x3e	; 62
	Timer1_Set_Clk();
    3bbe:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <Timer1_Set_Clk>
}
    3bc2:	cf 91       	pop	r28
    3bc4:	df 91       	pop	r29
    3bc6:	08 95       	ret

00003bc8 <Timer1_Pin_T1_Sense>:
void Timer1_Pin_T1_Sense()
{
    3bc8:	df 93       	push	r29
    3bca:	cf 93       	push	r28
    3bcc:	cd b7       	in	r28, 0x3d	; 61
    3bce:	de b7       	in	r29, 0x3e	; 62
#if TIMER1_EXTERNAL_FALLING_EDGE
	CLEAR_BIT(TCCR1B,CS10);
	SET_BIT(TCCR1B,CS11);
	SET_BIT(TCCR1B,CS12);
#elif TIMER1_EXTERNAL_RISING_EDGE
	SET_BIT(TCCR1B,CS10);
    3bd0:	ae e4       	ldi	r26, 0x4E	; 78
    3bd2:	b0 e0       	ldi	r27, 0x00	; 0
    3bd4:	ee e4       	ldi	r30, 0x4E	; 78
    3bd6:	f0 e0       	ldi	r31, 0x00	; 0
    3bd8:	80 81       	ld	r24, Z
    3bda:	81 60       	ori	r24, 0x01	; 1
    3bdc:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS11);
    3bde:	ae e4       	ldi	r26, 0x4E	; 78
    3be0:	b0 e0       	ldi	r27, 0x00	; 0
    3be2:	ee e4       	ldi	r30, 0x4E	; 78
    3be4:	f0 e0       	ldi	r31, 0x00	; 0
    3be6:	80 81       	ld	r24, Z
    3be8:	82 60       	ori	r24, 0x02	; 2
    3bea:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,CS12);
    3bec:	ae e4       	ldi	r26, 0x4E	; 78
    3bee:	b0 e0       	ldi	r27, 0x00	; 0
    3bf0:	ee e4       	ldi	r30, 0x4E	; 78
    3bf2:	f0 e0       	ldi	r31, 0x00	; 0
    3bf4:	80 81       	ld	r24, Z
    3bf6:	84 60       	ori	r24, 0x04	; 4
    3bf8:	8c 93       	st	X, r24
#endif
}
    3bfa:	cf 91       	pop	r28
    3bfc:	df 91       	pop	r29
    3bfe:	08 95       	ret

00003c00 <Timer1_Set_OverFlow_Mode>:
void Timer1_Set_OverFlow_Mode()
{
    3c00:	df 93       	push	r29
    3c02:	cf 93       	push	r28
    3c04:	cd b7       	in	r28, 0x3d	; 61
    3c06:	de b7       	in	r29, 0x3e	; 62
	/* Set the Timer Mode to overflow mode */
	CLEAR_BIT(TCCR1A,WGM10);
    3c08:	af e4       	ldi	r26, 0x4F	; 79
    3c0a:	b0 e0       	ldi	r27, 0x00	; 0
    3c0c:	ef e4       	ldi	r30, 0x4F	; 79
    3c0e:	f0 e0       	ldi	r31, 0x00	; 0
    3c10:	80 81       	ld	r24, Z
    3c12:	8e 7f       	andi	r24, 0xFE	; 254
    3c14:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,WGM11);
    3c16:	af e4       	ldi	r26, 0x4F	; 79
    3c18:	b0 e0       	ldi	r27, 0x00	; 0
    3c1a:	ef e4       	ldi	r30, 0x4F	; 79
    3c1c:	f0 e0       	ldi	r31, 0x00	; 0
    3c1e:	80 81       	ld	r24, Z
    3c20:	8d 7f       	andi	r24, 0xFD	; 253
    3c22:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM12);
    3c24:	ae e4       	ldi	r26, 0x4E	; 78
    3c26:	b0 e0       	ldi	r27, 0x00	; 0
    3c28:	ee e4       	ldi	r30, 0x4E	; 78
    3c2a:	f0 e0       	ldi	r31, 0x00	; 0
    3c2c:	80 81       	ld	r24, Z
    3c2e:	87 7f       	andi	r24, 0xF7	; 247
    3c30:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM13);
    3c32:	ae e4       	ldi	r26, 0x4E	; 78
    3c34:	b0 e0       	ldi	r27, 0x00	; 0
    3c36:	ee e4       	ldi	r30, 0x4E	; 78
    3c38:	f0 e0       	ldi	r31, 0x00	; 0
    3c3a:	80 81       	ld	r24, Z
    3c3c:	8f 7e       	andi	r24, 0xEF	; 239
    3c3e:	8c 93       	st	X, r24
	/* Set Global Interrupt */
	Set_Global_Interrupt();
    3c40:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <Set_Global_Interrupt>
	/* Set TOIE0 BIT */
	SET_BIT(TIMSK,TOIE1);
    3c44:	a9 e5       	ldi	r26, 0x59	; 89
    3c46:	b0 e0       	ldi	r27, 0x00	; 0
    3c48:	e9 e5       	ldi	r30, 0x59	; 89
    3c4a:	f0 e0       	ldi	r31, 0x00	; 0
    3c4c:	80 81       	ld	r24, Z
    3c4e:	84 60       	ori	r24, 0x04	; 4
    3c50:	8c 93       	st	X, r24
	/* Set the Timer Clk */
	Timer1_Start_Count();
    3c52:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <Timer1_Start_Count>
}
    3c56:	cf 91       	pop	r28
    3c58:	df 91       	pop	r29
    3c5a:	08 95       	ret

00003c5c <Timer1_Set_OCRA_CTC_Mode>:
void Timer1_Set_OCRA_CTC_Mode(u16 OCR1A_VALUE)
{
    3c5c:	df 93       	push	r29
    3c5e:	cf 93       	push	r28
    3c60:	00 d0       	rcall	.+0      	; 0x3c62 <Timer1_Set_OCRA_CTC_Mode+0x6>
    3c62:	cd b7       	in	r28, 0x3d	; 61
    3c64:	de b7       	in	r29, 0x3e	; 62
    3c66:	9a 83       	std	Y+2, r25	; 0x02
    3c68:	89 83       	std	Y+1, r24	; 0x01
	/* Set the Timer Mode to CTC A mode */
	CLEAR_BIT(TCCR1A,WGM10);
    3c6a:	af e4       	ldi	r26, 0x4F	; 79
    3c6c:	b0 e0       	ldi	r27, 0x00	; 0
    3c6e:	ef e4       	ldi	r30, 0x4F	; 79
    3c70:	f0 e0       	ldi	r31, 0x00	; 0
    3c72:	80 81       	ld	r24, Z
    3c74:	8e 7f       	andi	r24, 0xFE	; 254
    3c76:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,WGM11);
    3c78:	af e4       	ldi	r26, 0x4F	; 79
    3c7a:	b0 e0       	ldi	r27, 0x00	; 0
    3c7c:	ef e4       	ldi	r30, 0x4F	; 79
    3c7e:	f0 e0       	ldi	r31, 0x00	; 0
    3c80:	80 81       	ld	r24, Z
    3c82:	8d 7f       	andi	r24, 0xFD	; 253
    3c84:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    3c86:	ae e4       	ldi	r26, 0x4E	; 78
    3c88:	b0 e0       	ldi	r27, 0x00	; 0
    3c8a:	ee e4       	ldi	r30, 0x4E	; 78
    3c8c:	f0 e0       	ldi	r31, 0x00	; 0
    3c8e:	80 81       	ld	r24, Z
    3c90:	88 60       	ori	r24, 0x08	; 8
    3c92:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM13);
    3c94:	ae e4       	ldi	r26, 0x4E	; 78
    3c96:	b0 e0       	ldi	r27, 0x00	; 0
    3c98:	ee e4       	ldi	r30, 0x4E	; 78
    3c9a:	f0 e0       	ldi	r31, 0x00	; 0
    3c9c:	80 81       	ld	r24, Z
    3c9e:	8f 7e       	andi	r24, 0xEF	; 239
    3ca0:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR1A = OCR1A_VALUE;
    3ca2:	ea e4       	ldi	r30, 0x4A	; 74
    3ca4:	f0 e0       	ldi	r31, 0x00	; 0
    3ca6:	89 81       	ldd	r24, Y+1	; 0x01
    3ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    3caa:	91 83       	std	Z+1, r25	; 0x01
    3cac:	80 83       	st	Z, r24
	/* Set Global Interrupt */
	Set_Global_Interrupt();
    3cae:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <Set_Global_Interrupt>
	/* Set OCIE0 BIT */
	SET_BIT(TIMSK,OCIE1A);
    3cb2:	a9 e5       	ldi	r26, 0x59	; 89
    3cb4:	b0 e0       	ldi	r27, 0x00	; 0
    3cb6:	e9 e5       	ldi	r30, 0x59	; 89
    3cb8:	f0 e0       	ldi	r31, 0x00	; 0
    3cba:	80 81       	ld	r24, Z
    3cbc:	80 61       	ori	r24, 0x10	; 16
    3cbe:	8c 93       	st	X, r24
	/* Set the Timer Clk */
	Timer1_Start_Count();
    3cc0:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <Timer1_Start_Count>
}
    3cc4:	0f 90       	pop	r0
    3cc6:	0f 90       	pop	r0
    3cc8:	cf 91       	pop	r28
    3cca:	df 91       	pop	r29
    3ccc:	08 95       	ret

00003cce <Timer1_Set_ICR_CTC_Mode>:
void Timer1_Set_ICR_CTC_Mode(u16 ICR1_VALUE)
{
    3cce:	df 93       	push	r29
    3cd0:	cf 93       	push	r28
    3cd2:	00 d0       	rcall	.+0      	; 0x3cd4 <Timer1_Set_ICR_CTC_Mode+0x6>
    3cd4:	cd b7       	in	r28, 0x3d	; 61
    3cd6:	de b7       	in	r29, 0x3e	; 62
    3cd8:	9a 83       	std	Y+2, r25	; 0x02
    3cda:	89 83       	std	Y+1, r24	; 0x01
	/* Set the Timer Mode to CTC ICR mode */
	CLEAR_BIT(TCCR1A,WGM10);
    3cdc:	af e4       	ldi	r26, 0x4F	; 79
    3cde:	b0 e0       	ldi	r27, 0x00	; 0
    3ce0:	ef e4       	ldi	r30, 0x4F	; 79
    3ce2:	f0 e0       	ldi	r31, 0x00	; 0
    3ce4:	80 81       	ld	r24, Z
    3ce6:	8e 7f       	andi	r24, 0xFE	; 254
    3ce8:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,WGM11);
    3cea:	af e4       	ldi	r26, 0x4F	; 79
    3cec:	b0 e0       	ldi	r27, 0x00	; 0
    3cee:	ef e4       	ldi	r30, 0x4F	; 79
    3cf0:	f0 e0       	ldi	r31, 0x00	; 0
    3cf2:	80 81       	ld	r24, Z
    3cf4:	8d 7f       	andi	r24, 0xFD	; 253
    3cf6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    3cf8:	ae e4       	ldi	r26, 0x4E	; 78
    3cfa:	b0 e0       	ldi	r27, 0x00	; 0
    3cfc:	ee e4       	ldi	r30, 0x4E	; 78
    3cfe:	f0 e0       	ldi	r31, 0x00	; 0
    3d00:	80 81       	ld	r24, Z
    3d02:	88 60       	ori	r24, 0x08	; 8
    3d04:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    3d06:	ae e4       	ldi	r26, 0x4E	; 78
    3d08:	b0 e0       	ldi	r27, 0x00	; 0
    3d0a:	ee e4       	ldi	r30, 0x4E	; 78
    3d0c:	f0 e0       	ldi	r31, 0x00	; 0
    3d0e:	80 81       	ld	r24, Z
    3d10:	80 61       	ori	r24, 0x10	; 16
    3d12:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	ICR1 = ICR1_VALUE;
    3d14:	e6 e4       	ldi	r30, 0x46	; 70
    3d16:	f0 e0       	ldi	r31, 0x00	; 0
    3d18:	89 81       	ldd	r24, Y+1	; 0x01
    3d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d1c:	91 83       	std	Z+1, r25	; 0x01
    3d1e:	80 83       	st	Z, r24
	/* Set Global Interrupt */
	Set_Global_Interrupt();
    3d20:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <Set_Global_Interrupt>
	/* Set OCIE0 BIT */
	SET_BIT(TIMSK,TICIE1);
    3d24:	a9 e5       	ldi	r26, 0x59	; 89
    3d26:	b0 e0       	ldi	r27, 0x00	; 0
    3d28:	e9 e5       	ldi	r30, 0x59	; 89
    3d2a:	f0 e0       	ldi	r31, 0x00	; 0
    3d2c:	80 81       	ld	r24, Z
    3d2e:	80 62       	ori	r24, 0x20	; 32
    3d30:	8c 93       	st	X, r24
	/* Set the Timer Clk */
	Timer1_Start_Count();
    3d32:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <Timer1_Start_Count>
}
    3d36:	0f 90       	pop	r0
    3d38:	0f 90       	pop	r0
    3d3a:	cf 91       	pop	r28
    3d3c:	df 91       	pop	r29
    3d3e:	08 95       	ret

00003d40 <Timer1_Set_OCRB_CTC_Mode>:
void Timer1_Set_OCRB_CTC_Mode(u16 OCR1B_VALUE)
{
    3d40:	df 93       	push	r29
    3d42:	cf 93       	push	r28
    3d44:	00 d0       	rcall	.+0      	; 0x3d46 <Timer1_Set_OCRB_CTC_Mode+0x6>
    3d46:	cd b7       	in	r28, 0x3d	; 61
    3d48:	de b7       	in	r29, 0x3e	; 62
    3d4a:	9a 83       	std	Y+2, r25	; 0x02
    3d4c:	89 83       	std	Y+1, r24	; 0x01
	/* Set the Timer Mode to CTC B mode */
	CLEAR_BIT(TCCR1A,WGM10);
    3d4e:	af e4       	ldi	r26, 0x4F	; 79
    3d50:	b0 e0       	ldi	r27, 0x00	; 0
    3d52:	ef e4       	ldi	r30, 0x4F	; 79
    3d54:	f0 e0       	ldi	r31, 0x00	; 0
    3d56:	80 81       	ld	r24, Z
    3d58:	8e 7f       	andi	r24, 0xFE	; 254
    3d5a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,WGM11);
    3d5c:	af e4       	ldi	r26, 0x4F	; 79
    3d5e:	b0 e0       	ldi	r27, 0x00	; 0
    3d60:	ef e4       	ldi	r30, 0x4F	; 79
    3d62:	f0 e0       	ldi	r31, 0x00	; 0
    3d64:	80 81       	ld	r24, Z
    3d66:	8d 7f       	andi	r24, 0xFD	; 253
    3d68:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    3d6a:	ae e4       	ldi	r26, 0x4E	; 78
    3d6c:	b0 e0       	ldi	r27, 0x00	; 0
    3d6e:	ee e4       	ldi	r30, 0x4E	; 78
    3d70:	f0 e0       	ldi	r31, 0x00	; 0
    3d72:	80 81       	ld	r24, Z
    3d74:	88 60       	ori	r24, 0x08	; 8
    3d76:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM13);
    3d78:	ae e4       	ldi	r26, 0x4E	; 78
    3d7a:	b0 e0       	ldi	r27, 0x00	; 0
    3d7c:	ee e4       	ldi	r30, 0x4E	; 78
    3d7e:	f0 e0       	ldi	r31, 0x00	; 0
    3d80:	80 81       	ld	r24, Z
    3d82:	8f 7e       	andi	r24, 0xEF	; 239
    3d84:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR1B = OCR1B_VALUE;
    3d86:	e8 e4       	ldi	r30, 0x48	; 72
    3d88:	f0 e0       	ldi	r31, 0x00	; 0
    3d8a:	89 81       	ldd	r24, Y+1	; 0x01
    3d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d8e:	91 83       	std	Z+1, r25	; 0x01
    3d90:	80 83       	st	Z, r24
	/* Set Global Interrupt */
	Set_Global_Interrupt();
    3d92:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <Set_Global_Interrupt>
	/* Set OCIE0 BIT */
	SET_BIT(TIMSK,OCIE1B);
    3d96:	a9 e5       	ldi	r26, 0x59	; 89
    3d98:	b0 e0       	ldi	r27, 0x00	; 0
    3d9a:	e9 e5       	ldi	r30, 0x59	; 89
    3d9c:	f0 e0       	ldi	r31, 0x00	; 0
    3d9e:	80 81       	ld	r24, Z
    3da0:	88 60       	ori	r24, 0x08	; 8
    3da2:	8c 93       	st	X, r24
	/* Set the Timer Clk */
	Timer1_Start_Count();
    3da4:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <Timer1_Start_Count>
	 * In ISR Make TCNT1 = 0 As this mode doesn't clear the TCNT1 Automatically
	 * ISR(TIMER1_COMPB_vect){
	 * TCNT1 = 0;
	 * }
	 */
}
    3da8:	0f 90       	pop	r0
    3daa:	0f 90       	pop	r0
    3dac:	cf 91       	pop	r28
    3dae:	df 91       	pop	r29
    3db0:	08 95       	ret

00003db2 <Timer1_CTC_OCRA_Generate_Signal>:
void Timer1_CTC_OCRA_Generate_Signal(u16 OCR1A_VALUE)
{
    3db2:	df 93       	push	r29
    3db4:	cf 93       	push	r28
    3db6:	00 d0       	rcall	.+0      	; 0x3db8 <Timer1_CTC_OCRA_Generate_Signal+0x6>
    3db8:	cd b7       	in	r28, 0x3d	; 61
    3dba:	de b7       	in	r29, 0x3e	; 62
    3dbc:	9a 83       	std	Y+2, r25	; 0x02
    3dbe:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_5,OUTPUT);
    3dc0:	84 e4       	ldi	r24, 0x44	; 68
    3dc2:	65 e0       	ldi	r22, 0x05	; 5
    3dc4:	41 e0       	ldi	r20, 0x01	; 1
    3dc6:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to CTC mode */
	CLEAR_BIT(TCCR1A,WGM10);
    3dca:	af e4       	ldi	r26, 0x4F	; 79
    3dcc:	b0 e0       	ldi	r27, 0x00	; 0
    3dce:	ef e4       	ldi	r30, 0x4F	; 79
    3dd0:	f0 e0       	ldi	r31, 0x00	; 0
    3dd2:	80 81       	ld	r24, Z
    3dd4:	8e 7f       	andi	r24, 0xFE	; 254
    3dd6:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,WGM11);
    3dd8:	af e4       	ldi	r26, 0x4F	; 79
    3dda:	b0 e0       	ldi	r27, 0x00	; 0
    3ddc:	ef e4       	ldi	r30, 0x4F	; 79
    3dde:	f0 e0       	ldi	r31, 0x00	; 0
    3de0:	80 81       	ld	r24, Z
    3de2:	8d 7f       	andi	r24, 0xFD	; 253
    3de4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    3de6:	ae e4       	ldi	r26, 0x4E	; 78
    3de8:	b0 e0       	ldi	r27, 0x00	; 0
    3dea:	ee e4       	ldi	r30, 0x4E	; 78
    3dec:	f0 e0       	ldi	r31, 0x00	; 0
    3dee:	80 81       	ld	r24, Z
    3df0:	88 60       	ori	r24, 0x08	; 8
    3df2:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM13);
    3df4:	ae e4       	ldi	r26, 0x4E	; 78
    3df6:	b0 e0       	ldi	r27, 0x00	; 0
    3df8:	ee e4       	ldi	r30, 0x4E	; 78
    3dfa:	f0 e0       	ldi	r31, 0x00	; 0
    3dfc:	80 81       	ld	r24, Z
    3dfe:	8f 7e       	andi	r24, 0xEF	; 239
    3e00:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR1A = OCR1A_VALUE;
    3e02:	ea e4       	ldi	r30, 0x4A	; 74
    3e04:	f0 e0       	ldi	r31, 0x00	; 0
    3e06:	89 81       	ldd	r24, Y+1	; 0x01
    3e08:	9a 81       	ldd	r25, Y+2	; 0x02
    3e0a:	91 83       	std	Z+1, r25	; 0x01
    3e0c:	80 83       	st	Z, r24
	/* Set the Timer Clk */
	Timer1_Set_Clk();
    3e0e:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <Timer1_Set_Clk>
	/* Set Signal to be Toggle at Compare Match*/
	/* Pin PD5 ( OC1A ) */
	SET_BIT(TCCR1A,COM1A0);
    3e12:	af e4       	ldi	r26, 0x4F	; 79
    3e14:	b0 e0       	ldi	r27, 0x00	; 0
    3e16:	ef e4       	ldi	r30, 0x4F	; 79
    3e18:	f0 e0       	ldi	r31, 0x00	; 0
    3e1a:	80 81       	ld	r24, Z
    3e1c:	80 64       	ori	r24, 0x40	; 64
    3e1e:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,COM1A1);
    3e20:	af e4       	ldi	r26, 0x4F	; 79
    3e22:	b0 e0       	ldi	r27, 0x00	; 0
    3e24:	ef e4       	ldi	r30, 0x4F	; 79
    3e26:	f0 e0       	ldi	r31, 0x00	; 0
    3e28:	80 81       	ld	r24, Z
    3e2a:	8f 77       	andi	r24, 0x7F	; 127
    3e2c:	8c 93       	st	X, r24

}
    3e2e:	0f 90       	pop	r0
    3e30:	0f 90       	pop	r0
    3e32:	cf 91       	pop	r28
    3e34:	df 91       	pop	r29
    3e36:	08 95       	ret

00003e38 <Timer1_CTC_OCRB_Generate_Signal>:
void Timer1_CTC_OCRB_Generate_Signal(u16 OCR1B_VALUE)
{
    3e38:	df 93       	push	r29
    3e3a:	cf 93       	push	r28
    3e3c:	00 d0       	rcall	.+0      	; 0x3e3e <Timer1_CTC_OCRB_Generate_Signal+0x6>
    3e3e:	cd b7       	in	r28, 0x3d	; 61
    3e40:	de b7       	in	r29, 0x3e	; 62
    3e42:	9a 83       	std	Y+2, r25	; 0x02
    3e44:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_4,OUTPUT);
    3e46:	84 e4       	ldi	r24, 0x44	; 68
    3e48:	64 e0       	ldi	r22, 0x04	; 4
    3e4a:	41 e0       	ldi	r20, 0x01	; 1
    3e4c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to CTC mode */
	CLEAR_BIT(TCCR1A,WGM10);
    3e50:	af e4       	ldi	r26, 0x4F	; 79
    3e52:	b0 e0       	ldi	r27, 0x00	; 0
    3e54:	ef e4       	ldi	r30, 0x4F	; 79
    3e56:	f0 e0       	ldi	r31, 0x00	; 0
    3e58:	80 81       	ld	r24, Z
    3e5a:	8e 7f       	andi	r24, 0xFE	; 254
    3e5c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,WGM11);
    3e5e:	af e4       	ldi	r26, 0x4F	; 79
    3e60:	b0 e0       	ldi	r27, 0x00	; 0
    3e62:	ef e4       	ldi	r30, 0x4F	; 79
    3e64:	f0 e0       	ldi	r31, 0x00	; 0
    3e66:	80 81       	ld	r24, Z
    3e68:	8d 7f       	andi	r24, 0xFD	; 253
    3e6a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    3e6c:	ae e4       	ldi	r26, 0x4E	; 78
    3e6e:	b0 e0       	ldi	r27, 0x00	; 0
    3e70:	ee e4       	ldi	r30, 0x4E	; 78
    3e72:	f0 e0       	ldi	r31, 0x00	; 0
    3e74:	80 81       	ld	r24, Z
    3e76:	88 60       	ori	r24, 0x08	; 8
    3e78:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM13);
    3e7a:	ae e4       	ldi	r26, 0x4E	; 78
    3e7c:	b0 e0       	ldi	r27, 0x00	; 0
    3e7e:	ee e4       	ldi	r30, 0x4E	; 78
    3e80:	f0 e0       	ldi	r31, 0x00	; 0
    3e82:	80 81       	ld	r24, Z
    3e84:	8f 7e       	andi	r24, 0xEF	; 239
    3e86:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR1B = OCR1B_VALUE;
    3e88:	e8 e4       	ldi	r30, 0x48	; 72
    3e8a:	f0 e0       	ldi	r31, 0x00	; 0
    3e8c:	89 81       	ldd	r24, Y+1	; 0x01
    3e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e90:	91 83       	std	Z+1, r25	; 0x01
    3e92:	80 83       	st	Z, r24
	/* Set the Timer Clk */
	Timer1_Set_Clk();
    3e94:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <Timer1_Set_Clk>
	/* Set Signal to be Toggle at Compare Match*/
	/* Pin PD4 ( OC1b ) */
	SET_BIT(TCCR1A,COM1B0);
    3e98:	af e4       	ldi	r26, 0x4F	; 79
    3e9a:	b0 e0       	ldi	r27, 0x00	; 0
    3e9c:	ef e4       	ldi	r30, 0x4F	; 79
    3e9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ea0:	80 81       	ld	r24, Z
    3ea2:	80 61       	ori	r24, 0x10	; 16
    3ea4:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,COM1B1);
    3ea6:	af e4       	ldi	r26, 0x4F	; 79
    3ea8:	b0 e0       	ldi	r27, 0x00	; 0
    3eaa:	ef e4       	ldi	r30, 0x4F	; 79
    3eac:	f0 e0       	ldi	r31, 0x00	; 0
    3eae:	80 81       	ld	r24, Z
    3eb0:	8f 7d       	andi	r24, 0xDF	; 223
    3eb2:	8c 93       	st	X, r24
}
    3eb4:	0f 90       	pop	r0
    3eb6:	0f 90       	pop	r0
    3eb8:	cf 91       	pop	r28
    3eba:	df 91       	pop	r29
    3ebc:	08 95       	ret

00003ebe <Timer1_Set_OCA_FastPWM_Mode>:
void Timer1_Set_OCA_FastPWM_Mode(u16 OCR1A_VALUE)
{
    3ebe:	df 93       	push	r29
    3ec0:	cf 93       	push	r28
    3ec2:	00 d0       	rcall	.+0      	; 0x3ec4 <Timer1_Set_OCA_FastPWM_Mode+0x6>
    3ec4:	cd b7       	in	r28, 0x3d	; 61
    3ec6:	de b7       	in	r29, 0x3e	; 62
    3ec8:	9a 83       	std	Y+2, r25	; 0x02
    3eca:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_5,OUTPUT);
    3ecc:	84 e4       	ldi	r24, 0x44	; 68
    3ece:	65 e0       	ldi	r22, 0x05	; 5
    3ed0:	41 e0       	ldi	r20, 0x01	; 1
    3ed2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to Fast PWM mode */
	SET_BIT(TCCR1A,WGM10);
    3ed6:	af e4       	ldi	r26, 0x4F	; 79
    3ed8:	b0 e0       	ldi	r27, 0x00	; 0
    3eda:	ef e4       	ldi	r30, 0x4F	; 79
    3edc:	f0 e0       	ldi	r31, 0x00	; 0
    3ede:	80 81       	ld	r24, Z
    3ee0:	81 60       	ori	r24, 0x01	; 1
    3ee2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    3ee4:	af e4       	ldi	r26, 0x4F	; 79
    3ee6:	b0 e0       	ldi	r27, 0x00	; 0
    3ee8:	ef e4       	ldi	r30, 0x4F	; 79
    3eea:	f0 e0       	ldi	r31, 0x00	; 0
    3eec:	80 81       	ld	r24, Z
    3eee:	82 60       	ori	r24, 0x02	; 2
    3ef0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    3ef2:	ae e4       	ldi	r26, 0x4E	; 78
    3ef4:	b0 e0       	ldi	r27, 0x00	; 0
    3ef6:	ee e4       	ldi	r30, 0x4E	; 78
    3ef8:	f0 e0       	ldi	r31, 0x00	; 0
    3efa:	80 81       	ld	r24, Z
    3efc:	88 60       	ori	r24, 0x08	; 8
    3efe:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    3f00:	ae e4       	ldi	r26, 0x4E	; 78
    3f02:	b0 e0       	ldi	r27, 0x00	; 0
    3f04:	ee e4       	ldi	r30, 0x4E	; 78
    3f06:	f0 e0       	ldi	r31, 0x00	; 0
    3f08:	80 81       	ld	r24, Z
    3f0a:	80 61       	ori	r24, 0x10	; 16
    3f0c:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR1A = OCR1A_VALUE;
    3f0e:	ea e4       	ldi	r30, 0x4A	; 74
    3f10:	f0 e0       	ldi	r31, 0x00	; 0
    3f12:	89 81       	ldd	r24, Y+1	; 0x01
    3f14:	9a 81       	ldd	r25, Y+2	; 0x02
    3f16:	91 83       	std	Z+1, r25	; 0x01
    3f18:	80 83       	st	Z, r24
	/* Set the Timer Clk */
	Timer1_Set_Clk();
    3f1a:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <Timer1_Set_Clk>
	/* Set PWM On / Off  */
#if TIMER1_SET_OC1A_ON_BOTTOM
	CLEAR_BIT(TCCR1A,COM1A0);
    3f1e:	af e4       	ldi	r26, 0x4F	; 79
    3f20:	b0 e0       	ldi	r27, 0x00	; 0
    3f22:	ef e4       	ldi	r30, 0x4F	; 79
    3f24:	f0 e0       	ldi	r31, 0x00	; 0
    3f26:	80 81       	ld	r24, Z
    3f28:	8f 7b       	andi	r24, 0xBF	; 191
    3f2a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
    3f2c:	af e4       	ldi	r26, 0x4F	; 79
    3f2e:	b0 e0       	ldi	r27, 0x00	; 0
    3f30:	ef e4       	ldi	r30, 0x4F	; 79
    3f32:	f0 e0       	ldi	r31, 0x00	; 0
    3f34:	80 81       	ld	r24, Z
    3f36:	80 68       	ori	r24, 0x80	; 128
    3f38:	8c 93       	st	X, r24
#elif TIMER1_SET_OC1A_ON_COMPARE_MATCH
	SET_BIT(TCCR1A,COM1A0);
	SET_BIT(TCCR1A,COM1A1);
#endif
}
    3f3a:	0f 90       	pop	r0
    3f3c:	0f 90       	pop	r0
    3f3e:	cf 91       	pop	r28
    3f40:	df 91       	pop	r29
    3f42:	08 95       	ret

00003f44 <Timer1_Set_OCB_FastPWM_Mode>:
void Timer1_Set_OCB_FastPWM_Mode(u16 OCR1B_VALUE)
{
    3f44:	df 93       	push	r29
    3f46:	cf 93       	push	r28
    3f48:	00 d0       	rcall	.+0      	; 0x3f4a <Timer1_Set_OCB_FastPWM_Mode+0x6>
    3f4a:	cd b7       	in	r28, 0x3d	; 61
    3f4c:	de b7       	in	r29, 0x3e	; 62
    3f4e:	9a 83       	std	Y+2, r25	; 0x02
    3f50:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_4,OUTPUT);
    3f52:	84 e4       	ldi	r24, 0x44	; 68
    3f54:	64 e0       	ldi	r22, 0x04	; 4
    3f56:	41 e0       	ldi	r20, 0x01	; 1
    3f58:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to Fast PWM mode */
	SET_BIT(TCCR1A,WGM10);
    3f5c:	af e4       	ldi	r26, 0x4F	; 79
    3f5e:	b0 e0       	ldi	r27, 0x00	; 0
    3f60:	ef e4       	ldi	r30, 0x4F	; 79
    3f62:	f0 e0       	ldi	r31, 0x00	; 0
    3f64:	80 81       	ld	r24, Z
    3f66:	81 60       	ori	r24, 0x01	; 1
    3f68:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    3f6a:	af e4       	ldi	r26, 0x4F	; 79
    3f6c:	b0 e0       	ldi	r27, 0x00	; 0
    3f6e:	ef e4       	ldi	r30, 0x4F	; 79
    3f70:	f0 e0       	ldi	r31, 0x00	; 0
    3f72:	80 81       	ld	r24, Z
    3f74:	82 60       	ori	r24, 0x02	; 2
    3f76:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    3f78:	ae e4       	ldi	r26, 0x4E	; 78
    3f7a:	b0 e0       	ldi	r27, 0x00	; 0
    3f7c:	ee e4       	ldi	r30, 0x4E	; 78
    3f7e:	f0 e0       	ldi	r31, 0x00	; 0
    3f80:	80 81       	ld	r24, Z
    3f82:	88 60       	ori	r24, 0x08	; 8
    3f84:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    3f86:	ae e4       	ldi	r26, 0x4E	; 78
    3f88:	b0 e0       	ldi	r27, 0x00	; 0
    3f8a:	ee e4       	ldi	r30, 0x4E	; 78
    3f8c:	f0 e0       	ldi	r31, 0x00	; 0
    3f8e:	80 81       	ld	r24, Z
    3f90:	80 61       	ori	r24, 0x10	; 16
    3f92:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR1B = OCR1B_VALUE;
    3f94:	e8 e4       	ldi	r30, 0x48	; 72
    3f96:	f0 e0       	ldi	r31, 0x00	; 0
    3f98:	89 81       	ldd	r24, Y+1	; 0x01
    3f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f9c:	91 83       	std	Z+1, r25	; 0x01
    3f9e:	80 83       	st	Z, r24
	/* Set the Timer Clk */
	Timer1_Set_Clk();
    3fa0:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <Timer1_Set_Clk>
	/* Set PWM On / Off  */
#if TIMER1_SET_OC1B_ON_BOTTOM
	CLEAR_BIT(TCCR1A,COM1B0);
    3fa4:	af e4       	ldi	r26, 0x4F	; 79
    3fa6:	b0 e0       	ldi	r27, 0x00	; 0
    3fa8:	ef e4       	ldi	r30, 0x4F	; 79
    3faa:	f0 e0       	ldi	r31, 0x00	; 0
    3fac:	80 81       	ld	r24, Z
    3fae:	8f 7e       	andi	r24, 0xEF	; 239
    3fb0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1B1);
    3fb2:	af e4       	ldi	r26, 0x4F	; 79
    3fb4:	b0 e0       	ldi	r27, 0x00	; 0
    3fb6:	ef e4       	ldi	r30, 0x4F	; 79
    3fb8:	f0 e0       	ldi	r31, 0x00	; 0
    3fba:	80 81       	ld	r24, Z
    3fbc:	80 62       	ori	r24, 0x20	; 32
    3fbe:	8c 93       	st	X, r24
#elif TIMER1_SET_OC1B_ON_COMPARE_MATCH
	SET_BIT(TCCR1A,COM1B0);
	SET_BIT(TCCR1A,COM1B1);
#endif
}
    3fc0:	0f 90       	pop	r0
    3fc2:	0f 90       	pop	r0
    3fc4:	cf 91       	pop	r28
    3fc6:	df 91       	pop	r29
    3fc8:	08 95       	ret

00003fca <Timer1_Set_OCA_FastPWM_Mode_Using_Bits>:
void Timer1_Set_OCA_FastPWM_Mode_Using_Bits()
{
    3fca:	df 93       	push	r29
    3fcc:	cf 93       	push	r28
    3fce:	cd b7       	in	r28, 0x3d	; 61
    3fd0:	de b7       	in	r29, 0x3e	; 62
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_5,OUTPUT);
    3fd2:	84 e4       	ldi	r24, 0x44	; 68
    3fd4:	65 e0       	ldi	r22, 0x05	; 5
    3fd6:	41 e0       	ldi	r20, 0x01	; 1
    3fd8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to Fast PWM mode */
#if FAST_PWM_8_BIT
	SET_BIT(TCCR1A,WGM10);
    3fdc:	af e4       	ldi	r26, 0x4F	; 79
    3fde:	b0 e0       	ldi	r27, 0x00	; 0
    3fe0:	ef e4       	ldi	r30, 0x4F	; 79
    3fe2:	f0 e0       	ldi	r31, 0x00	; 0
    3fe4:	80 81       	ld	r24, Z
    3fe6:	81 60       	ori	r24, 0x01	; 1
    3fe8:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,WGM11);
    3fea:	af e4       	ldi	r26, 0x4F	; 79
    3fec:	b0 e0       	ldi	r27, 0x00	; 0
    3fee:	ef e4       	ldi	r30, 0x4F	; 79
    3ff0:	f0 e0       	ldi	r31, 0x00	; 0
    3ff2:	80 81       	ld	r24, Z
    3ff4:	8d 7f       	andi	r24, 0xFD	; 253
    3ff6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    3ff8:	ae e4       	ldi	r26, 0x4E	; 78
    3ffa:	b0 e0       	ldi	r27, 0x00	; 0
    3ffc:	ee e4       	ldi	r30, 0x4E	; 78
    3ffe:	f0 e0       	ldi	r31, 0x00	; 0
    4000:	80 81       	ld	r24, Z
    4002:	88 60       	ori	r24, 0x08	; 8
    4004:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM13);
    4006:	ae e4       	ldi	r26, 0x4E	; 78
    4008:	b0 e0       	ldi	r27, 0x00	; 0
    400a:	ee e4       	ldi	r30, 0x4E	; 78
    400c:	f0 e0       	ldi	r31, 0x00	; 0
    400e:	80 81       	ld	r24, Z
    4010:	8f 7e       	andi	r24, 0xEF	; 239
    4012:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
	SET_BIT(TCCR1B,WGM12);
	CLEAR_BIT(TCCR1B,WGM13);
#endif
	/* Set the Timer Clk */
	Timer1_Set_Clk();
    4014:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <Timer1_Set_Clk>
	/* Set PWM On / Off  */
#if TIMER1_SET_OC1A_ON_BOTTOM
	CLEAR_BIT(TCCR1A,COM1A0);
    4018:	af e4       	ldi	r26, 0x4F	; 79
    401a:	b0 e0       	ldi	r27, 0x00	; 0
    401c:	ef e4       	ldi	r30, 0x4F	; 79
    401e:	f0 e0       	ldi	r31, 0x00	; 0
    4020:	80 81       	ld	r24, Z
    4022:	8f 7b       	andi	r24, 0xBF	; 191
    4024:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
    4026:	af e4       	ldi	r26, 0x4F	; 79
    4028:	b0 e0       	ldi	r27, 0x00	; 0
    402a:	ef e4       	ldi	r30, 0x4F	; 79
    402c:	f0 e0       	ldi	r31, 0x00	; 0
    402e:	80 81       	ld	r24, Z
    4030:	80 68       	ori	r24, 0x80	; 128
    4032:	8c 93       	st	X, r24
#elif TIMER1_SET_OC1A_ON_COMPARE_MATCH
	SET_BIT(TCCR1A,COM1A0);
	SET_BIT(TCCR1A,COM1A1);
#endif
}
    4034:	cf 91       	pop	r28
    4036:	df 91       	pop	r29
    4038:	08 95       	ret

0000403a <Timer1_Set_OCB_FastPWM_Mode_Using_Bits>:
void Timer1_Set_OCB_FastPWM_Mode_Using_Bits()
{
    403a:	df 93       	push	r29
    403c:	cf 93       	push	r28
    403e:	cd b7       	in	r28, 0x3d	; 61
    4040:	de b7       	in	r29, 0x3e	; 62
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_4,OUTPUT);
    4042:	84 e4       	ldi	r24, 0x44	; 68
    4044:	64 e0       	ldi	r22, 0x04	; 4
    4046:	41 e0       	ldi	r20, 0x01	; 1
    4048:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to Fast PWM mode */
#if FAST_PWM_8_BIT
	SET_BIT(TCCR1A,WGM10);
    404c:	af e4       	ldi	r26, 0x4F	; 79
    404e:	b0 e0       	ldi	r27, 0x00	; 0
    4050:	ef e4       	ldi	r30, 0x4F	; 79
    4052:	f0 e0       	ldi	r31, 0x00	; 0
    4054:	80 81       	ld	r24, Z
    4056:	81 60       	ori	r24, 0x01	; 1
    4058:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,WGM11);
    405a:	af e4       	ldi	r26, 0x4F	; 79
    405c:	b0 e0       	ldi	r27, 0x00	; 0
    405e:	ef e4       	ldi	r30, 0x4F	; 79
    4060:	f0 e0       	ldi	r31, 0x00	; 0
    4062:	80 81       	ld	r24, Z
    4064:	8d 7f       	andi	r24, 0xFD	; 253
    4066:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    4068:	ae e4       	ldi	r26, 0x4E	; 78
    406a:	b0 e0       	ldi	r27, 0x00	; 0
    406c:	ee e4       	ldi	r30, 0x4E	; 78
    406e:	f0 e0       	ldi	r31, 0x00	; 0
    4070:	80 81       	ld	r24, Z
    4072:	88 60       	ori	r24, 0x08	; 8
    4074:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM13);
    4076:	ae e4       	ldi	r26, 0x4E	; 78
    4078:	b0 e0       	ldi	r27, 0x00	; 0
    407a:	ee e4       	ldi	r30, 0x4E	; 78
    407c:	f0 e0       	ldi	r31, 0x00	; 0
    407e:	80 81       	ld	r24, Z
    4080:	8f 7e       	andi	r24, 0xEF	; 239
    4082:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
	SET_BIT(TCCR1B,WGM12);
	CLEAR_BIT(TCCR1B,WGM13);
#endif
	/* Set the Timer Clk */
	Timer1_Set_Clk();
    4084:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <Timer1_Set_Clk>
	/* Set PWM On / Off  */
#if TIMER1_SET_OC1B_ON_BOTTOM
	CLEAR_BIT(TCCR1A,COM1B0);
    4088:	af e4       	ldi	r26, 0x4F	; 79
    408a:	b0 e0       	ldi	r27, 0x00	; 0
    408c:	ef e4       	ldi	r30, 0x4F	; 79
    408e:	f0 e0       	ldi	r31, 0x00	; 0
    4090:	80 81       	ld	r24, Z
    4092:	8f 7e       	andi	r24, 0xEF	; 239
    4094:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1B1);
    4096:	af e4       	ldi	r26, 0x4F	; 79
    4098:	b0 e0       	ldi	r27, 0x00	; 0
    409a:	ef e4       	ldi	r30, 0x4F	; 79
    409c:	f0 e0       	ldi	r31, 0x00	; 0
    409e:	80 81       	ld	r24, Z
    40a0:	80 62       	ori	r24, 0x20	; 32
    40a2:	8c 93       	st	X, r24
#elif TIMER1_SET_OC1B_ON_COMPARE_MATCH
	SET_BIT(TCCR1A,COM1B0);
	SET_BIT(TCCR1A,COM1B1);
#endif
}
    40a4:	cf 91       	pop	r28
    40a6:	df 91       	pop	r29
    40a8:	08 95       	ret

000040aa <PWM_Timer1A_Generate>:
void PWM_Timer1A_Generate(u8 SPEED_PERCENT)
{
    40aa:	df 93       	push	r29
    40ac:	cf 93       	push	r28
    40ae:	0f 92       	push	r0
    40b0:	cd b7       	in	r28, 0x3d	; 61
    40b2:	de b7       	in	r29, 0x3e	; 62
    40b4:	89 83       	std	Y+1, r24	; 0x01
	Timer1_Set_OCA_FastPWM_Mode((SPEED_PERCENT * 655.35));
    40b6:	89 81       	ldd	r24, Y+1	; 0x01
    40b8:	88 2f       	mov	r24, r24
    40ba:	90 e0       	ldi	r25, 0x00	; 0
    40bc:	aa 27       	eor	r26, r26
    40be:	97 fd       	sbrc	r25, 7
    40c0:	a0 95       	com	r26
    40c2:	ba 2f       	mov	r27, r26
    40c4:	bc 01       	movw	r22, r24
    40c6:	cd 01       	movw	r24, r26
    40c8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    40cc:	dc 01       	movw	r26, r24
    40ce:	cb 01       	movw	r24, r22
    40d0:	bc 01       	movw	r22, r24
    40d2:	cd 01       	movw	r24, r26
    40d4:	26 e6       	ldi	r18, 0x66	; 102
    40d6:	36 ed       	ldi	r19, 0xD6	; 214
    40d8:	43 e2       	ldi	r20, 0x23	; 35
    40da:	54 e4       	ldi	r21, 0x44	; 68
    40dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40e0:	dc 01       	movw	r26, r24
    40e2:	cb 01       	movw	r24, r22
    40e4:	bc 01       	movw	r22, r24
    40e6:	cd 01       	movw	r24, r26
    40e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ec:	dc 01       	movw	r26, r24
    40ee:	cb 01       	movw	r24, r22
    40f0:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <Timer1_Set_OCA_FastPWM_Mode>
}
    40f4:	0f 90       	pop	r0
    40f6:	cf 91       	pop	r28
    40f8:	df 91       	pop	r29
    40fa:	08 95       	ret

000040fc <PWM_Timer1B_Generate>:
void PWM_Timer1B_Generate(u8 SPEED_PERCENT)
{
    40fc:	df 93       	push	r29
    40fe:	cf 93       	push	r28
    4100:	0f 92       	push	r0
    4102:	cd b7       	in	r28, 0x3d	; 61
    4104:	de b7       	in	r29, 0x3e	; 62
    4106:	89 83       	std	Y+1, r24	; 0x01
	Timer1_Set_OCB_FastPWM_Mode((SPEED_PERCENT * 655.35));
    4108:	89 81       	ldd	r24, Y+1	; 0x01
    410a:	88 2f       	mov	r24, r24
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	aa 27       	eor	r26, r26
    4110:	97 fd       	sbrc	r25, 7
    4112:	a0 95       	com	r26
    4114:	ba 2f       	mov	r27, r26
    4116:	bc 01       	movw	r22, r24
    4118:	cd 01       	movw	r24, r26
    411a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    411e:	dc 01       	movw	r26, r24
    4120:	cb 01       	movw	r24, r22
    4122:	bc 01       	movw	r22, r24
    4124:	cd 01       	movw	r24, r26
    4126:	26 e6       	ldi	r18, 0x66	; 102
    4128:	36 ed       	ldi	r19, 0xD6	; 214
    412a:	43 e2       	ldi	r20, 0x23	; 35
    412c:	54 e4       	ldi	r21, 0x44	; 68
    412e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4132:	dc 01       	movw	r26, r24
    4134:	cb 01       	movw	r24, r22
    4136:	bc 01       	movw	r22, r24
    4138:	cd 01       	movw	r24, r26
    413a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    413e:	dc 01       	movw	r26, r24
    4140:	cb 01       	movw	r24, r22
    4142:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <Timer1_Set_OCB_FastPWM_Mode>
}
    4146:	0f 90       	pop	r0
    4148:	cf 91       	pop	r28
    414a:	df 91       	pop	r29
    414c:	08 95       	ret

0000414e <Timer1_Set_ICU_Rising_Edge>:
void Timer1_Set_ICU_Rising_Edge()
{
    414e:	df 93       	push	r29
    4150:	cf 93       	push	r28
    4152:	cd b7       	in	r28, 0x3d	; 61
    4154:	de b7       	in	r29, 0x3e	; 62
	// Set ICR1 Detect Rising Edge
	SET_2_BITS(TCCR1B,ICNC1,ICES1);
    4156:	ae e4       	ldi	r26, 0x4E	; 78
    4158:	b0 e0       	ldi	r27, 0x00	; 0
    415a:	ee e4       	ldi	r30, 0x4E	; 78
    415c:	f0 e0       	ldi	r31, 0x00	; 0
    415e:	80 81       	ld	r24, Z
    4160:	80 6c       	ori	r24, 0xC0	; 192
    4162:	8c 93       	st	X, r24
}
    4164:	cf 91       	pop	r28
    4166:	df 91       	pop	r29
    4168:	08 95       	ret

0000416a <Timer1_Set_ICU_Falling_Edge>:
void Timer1_Set_ICU_Falling_Edge()
{
    416a:	df 93       	push	r29
    416c:	cf 93       	push	r28
    416e:	cd b7       	in	r28, 0x3d	; 61
    4170:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B,ICNC1);
    4172:	ae e4       	ldi	r26, 0x4E	; 78
    4174:	b0 e0       	ldi	r27, 0x00	; 0
    4176:	ee e4       	ldi	r30, 0x4E	; 78
    4178:	f0 e0       	ldi	r31, 0x00	; 0
    417a:	80 81       	ld	r24, Z
    417c:	80 68       	ori	r24, 0x80	; 128
    417e:	8c 93       	st	X, r24
	// Set ICR1 Detect Falling Edge
	CLEAR_BIT(TCCR1B,ICES1);
    4180:	ae e4       	ldi	r26, 0x4E	; 78
    4182:	b0 e0       	ldi	r27, 0x00	; 0
    4184:	ee e4       	ldi	r30, 0x4E	; 78
    4186:	f0 e0       	ldi	r31, 0x00	; 0
    4188:	80 81       	ld	r24, Z
    418a:	8f 7b       	andi	r24, 0xBF	; 191
    418c:	8c 93       	st	X, r24
}
    418e:	cf 91       	pop	r28
    4190:	df 91       	pop	r29
    4192:	08 95       	ret

00004194 <Timer1_Clear_ICF1_BIT>:
void Timer1_Clear_ICF1_BIT()
{
    4194:	df 93       	push	r29
    4196:	cf 93       	push	r28
    4198:	cd b7       	in	r28, 0x3d	; 61
    419a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIFR,ICF1);
    419c:	a8 e5       	ldi	r26, 0x58	; 88
    419e:	b0 e0       	ldi	r27, 0x00	; 0
    41a0:	e8 e5       	ldi	r30, 0x58	; 88
    41a2:	f0 e0       	ldi	r31, 0x00	; 0
    41a4:	80 81       	ld	r24, Z
    41a6:	80 62       	ori	r24, 0x20	; 32
    41a8:	8c 93       	st	X, r24
}
    41aa:	cf 91       	pop	r28
    41ac:	df 91       	pop	r29
    41ae:	08 95       	ret

000041b0 <Timer1_Check_ICF1_BIT>:
u8 Timer1_Check_ICF1_BIT()
{
    41b0:	df 93       	push	r29
    41b2:	cf 93       	push	r28
    41b4:	cd b7       	in	r28, 0x3d	; 61
    41b6:	de b7       	in	r29, 0x3e	; 62
	return READ_BIT(TIFR,ICF1);
    41b8:	e8 e5       	ldi	r30, 0x58	; 88
    41ba:	f0 e0       	ldi	r31, 0x00	; 0
    41bc:	80 81       	ld	r24, Z
    41be:	88 2f       	mov	r24, r24
    41c0:	90 e0       	ldi	r25, 0x00	; 0
    41c2:	80 72       	andi	r24, 0x20	; 32
    41c4:	90 70       	andi	r25, 0x00	; 0
    41c6:	95 95       	asr	r25
    41c8:	87 95       	ror	r24
    41ca:	95 95       	asr	r25
    41cc:	87 95       	ror	r24
    41ce:	95 95       	asr	r25
    41d0:	87 95       	ror	r24
    41d2:	95 95       	asr	r25
    41d4:	87 95       	ror	r24
    41d6:	95 95       	asr	r25
    41d8:	87 95       	ror	r24
}
    41da:	cf 91       	pop	r28
    41dc:	df 91       	pop	r29
    41de:	08 95       	ret

000041e0 <Timer1_Clear_TCNT1>:
void Timer1_Clear_TCNT1()
{
    41e0:	df 93       	push	r29
    41e2:	cf 93       	push	r28
    41e4:	cd b7       	in	r28, 0x3d	; 61
    41e6:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    41e8:	ec e4       	ldi	r30, 0x4C	; 76
    41ea:	f0 e0       	ldi	r31, 0x00	; 0
    41ec:	11 82       	std	Z+1, r1	; 0x01
    41ee:	10 82       	st	Z, r1
}
    41f0:	cf 91       	pop	r28
    41f2:	df 91       	pop	r29
    41f4:	08 95       	ret

000041f6 <Timer1_Set_OCA_PhaseCorrect_PWM_Mode_Using_Bits>:
void Timer1_Set_OCA_PhaseCorrect_PWM_Mode_Using_Bits()
{
    41f6:	df 93       	push	r29
    41f8:	cf 93       	push	r28
    41fa:	cd b7       	in	r28, 0x3d	; 61
    41fc:	de b7       	in	r29, 0x3e	; 62
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_5,OUTPUT);
    41fe:	84 e4       	ldi	r24, 0x44	; 68
    4200:	65 e0       	ldi	r22, 0x05	; 5
    4202:	41 e0       	ldi	r20, 0x01	; 1
    4204:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to Fast PWM mode */
#if PHASE_CORRECT_PWM_8_BIT
	SET_BIT(TCCR1A,WGM10);
    4208:	af e4       	ldi	r26, 0x4F	; 79
    420a:	b0 e0       	ldi	r27, 0x00	; 0
    420c:	ef e4       	ldi	r30, 0x4F	; 79
    420e:	f0 e0       	ldi	r31, 0x00	; 0
    4210:	80 81       	ld	r24, Z
    4212:	81 60       	ori	r24, 0x01	; 1
    4214:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,WGM11);
    4216:	af e4       	ldi	r26, 0x4F	; 79
    4218:	b0 e0       	ldi	r27, 0x00	; 0
    421a:	ef e4       	ldi	r30, 0x4F	; 79
    421c:	f0 e0       	ldi	r31, 0x00	; 0
    421e:	80 81       	ld	r24, Z
    4220:	8d 7f       	andi	r24, 0xFD	; 253
    4222:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM12);
    4224:	ae e4       	ldi	r26, 0x4E	; 78
    4226:	b0 e0       	ldi	r27, 0x00	; 0
    4228:	ee e4       	ldi	r30, 0x4E	; 78
    422a:	f0 e0       	ldi	r31, 0x00	; 0
    422c:	80 81       	ld	r24, Z
    422e:	87 7f       	andi	r24, 0xF7	; 247
    4230:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM13);
    4232:	ae e4       	ldi	r26, 0x4E	; 78
    4234:	b0 e0       	ldi	r27, 0x00	; 0
    4236:	ee e4       	ldi	r30, 0x4E	; 78
    4238:	f0 e0       	ldi	r31, 0x00	; 0
    423a:	80 81       	ld	r24, Z
    423c:	8f 7e       	andi	r24, 0xEF	; 239
    423e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
	CLEAR_BIT(TCCR1B,WGM12);
	CLEAR_BIT(TCCR1B,WGM13);
#endif
	/* Set the Timer Clk */
	Timer1_Set_Clk();
    4240:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <Timer1_Set_Clk>
	/* Set PWM On / Off  */
#if TIMER1_SET_OCRA_ON_DOWNCOUNTING
	CLEAR_BIT(TCCR1A,COM1A0);
    4244:	af e4       	ldi	r26, 0x4F	; 79
    4246:	b0 e0       	ldi	r27, 0x00	; 0
    4248:	ef e4       	ldi	r30, 0x4F	; 79
    424a:	f0 e0       	ldi	r31, 0x00	; 0
    424c:	80 81       	ld	r24, Z
    424e:	8f 7b       	andi	r24, 0xBF	; 191
    4250:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
    4252:	af e4       	ldi	r26, 0x4F	; 79
    4254:	b0 e0       	ldi	r27, 0x00	; 0
    4256:	ef e4       	ldi	r30, 0x4F	; 79
    4258:	f0 e0       	ldi	r31, 0x00	; 0
    425a:	80 81       	ld	r24, Z
    425c:	80 68       	ori	r24, 0x80	; 128
    425e:	8c 93       	st	X, r24
#elif TIMER1_SET_OCRA_ON_UPCOUNTING
	SET_BIT(TCCR1A,COM1A0);
	SET_BIT(TCCR1A,COM1A1);
#endif
}
    4260:	cf 91       	pop	r28
    4262:	df 91       	pop	r29
    4264:	08 95       	ret

00004266 <Timer1_Set_OCB_PhaseCorrect_PWM_Mode_Using_Bits>:
void Timer1_Set_OCB_PhaseCorrect_PWM_Mode_Using_Bits()
{
    4266:	df 93       	push	r29
    4268:	cf 93       	push	r28
    426a:	cd b7       	in	r28, 0x3d	; 61
    426c:	de b7       	in	r29, 0x3e	; 62
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_4,OUTPUT);
    426e:	84 e4       	ldi	r24, 0x44	; 68
    4270:	64 e0       	ldi	r22, 0x04	; 4
    4272:	41 e0       	ldi	r20, 0x01	; 1
    4274:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to Fast PWM mode */
#if PHASE_CORRECT_PWM_8_BIT
	SET_BIT(TCCR1A,WGM10);
    4278:	af e4       	ldi	r26, 0x4F	; 79
    427a:	b0 e0       	ldi	r27, 0x00	; 0
    427c:	ef e4       	ldi	r30, 0x4F	; 79
    427e:	f0 e0       	ldi	r31, 0x00	; 0
    4280:	80 81       	ld	r24, Z
    4282:	81 60       	ori	r24, 0x01	; 1
    4284:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,WGM11);
    4286:	af e4       	ldi	r26, 0x4F	; 79
    4288:	b0 e0       	ldi	r27, 0x00	; 0
    428a:	ef e4       	ldi	r30, 0x4F	; 79
    428c:	f0 e0       	ldi	r31, 0x00	; 0
    428e:	80 81       	ld	r24, Z
    4290:	8d 7f       	andi	r24, 0xFD	; 253
    4292:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM12);
    4294:	ae e4       	ldi	r26, 0x4E	; 78
    4296:	b0 e0       	ldi	r27, 0x00	; 0
    4298:	ee e4       	ldi	r30, 0x4E	; 78
    429a:	f0 e0       	ldi	r31, 0x00	; 0
    429c:	80 81       	ld	r24, Z
    429e:	87 7f       	andi	r24, 0xF7	; 247
    42a0:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM13);
    42a2:	ae e4       	ldi	r26, 0x4E	; 78
    42a4:	b0 e0       	ldi	r27, 0x00	; 0
    42a6:	ee e4       	ldi	r30, 0x4E	; 78
    42a8:	f0 e0       	ldi	r31, 0x00	; 0
    42aa:	80 81       	ld	r24, Z
    42ac:	8f 7e       	andi	r24, 0xEF	; 239
    42ae:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
	CLEAR_BIT(TCCR1B,WGM12);
	CLEAR_BIT(TCCR1B,WGM13);
#endif
	/* Set the Timer Clk */
	Timer1_Set_Clk();
    42b0:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <Timer1_Set_Clk>
	/* Set PWM On / Off  */
#if TIMER1_SET_OCRB_ON_DOWNCOUNTING
	CLEAR_BIT(TCCR1A,COM1B0);
    42b4:	af e4       	ldi	r26, 0x4F	; 79
    42b6:	b0 e0       	ldi	r27, 0x00	; 0
    42b8:	ef e4       	ldi	r30, 0x4F	; 79
    42ba:	f0 e0       	ldi	r31, 0x00	; 0
    42bc:	80 81       	ld	r24, Z
    42be:	8f 7e       	andi	r24, 0xEF	; 239
    42c0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1B1);
    42c2:	af e4       	ldi	r26, 0x4F	; 79
    42c4:	b0 e0       	ldi	r27, 0x00	; 0
    42c6:	ef e4       	ldi	r30, 0x4F	; 79
    42c8:	f0 e0       	ldi	r31, 0x00	; 0
    42ca:	80 81       	ld	r24, Z
    42cc:	80 62       	ori	r24, 0x20	; 32
    42ce:	8c 93       	st	X, r24
#elif TIMER1_SET_OCRB_ON_UPCOUNTING
	SET_BIT(TCCR1A,COM1B0);
	SET_BIT(TCCR1A,COM1B1);
#endif
}
    42d0:	cf 91       	pop	r28
    42d2:	df 91       	pop	r29
    42d4:	08 95       	ret

000042d6 <Timer1_Set_OCA_PhaseCorrect_PWM_Mode>:
void Timer1_Set_OCA_PhaseCorrect_PWM_Mode(u16 OCR1A_VALUE)
{
    42d6:	df 93       	push	r29
    42d8:	cf 93       	push	r28
    42da:	00 d0       	rcall	.+0      	; 0x42dc <Timer1_Set_OCA_PhaseCorrect_PWM_Mode+0x6>
    42dc:	cd b7       	in	r28, 0x3d	; 61
    42de:	de b7       	in	r29, 0x3e	; 62
    42e0:	9a 83       	std	Y+2, r25	; 0x02
    42e2:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_5,OUTPUT);
    42e4:	84 e4       	ldi	r24, 0x44	; 68
    42e6:	65 e0       	ldi	r22, 0x05	; 5
    42e8:	41 e0       	ldi	r20, 0x01	; 1
    42ea:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to Phase Correct PWM mode*/
	SET_BIT(TCCR1A,WGM10);
    42ee:	af e4       	ldi	r26, 0x4F	; 79
    42f0:	b0 e0       	ldi	r27, 0x00	; 0
    42f2:	ef e4       	ldi	r30, 0x4F	; 79
    42f4:	f0 e0       	ldi	r31, 0x00	; 0
    42f6:	80 81       	ld	r24, Z
    42f8:	81 60       	ori	r24, 0x01	; 1
    42fa:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    42fc:	af e4       	ldi	r26, 0x4F	; 79
    42fe:	b0 e0       	ldi	r27, 0x00	; 0
    4300:	ef e4       	ldi	r30, 0x4F	; 79
    4302:	f0 e0       	ldi	r31, 0x00	; 0
    4304:	80 81       	ld	r24, Z
    4306:	82 60       	ori	r24, 0x02	; 2
    4308:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM12);
    430a:	ae e4       	ldi	r26, 0x4E	; 78
    430c:	b0 e0       	ldi	r27, 0x00	; 0
    430e:	ee e4       	ldi	r30, 0x4E	; 78
    4310:	f0 e0       	ldi	r31, 0x00	; 0
    4312:	80 81       	ld	r24, Z
    4314:	87 7f       	andi	r24, 0xF7	; 247
    4316:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    4318:	ae e4       	ldi	r26, 0x4E	; 78
    431a:	b0 e0       	ldi	r27, 0x00	; 0
    431c:	ee e4       	ldi	r30, 0x4E	; 78
    431e:	f0 e0       	ldi	r31, 0x00	; 0
    4320:	80 81       	ld	r24, Z
    4322:	80 61       	ori	r24, 0x10	; 16
    4324:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR1A = OCR1A_VALUE;
    4326:	ea e4       	ldi	r30, 0x4A	; 74
    4328:	f0 e0       	ldi	r31, 0x00	; 0
    432a:	89 81       	ldd	r24, Y+1	; 0x01
    432c:	9a 81       	ldd	r25, Y+2	; 0x02
    432e:	91 83       	std	Z+1, r25	; 0x01
    4330:	80 83       	st	Z, r24
	/* Set the Timer Clk */
	Timer1_Set_Clk();
    4332:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <Timer1_Set_Clk>
#if TIMER1_SET_OCRA_ON_DOWNCOUNTING
	CLEAR_BIT(TCCR1A,COM1A0);
    4336:	af e4       	ldi	r26, 0x4F	; 79
    4338:	b0 e0       	ldi	r27, 0x00	; 0
    433a:	ef e4       	ldi	r30, 0x4F	; 79
    433c:	f0 e0       	ldi	r31, 0x00	; 0
    433e:	80 81       	ld	r24, Z
    4340:	8f 7b       	andi	r24, 0xBF	; 191
    4342:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
    4344:	af e4       	ldi	r26, 0x4F	; 79
    4346:	b0 e0       	ldi	r27, 0x00	; 0
    4348:	ef e4       	ldi	r30, 0x4F	; 79
    434a:	f0 e0       	ldi	r31, 0x00	; 0
    434c:	80 81       	ld	r24, Z
    434e:	80 68       	ori	r24, 0x80	; 128
    4350:	8c 93       	st	X, r24
#elif TIMER1_SET_OCRA_ON_UPCOUNTING
	SET_BIT(TCCR1A,COM1A0);
	SET_BIT(TCCR1A,COM1A1);
#endif
}
    4352:	0f 90       	pop	r0
    4354:	0f 90       	pop	r0
    4356:	cf 91       	pop	r28
    4358:	df 91       	pop	r29
    435a:	08 95       	ret

0000435c <Timer1_Set_OCB_PhaseCorrect_PWM_Mode>:
void Timer1_Set_OCB_PhaseCorrect_PWM_Mode(u16 OCR1B_VALUE)
{
    435c:	df 93       	push	r29
    435e:	cf 93       	push	r28
    4360:	00 d0       	rcall	.+0      	; 0x4362 <Timer1_Set_OCB_PhaseCorrect_PWM_Mode+0x6>
    4362:	cd b7       	in	r28, 0x3d	; 61
    4364:	de b7       	in	r29, 0x3e	; 62
    4366:	9a 83       	std	Y+2, r25	; 0x02
    4368:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_5,OUTPUT);
    436a:	84 e4       	ldi	r24, 0x44	; 68
    436c:	65 e0       	ldi	r22, 0x05	; 5
    436e:	41 e0       	ldi	r20, 0x01	; 1
    4370:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to Phase Correct PWM mode*/
	SET_BIT(TCCR1A,WGM10);
    4374:	af e4       	ldi	r26, 0x4F	; 79
    4376:	b0 e0       	ldi	r27, 0x00	; 0
    4378:	ef e4       	ldi	r30, 0x4F	; 79
    437a:	f0 e0       	ldi	r31, 0x00	; 0
    437c:	80 81       	ld	r24, Z
    437e:	81 60       	ori	r24, 0x01	; 1
    4380:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    4382:	af e4       	ldi	r26, 0x4F	; 79
    4384:	b0 e0       	ldi	r27, 0x00	; 0
    4386:	ef e4       	ldi	r30, 0x4F	; 79
    4388:	f0 e0       	ldi	r31, 0x00	; 0
    438a:	80 81       	ld	r24, Z
    438c:	82 60       	ori	r24, 0x02	; 2
    438e:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM12);
    4390:	ae e4       	ldi	r26, 0x4E	; 78
    4392:	b0 e0       	ldi	r27, 0x00	; 0
    4394:	ee e4       	ldi	r30, 0x4E	; 78
    4396:	f0 e0       	ldi	r31, 0x00	; 0
    4398:	80 81       	ld	r24, Z
    439a:	87 7f       	andi	r24, 0xF7	; 247
    439c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    439e:	ae e4       	ldi	r26, 0x4E	; 78
    43a0:	b0 e0       	ldi	r27, 0x00	; 0
    43a2:	ee e4       	ldi	r30, 0x4E	; 78
    43a4:	f0 e0       	ldi	r31, 0x00	; 0
    43a6:	80 81       	ld	r24, Z
    43a8:	80 61       	ori	r24, 0x10	; 16
    43aa:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR1B = OCR1B_VALUE;
    43ac:	e8 e4       	ldi	r30, 0x48	; 72
    43ae:	f0 e0       	ldi	r31, 0x00	; 0
    43b0:	89 81       	ldd	r24, Y+1	; 0x01
    43b2:	9a 81       	ldd	r25, Y+2	; 0x02
    43b4:	91 83       	std	Z+1, r25	; 0x01
    43b6:	80 83       	st	Z, r24
	/* Set the Timer Clk */
	Timer1_Set_Clk();
    43b8:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <Timer1_Set_Clk>
#if TIMER1_SET_OCRB_ON_DOWNCOUNTING
	CLEAR_BIT(TCCR1A,COM1B0);
    43bc:	af e4       	ldi	r26, 0x4F	; 79
    43be:	b0 e0       	ldi	r27, 0x00	; 0
    43c0:	ef e4       	ldi	r30, 0x4F	; 79
    43c2:	f0 e0       	ldi	r31, 0x00	; 0
    43c4:	80 81       	ld	r24, Z
    43c6:	8f 7e       	andi	r24, 0xEF	; 239
    43c8:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1B1);
    43ca:	af e4       	ldi	r26, 0x4F	; 79
    43cc:	b0 e0       	ldi	r27, 0x00	; 0
    43ce:	ef e4       	ldi	r30, 0x4F	; 79
    43d0:	f0 e0       	ldi	r31, 0x00	; 0
    43d2:	80 81       	ld	r24, Z
    43d4:	80 62       	ori	r24, 0x20	; 32
    43d6:	8c 93       	st	X, r24
#elif TIMER1_SET_OCRB_ON_UPCOUNTING
	SET_BIT(TCCR1A,COM1B0);
	SET_BIT(TCCR1A,COM1B1);
#endif
}
    43d8:	0f 90       	pop	r0
    43da:	0f 90       	pop	r0
    43dc:	cf 91       	pop	r28
    43de:	df 91       	pop	r29
    43e0:	08 95       	ret

000043e2 <Timer2_Clk_Select>:
/*====================================================================================*/
/* Timer 2 Functions*/
/*====================================================================================*/

void Timer2_Clk_Select()
{
    43e2:	df 93       	push	r29
    43e4:	cf 93       	push	r28
    43e6:	cd b7       	in	r28, 0x3d	; 61
    43e8:	de b7       	in	r29, 0x3e	; 62
#if TIMER2_EXTERNAL
	SET_BIT(ASSR,AS2);
#elif TIMER2_INTERNAL
	CLEAR_BIT(ASSR,AS2);
    43ea:	a2 e4       	ldi	r26, 0x42	; 66
    43ec:	b0 e0       	ldi	r27, 0x00	; 0
    43ee:	e2 e4       	ldi	r30, 0x42	; 66
    43f0:	f0 e0       	ldi	r31, 0x00	; 0
    43f2:	80 81       	ld	r24, Z
    43f4:	87 7f       	andi	r24, 0xF7	; 247
    43f6:	8c 93       	st	X, r24
#endif
}
    43f8:	cf 91       	pop	r28
    43fa:	df 91       	pop	r29
    43fc:	08 95       	ret

000043fe <Timer2_Set_Clk>:
void Timer2_Set_Clk()
{
    43fe:	df 93       	push	r29
    4400:	cf 93       	push	r28
    4402:	cd b7       	in	r28, 0x3d	; 61
    4404:	de b7       	in	r29, 0x3e	; 62
	// Select the source of CLK
	Timer2_Clk_Select();
    4406:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <Timer2_Clk_Select>
#elif TIMER2_DIVIDE_CLK_BY_256
	CLEAR_BIT(TCCR2,CS20);
	SET_BIT(TCCR2,CS21);
	SET_BIT(TCCR2,CS22);
#elif TIMER2_DIVIDE_CLK_BY_1024
	SET_BIT(TCCR2,CS20);
    440a:	a5 e4       	ldi	r26, 0x45	; 69
    440c:	b0 e0       	ldi	r27, 0x00	; 0
    440e:	e5 e4       	ldi	r30, 0x45	; 69
    4410:	f0 e0       	ldi	r31, 0x00	; 0
    4412:	80 81       	ld	r24, Z
    4414:	81 60       	ori	r24, 0x01	; 1
    4416:	8c 93       	st	X, r24
	SET_BIT(TCCR2,CS21);
    4418:	a5 e4       	ldi	r26, 0x45	; 69
    441a:	b0 e0       	ldi	r27, 0x00	; 0
    441c:	e5 e4       	ldi	r30, 0x45	; 69
    441e:	f0 e0       	ldi	r31, 0x00	; 0
    4420:	80 81       	ld	r24, Z
    4422:	82 60       	ori	r24, 0x02	; 2
    4424:	8c 93       	st	X, r24
	SET_BIT(TCCR2,CS22);
    4426:	a5 e4       	ldi	r26, 0x45	; 69
    4428:	b0 e0       	ldi	r27, 0x00	; 0
    442a:	e5 e4       	ldi	r30, 0x45	; 69
    442c:	f0 e0       	ldi	r31, 0x00	; 0
    442e:	80 81       	ld	r24, Z
    4430:	84 60       	ori	r24, 0x04	; 4
    4432:	8c 93       	st	X, r24
#endif
}
    4434:	cf 91       	pop	r28
    4436:	df 91       	pop	r29
    4438:	08 95       	ret

0000443a <Timer2_Stop_Count>:
void Timer2_Stop_Count()
{
    443a:	df 93       	push	r29
    443c:	cf 93       	push	r28
    443e:	cd b7       	in	r28, 0x3d	; 61
    4440:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR2,CS20);
    4442:	a5 e4       	ldi	r26, 0x45	; 69
    4444:	b0 e0       	ldi	r27, 0x00	; 0
    4446:	e5 e4       	ldi	r30, 0x45	; 69
    4448:	f0 e0       	ldi	r31, 0x00	; 0
    444a:	80 81       	ld	r24, Z
    444c:	8e 7f       	andi	r24, 0xFE	; 254
    444e:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2,CS21);
    4450:	a5 e4       	ldi	r26, 0x45	; 69
    4452:	b0 e0       	ldi	r27, 0x00	; 0
    4454:	e5 e4       	ldi	r30, 0x45	; 69
    4456:	f0 e0       	ldi	r31, 0x00	; 0
    4458:	80 81       	ld	r24, Z
    445a:	8d 7f       	andi	r24, 0xFD	; 253
    445c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2,CS22);
    445e:	a5 e4       	ldi	r26, 0x45	; 69
    4460:	b0 e0       	ldi	r27, 0x00	; 0
    4462:	e5 e4       	ldi	r30, 0x45	; 69
    4464:	f0 e0       	ldi	r31, 0x00	; 0
    4466:	80 81       	ld	r24, Z
    4468:	8b 7f       	andi	r24, 0xFB	; 251
    446a:	8c 93       	st	X, r24
}
    446c:	cf 91       	pop	r28
    446e:	df 91       	pop	r29
    4470:	08 95       	ret

00004472 <Timer2_Start_Count>:
void Timer2_Start_Count()
{
    4472:	df 93       	push	r29
    4474:	cf 93       	push	r28
    4476:	cd b7       	in	r28, 0x3d	; 61
    4478:	de b7       	in	r29, 0x3e	; 62
	Timer2_Set_Clk();
    447a:	0e 94 ff 21 	call	0x43fe	; 0x43fe <Timer2_Set_Clk>
}
    447e:	cf 91       	pop	r28
    4480:	df 91       	pop	r29
    4482:	08 95       	ret

00004484 <Timer2_Set_OverFlow_Mode>:
void Timer2_Set_OverFlow_Mode()
{
    4484:	df 93       	push	r29
    4486:	cf 93       	push	r28
    4488:	cd b7       	in	r28, 0x3d	; 61
    448a:	de b7       	in	r29, 0x3e	; 62
	/* Set the Timer Mode to overflow mode */
	CLEAR_BIT(TCCR2,WGM20);
    448c:	a5 e4       	ldi	r26, 0x45	; 69
    448e:	b0 e0       	ldi	r27, 0x00	; 0
    4490:	e5 e4       	ldi	r30, 0x45	; 69
    4492:	f0 e0       	ldi	r31, 0x00	; 0
    4494:	80 81       	ld	r24, Z
    4496:	8f 7b       	andi	r24, 0xBF	; 191
    4498:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2,WGM21);
    449a:	a5 e4       	ldi	r26, 0x45	; 69
    449c:	b0 e0       	ldi	r27, 0x00	; 0
    449e:	e5 e4       	ldi	r30, 0x45	; 69
    44a0:	f0 e0       	ldi	r31, 0x00	; 0
    44a2:	80 81       	ld	r24, Z
    44a4:	87 7f       	andi	r24, 0xF7	; 247
    44a6:	8c 93       	st	X, r24
	/* Set Global Interrupt */
	Set_Global_Interrupt();
    44a8:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <Set_Global_Interrupt>
	/* Set TOIE0 BIT */
	SET_BIT(TIMSK,TOIE2);
    44ac:	a9 e5       	ldi	r26, 0x59	; 89
    44ae:	b0 e0       	ldi	r27, 0x00	; 0
    44b0:	e9 e5       	ldi	r30, 0x59	; 89
    44b2:	f0 e0       	ldi	r31, 0x00	; 0
    44b4:	80 81       	ld	r24, Z
    44b6:	80 64       	ori	r24, 0x40	; 64
    44b8:	8c 93       	st	X, r24
	/* Set the Timer Clk */
	Timer2_Start_Count();
    44ba:	0e 94 39 22 	call	0x4472	; 0x4472 <Timer2_Start_Count>
}
    44be:	cf 91       	pop	r28
    44c0:	df 91       	pop	r29
    44c2:	08 95       	ret

000044c4 <Timer2_Set_CTC_Mode>:
void Timer2_Set_CTC_Mode(u8 OCR2_VALUE)
{
    44c4:	df 93       	push	r29
    44c6:	cf 93       	push	r28
    44c8:	0f 92       	push	r0
    44ca:	cd b7       	in	r28, 0x3d	; 61
    44cc:	de b7       	in	r29, 0x3e	; 62
    44ce:	89 83       	std	Y+1, r24	; 0x01
	/* Set the Timer Mode to CTC mode */
	CLEAR_BIT(TCCR2,WGM20);
    44d0:	a5 e4       	ldi	r26, 0x45	; 69
    44d2:	b0 e0       	ldi	r27, 0x00	; 0
    44d4:	e5 e4       	ldi	r30, 0x45	; 69
    44d6:	f0 e0       	ldi	r31, 0x00	; 0
    44d8:	80 81       	ld	r24, Z
    44da:	8f 7b       	andi	r24, 0xBF	; 191
    44dc:	8c 93       	st	X, r24
	SET_BIT(TCCR2,WGM21);
    44de:	a5 e4       	ldi	r26, 0x45	; 69
    44e0:	b0 e0       	ldi	r27, 0x00	; 0
    44e2:	e5 e4       	ldi	r30, 0x45	; 69
    44e4:	f0 e0       	ldi	r31, 0x00	; 0
    44e6:	80 81       	ld	r24, Z
    44e8:	88 60       	ori	r24, 0x08	; 8
    44ea:	8c 93       	st	X, r24
	/* load a value in OCR2 */
	OCR2 = OCR2_VALUE;
    44ec:	e3 e4       	ldi	r30, 0x43	; 67
    44ee:	f0 e0       	ldi	r31, 0x00	; 0
    44f0:	89 81       	ldd	r24, Y+1	; 0x01
    44f2:	80 83       	st	Z, r24
	/* Set Global Interrupt */
	Set_Global_Interrupt();
    44f4:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <Set_Global_Interrupt>
	/* Set OCIE0 BIT */
	SET_BIT(TIMSK,OCIE2);
    44f8:	a9 e5       	ldi	r26, 0x59	; 89
    44fa:	b0 e0       	ldi	r27, 0x00	; 0
    44fc:	e9 e5       	ldi	r30, 0x59	; 89
    44fe:	f0 e0       	ldi	r31, 0x00	; 0
    4500:	80 81       	ld	r24, Z
    4502:	80 68       	ori	r24, 0x80	; 128
    4504:	8c 93       	st	X, r24
	/* Set the Timer Clk */
	Timer2_Start_Count();
    4506:	0e 94 39 22 	call	0x4472	; 0x4472 <Timer2_Start_Count>
}
    450a:	0f 90       	pop	r0
    450c:	cf 91       	pop	r28
    450e:	df 91       	pop	r29
    4510:	08 95       	ret

00004512 <Timer2_CTC_Generate_Signal>:
void Timer2_CTC_Generate_Signal(u8 OCR2_VALUE)
{
    4512:	df 93       	push	r29
    4514:	cf 93       	push	r28
    4516:	0f 92       	push	r0
    4518:	cd b7       	in	r28, 0x3d	; 61
    451a:	de b7       	in	r29, 0x3e	; 62
    451c:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_7,OUTPUT);
    451e:	84 e4       	ldi	r24, 0x44	; 68
    4520:	67 e0       	ldi	r22, 0x07	; 7
    4522:	41 e0       	ldi	r20, 0x01	; 1
    4524:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to CTC mode */
	CLEAR_BIT(TCCR2,WGM20);
    4528:	a5 e4       	ldi	r26, 0x45	; 69
    452a:	b0 e0       	ldi	r27, 0x00	; 0
    452c:	e5 e4       	ldi	r30, 0x45	; 69
    452e:	f0 e0       	ldi	r31, 0x00	; 0
    4530:	80 81       	ld	r24, Z
    4532:	8f 7b       	andi	r24, 0xBF	; 191
    4534:	8c 93       	st	X, r24
	SET_BIT(TCCR2,WGM21);
    4536:	a5 e4       	ldi	r26, 0x45	; 69
    4538:	b0 e0       	ldi	r27, 0x00	; 0
    453a:	e5 e4       	ldi	r30, 0x45	; 69
    453c:	f0 e0       	ldi	r31, 0x00	; 0
    453e:	80 81       	ld	r24, Z
    4540:	88 60       	ori	r24, 0x08	; 8
    4542:	8c 93       	st	X, r24
	/* load a value in OCR2 */
	OCR2 = OCR2_VALUE;
    4544:	e3 e4       	ldi	r30, 0x43	; 67
    4546:	f0 e0       	ldi	r31, 0x00	; 0
    4548:	89 81       	ldd	r24, Y+1	; 0x01
    454a:	80 83       	st	Z, r24
	/* Set the Timer Clk */
	Timer2_Set_Clk();
    454c:	0e 94 ff 21 	call	0x43fe	; 0x43fe <Timer2_Set_Clk>
	/* Set Signal to be Toggle at Compare Match*/
	/* Pin PB3 ( OCO ) */
	SET_BIT(TCCR2,COM20);
    4550:	a5 e4       	ldi	r26, 0x45	; 69
    4552:	b0 e0       	ldi	r27, 0x00	; 0
    4554:	e5 e4       	ldi	r30, 0x45	; 69
    4556:	f0 e0       	ldi	r31, 0x00	; 0
    4558:	80 81       	ld	r24, Z
    455a:	80 61       	ori	r24, 0x10	; 16
    455c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2,COM21);
    455e:	a5 e4       	ldi	r26, 0x45	; 69
    4560:	b0 e0       	ldi	r27, 0x00	; 0
    4562:	e5 e4       	ldi	r30, 0x45	; 69
    4564:	f0 e0       	ldi	r31, 0x00	; 0
    4566:	80 81       	ld	r24, Z
    4568:	8f 7d       	andi	r24, 0xDF	; 223
    456a:	8c 93       	st	X, r24
}
    456c:	0f 90       	pop	r0
    456e:	cf 91       	pop	r28
    4570:	df 91       	pop	r29
    4572:	08 95       	ret

00004574 <Timer2_Set_FastPWM_Mode>:
void Timer2_Set_FastPWM_Mode(u8 OCR2_VALUE)
{
    4574:	df 93       	push	r29
    4576:	cf 93       	push	r28
    4578:	0f 92       	push	r0
    457a:	cd b7       	in	r28, 0x3d	; 61
    457c:	de b7       	in	r29, 0x3e	; 62
    457e:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_D,PIN_NO_7,OUTPUT);
    4580:	84 e4       	ldi	r24, 0x44	; 68
    4582:	67 e0       	ldi	r22, 0x07	; 7
    4584:	41 e0       	ldi	r20, 0x01	; 1
    4586:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to Fast PWM mode */
	SET_BIT(TCCR2,WGM20);
    458a:	a5 e4       	ldi	r26, 0x45	; 69
    458c:	b0 e0       	ldi	r27, 0x00	; 0
    458e:	e5 e4       	ldi	r30, 0x45	; 69
    4590:	f0 e0       	ldi	r31, 0x00	; 0
    4592:	80 81       	ld	r24, Z
    4594:	80 64       	ori	r24, 0x40	; 64
    4596:	8c 93       	st	X, r24
	SET_BIT(TCCR2,WGM21);
    4598:	a5 e4       	ldi	r26, 0x45	; 69
    459a:	b0 e0       	ldi	r27, 0x00	; 0
    459c:	e5 e4       	ldi	r30, 0x45	; 69
    459e:	f0 e0       	ldi	r31, 0x00	; 0
    45a0:	80 81       	ld	r24, Z
    45a2:	88 60       	ori	r24, 0x08	; 8
    45a4:	8c 93       	st	X, r24
	/* load a value in OCR0 */
	OCR2 = OCR2_VALUE;
    45a6:	e3 e4       	ldi	r30, 0x43	; 67
    45a8:	f0 e0       	ldi	r31, 0x00	; 0
    45aa:	89 81       	ldd	r24, Y+1	; 0x01
    45ac:	80 83       	st	Z, r24
	/* Set the Timer Clk */
	Timer2_Set_Clk();
    45ae:	0e 94 ff 21 	call	0x43fe	; 0x43fe <Timer2_Set_Clk>
	/* Set PWM On / Off  */
#if TIMER2_SET_OC2_ON_BOTTOM
	CLEAR_BIT(TCCR2,COM20);
    45b2:	a5 e4       	ldi	r26, 0x45	; 69
    45b4:	b0 e0       	ldi	r27, 0x00	; 0
    45b6:	e5 e4       	ldi	r30, 0x45	; 69
    45b8:	f0 e0       	ldi	r31, 0x00	; 0
    45ba:	80 81       	ld	r24, Z
    45bc:	8f 7e       	andi	r24, 0xEF	; 239
    45be:	8c 93       	st	X, r24
	SET_BIT(TCCR2,COM21);
    45c0:	a5 e4       	ldi	r26, 0x45	; 69
    45c2:	b0 e0       	ldi	r27, 0x00	; 0
    45c4:	e5 e4       	ldi	r30, 0x45	; 69
    45c6:	f0 e0       	ldi	r31, 0x00	; 0
    45c8:	80 81       	ld	r24, Z
    45ca:	80 62       	ori	r24, 0x20	; 32
    45cc:	8c 93       	st	X, r24
#elif TIMER2_SET_OC2_ON_COMPARE_MATCH
	SET_BIT(TCCR2,COM20);
	SET_BIT(TCCR2,COM21);
#endif
}
    45ce:	0f 90       	pop	r0
    45d0:	cf 91       	pop	r28
    45d2:	df 91       	pop	r29
    45d4:	08 95       	ret

000045d6 <PWM_Timer2_Generate>:
void PWM_Timer2_Generate(u8 SPEED_PERCENT)
{
    45d6:	df 93       	push	r29
    45d8:	cf 93       	push	r28
    45da:	0f 92       	push	r0
    45dc:	cd b7       	in	r28, 0x3d	; 61
    45de:	de b7       	in	r29, 0x3e	; 62
    45e0:	89 83       	std	Y+1, r24	; 0x01
	Timer2_Set_FastPWM_Mode((SPEED_PERCENT * 2.55));
    45e2:	89 81       	ldd	r24, Y+1	; 0x01
    45e4:	88 2f       	mov	r24, r24
    45e6:	90 e0       	ldi	r25, 0x00	; 0
    45e8:	aa 27       	eor	r26, r26
    45ea:	97 fd       	sbrc	r25, 7
    45ec:	a0 95       	com	r26
    45ee:	ba 2f       	mov	r27, r26
    45f0:	bc 01       	movw	r22, r24
    45f2:	cd 01       	movw	r24, r26
    45f4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    45f8:	dc 01       	movw	r26, r24
    45fa:	cb 01       	movw	r24, r22
    45fc:	bc 01       	movw	r22, r24
    45fe:	cd 01       	movw	r24, r26
    4600:	23 e3       	ldi	r18, 0x33	; 51
    4602:	33 e3       	ldi	r19, 0x33	; 51
    4604:	43 e2       	ldi	r20, 0x23	; 35
    4606:	50 e4       	ldi	r21, 0x40	; 64
    4608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    460c:	dc 01       	movw	r26, r24
    460e:	cb 01       	movw	r24, r22
    4610:	bc 01       	movw	r22, r24
    4612:	cd 01       	movw	r24, r26
    4614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4618:	dc 01       	movw	r26, r24
    461a:	cb 01       	movw	r24, r22
    461c:	0e 94 ba 22 	call	0x4574	; 0x4574 <Timer2_Set_FastPWM_Mode>
}
    4620:	0f 90       	pop	r0
    4622:	cf 91       	pop	r28
    4624:	df 91       	pop	r29
    4626:	08 95       	ret

00004628 <Timer2_Set_PhaseCorrect_PWM_Mode>:
void Timer2_Set_PhaseCorrect_PWM_Mode(u8 OCR2_VALUE)
{
    4628:	df 93       	push	r29
    462a:	cf 93       	push	r28
    462c:	0f 92       	push	r0
    462e:	cd b7       	in	r28, 0x3d	; 61
    4630:	de b7       	in	r29, 0x3e	; 62
    4632:	89 83       	std	Y+1, r24	; 0x01
	DIO_Set_Pin_Direction(PORT_B,PIN_NO_3,OUTPUT);
    4634:	82 e4       	ldi	r24, 0x42	; 66
    4636:	63 e0       	ldi	r22, 0x03	; 3
    4638:	41 e0       	ldi	r20, 0x01	; 1
    463a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	/* Set the Timer Mode to Phase Correct PWM mode */
	SET_BIT(TCCR2,WGM20);
    463e:	a5 e4       	ldi	r26, 0x45	; 69
    4640:	b0 e0       	ldi	r27, 0x00	; 0
    4642:	e5 e4       	ldi	r30, 0x45	; 69
    4644:	f0 e0       	ldi	r31, 0x00	; 0
    4646:	80 81       	ld	r24, Z
    4648:	80 64       	ori	r24, 0x40	; 64
    464a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2,WGM21);
    464c:	a5 e4       	ldi	r26, 0x45	; 69
    464e:	b0 e0       	ldi	r27, 0x00	; 0
    4650:	e5 e4       	ldi	r30, 0x45	; 69
    4652:	f0 e0       	ldi	r31, 0x00	; 0
    4654:	80 81       	ld	r24, Z
    4656:	87 7f       	andi	r24, 0xF7	; 247
    4658:	8c 93       	st	X, r24
	/* load a value in OCR2 */
	OCR2 = OCR2_VALUE;
    465a:	e3 e4       	ldi	r30, 0x43	; 67
    465c:	f0 e0       	ldi	r31, 0x00	; 0
    465e:	89 81       	ldd	r24, Y+1	; 0x01
    4660:	80 83       	st	Z, r24
	/* Set the Timer Clk */
	Timer2_Set_Clk();
    4662:	0e 94 ff 21 	call	0x43fe	; 0x43fe <Timer2_Set_Clk>
#if TIMER2_SET_OC2_ON_DOWN_COUNTING
	CLEAR_BIT(TCCR2,COM20);
    4666:	a5 e4       	ldi	r26, 0x45	; 69
    4668:	b0 e0       	ldi	r27, 0x00	; 0
    466a:	e5 e4       	ldi	r30, 0x45	; 69
    466c:	f0 e0       	ldi	r31, 0x00	; 0
    466e:	80 81       	ld	r24, Z
    4670:	8f 7e       	andi	r24, 0xEF	; 239
    4672:	8c 93       	st	X, r24
	SET_BIT(TCCR2,COM21);
    4674:	a5 e4       	ldi	r26, 0x45	; 69
    4676:	b0 e0       	ldi	r27, 0x00	; 0
    4678:	e5 e4       	ldi	r30, 0x45	; 69
    467a:	f0 e0       	ldi	r31, 0x00	; 0
    467c:	80 81       	ld	r24, Z
    467e:	80 62       	ori	r24, 0x20	; 32
    4680:	8c 93       	st	X, r24
#elif TIMER2_SET_OC2_ON_UP_COUNTING
	SET_BIT(TCCR2,COM20);
	SET_BIT(TCCR2,COM21);
#endif
}
    4682:	0f 90       	pop	r0
    4684:	cf 91       	pop	r28
    4686:	df 91       	pop	r29
    4688:	08 95       	ret

0000468a <Timer2_Clear_TCNT2>:
void Timer2_Clear_TCNT2()
{
    468a:	df 93       	push	r29
    468c:	cf 93       	push	r28
    468e:	cd b7       	in	r28, 0x3d	; 61
    4690:	de b7       	in	r29, 0x3e	; 62
	TCNT2 = 0;
    4692:	e4 e4       	ldi	r30, 0x44	; 68
    4694:	f0 e0       	ldi	r31, 0x00	; 0
    4696:	10 82       	st	Z, r1
}
    4698:	cf 91       	pop	r28
    469a:	df 91       	pop	r29
    469c:	08 95       	ret

0000469e <UART_vInit>:
#include "USART.h"

void UART_vInit(u32 BAUD_RATE)
{
    469e:	df 93       	push	r29
    46a0:	cf 93       	push	r28
    46a2:	00 d0       	rcall	.+0      	; 0x46a4 <UART_vInit+0x6>
    46a4:	00 d0       	rcall	.+0      	; 0x46a6 <UART_vInit+0x8>
    46a6:	00 d0       	rcall	.+0      	; 0x46a8 <UART_vInit+0xa>
    46a8:	cd b7       	in	r28, 0x3d	; 61
    46aa:	de b7       	in	r29, 0x3e	; 62
    46ac:	6b 83       	std	Y+3, r22	; 0x03
    46ae:	7c 83       	std	Y+4, r23	; 0x04
    46b0:	8d 83       	std	Y+5, r24	; 0x05
    46b2:	9e 83       	std	Y+6, r25	; 0x06
	// Set TX, RX Pins
	DIO_Set_Pin_Direction(PORT_D, PIN_NO_0, INPUT);
    46b4:	84 e4       	ldi	r24, 0x44	; 68
    46b6:	60 e0       	ldi	r22, 0x00	; 0
    46b8:	40 e0       	ldi	r20, 0x00	; 0
    46ba:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(PORT_D, PIN_NO_1, OUTPUT);
    46be:	84 e4       	ldi	r24, 0x44	; 68
    46c0:	61 e0       	ldi	r22, 0x01	; 1
    46c2:	41 e0       	ldi	r20, 0x01	; 1
    46c4:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
#if defined NORMAL_SPEED
	Set_Normal_Asynchronous_Mode();
    46c8:	0e 94 bb 24 	call	0x4976	; 0x4976 <Set_Normal_Asynchronous_Mode>
#elif defined HIGH_SPEED
	Set_Double_Speed_Asynchronous_Mode();
#endif
	// SET The Baud Rate
	u16 UBRR = (F_CPU/(16*BAUD_RATE)) - 1;
    46cc:	8b 81       	ldd	r24, Y+3	; 0x03
    46ce:	9c 81       	ldd	r25, Y+4	; 0x04
    46d0:	ad 81       	ldd	r26, Y+5	; 0x05
    46d2:	be 81       	ldd	r27, Y+6	; 0x06
    46d4:	88 0f       	add	r24, r24
    46d6:	99 1f       	adc	r25, r25
    46d8:	aa 1f       	adc	r26, r26
    46da:	bb 1f       	adc	r27, r27
    46dc:	88 0f       	add	r24, r24
    46de:	99 1f       	adc	r25, r25
    46e0:	aa 1f       	adc	r26, r26
    46e2:	bb 1f       	adc	r27, r27
    46e4:	88 0f       	add	r24, r24
    46e6:	99 1f       	adc	r25, r25
    46e8:	aa 1f       	adc	r26, r26
    46ea:	bb 1f       	adc	r27, r27
    46ec:	88 0f       	add	r24, r24
    46ee:	99 1f       	adc	r25, r25
    46f0:	aa 1f       	adc	r26, r26
    46f2:	bb 1f       	adc	r27, r27
    46f4:	9c 01       	movw	r18, r24
    46f6:	ad 01       	movw	r20, r26
    46f8:	80 e0       	ldi	r24, 0x00	; 0
    46fa:	92 e1       	ldi	r25, 0x12	; 18
    46fc:	aa e7       	ldi	r26, 0x7A	; 122
    46fe:	b0 e0       	ldi	r27, 0x00	; 0
    4700:	bc 01       	movw	r22, r24
    4702:	cd 01       	movw	r24, r26
    4704:	0e 94 73 2c 	call	0x58e6	; 0x58e6 <__udivmodsi4>
    4708:	da 01       	movw	r26, r20
    470a:	c9 01       	movw	r24, r18
    470c:	01 97       	sbiw	r24, 0x01	; 1
    470e:	9a 83       	std	Y+2, r25	; 0x02
    4710:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = (u8)UBRR>>8;
    4712:	e0 e4       	ldi	r30, 0x40	; 64
    4714:	f0 e0       	ldi	r31, 0x00	; 0
    4716:	89 81       	ldd	r24, Y+1	; 0x01
    4718:	88 2f       	mov	r24, r24
    471a:	90 e0       	ldi	r25, 0x00	; 0
    471c:	89 2f       	mov	r24, r25
    471e:	99 0f       	add	r25, r25
    4720:	99 0b       	sbc	r25, r25
    4722:	80 83       	st	Z, r24
	UBRRL = (u8)UBRR;
    4724:	e9 e2       	ldi	r30, 0x29	; 41
    4726:	f0 e0       	ldi	r31, 0x00	; 0
    4728:	89 81       	ldd	r24, Y+1	; 0x01
    472a:	80 83       	st	Z, r24
	// Enable TX, RX
	SET_BIT(UCSRB,RXEN);
    472c:	aa e2       	ldi	r26, 0x2A	; 42
    472e:	b0 e0       	ldi	r27, 0x00	; 0
    4730:	ea e2       	ldi	r30, 0x2A	; 42
    4732:	f0 e0       	ldi	r31, 0x00	; 0
    4734:	80 81       	ld	r24, Z
    4736:	80 61       	ori	r24, 0x10	; 16
    4738:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN);
    473a:	aa e2       	ldi	r26, 0x2A	; 42
    473c:	b0 e0       	ldi	r27, 0x00	; 0
    473e:	ea e2       	ldi	r30, 0x2A	; 42
    4740:	f0 e0       	ldi	r31, 0x00	; 0
    4742:	80 81       	ld	r24, Z
    4744:	88 60       	ori	r24, 0x08	; 8
    4746:	8c 93       	st	X, r24
	// Set Number of bits
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
    4748:	e0 e4       	ldi	r30, 0x40	; 64
    474a:	f0 e0       	ldi	r31, 0x00	; 0
    474c:	86 e8       	ldi	r24, 0x86	; 134
    474e:	80 83       	st	Z, r24
}
    4750:	26 96       	adiw	r28, 0x06	; 6
    4752:	0f b6       	in	r0, 0x3f	; 63
    4754:	f8 94       	cli
    4756:	de bf       	out	0x3e, r29	; 62
    4758:	0f be       	out	0x3f, r0	; 63
    475a:	cd bf       	out	0x3d, r28	; 61
    475c:	cf 91       	pop	r28
    475e:	df 91       	pop	r29
    4760:	08 95       	ret

00004762 <UART_Send_Data>:
void UART_Send_Data(u8 DATA)
{
    4762:	df 93       	push	r29
    4764:	cf 93       	push	r28
    4766:	0f 92       	push	r0
    4768:	cd b7       	in	r28, 0x3d	; 61
    476a:	de b7       	in	r29, 0x3e	; 62
    476c:	89 83       	std	Y+1, r24	; 0x01
	// Check if the Data Register of the TX is there's data or not
	while(READ_BIT(UCSRA,UDRE) == 0);
    476e:	eb e2       	ldi	r30, 0x2B	; 43
    4770:	f0 e0       	ldi	r31, 0x00	; 0
    4772:	80 81       	ld	r24, Z
    4774:	88 2f       	mov	r24, r24
    4776:	90 e0       	ldi	r25, 0x00	; 0
    4778:	80 72       	andi	r24, 0x20	; 32
    477a:	90 70       	andi	r25, 0x00	; 0
    477c:	95 95       	asr	r25
    477e:	87 95       	ror	r24
    4780:	95 95       	asr	r25
    4782:	87 95       	ror	r24
    4784:	95 95       	asr	r25
    4786:	87 95       	ror	r24
    4788:	95 95       	asr	r25
    478a:	87 95       	ror	r24
    478c:	95 95       	asr	r25
    478e:	87 95       	ror	r24
    4790:	00 97       	sbiw	r24, 0x00	; 0
    4792:	69 f3       	breq	.-38     	; 0x476e <UART_Send_Data+0xc>
	UDR = DATA;
    4794:	ec e2       	ldi	r30, 0x2C	; 44
    4796:	f0 e0       	ldi	r31, 0x00	; 0
    4798:	89 81       	ldd	r24, Y+1	; 0x01
    479a:	80 83       	st	Z, r24
}
    479c:	0f 90       	pop	r0
    479e:	cf 91       	pop	r28
    47a0:	df 91       	pop	r29
    47a2:	08 95       	ret

000047a4 <UART_Send_String>:
void UART_Send_String(u8* DATA)
{
    47a4:	df 93       	push	r29
    47a6:	cf 93       	push	r28
    47a8:	cd b7       	in	r28, 0x3d	; 61
    47aa:	de b7       	in	r29, 0x3e	; 62
    47ac:	60 97       	sbiw	r28, 0x10	; 16
    47ae:	0f b6       	in	r0, 0x3f	; 63
    47b0:	f8 94       	cli
    47b2:	de bf       	out	0x3e, r29	; 62
    47b4:	0f be       	out	0x3f, r0	; 63
    47b6:	cd bf       	out	0x3d, r28	; 61
    47b8:	98 8b       	std	Y+16, r25	; 0x10
    47ba:	8f 87       	std	Y+15, r24	; 0x0f
    47bc:	7c c0       	rjmp	.+248    	; 0x48b6 <UART_Send_String+0x112>
	while(*DATA != 0)
	{
		UART_Send_Data(*DATA);
    47be:	ef 85       	ldd	r30, Y+15	; 0x0f
    47c0:	f8 89       	ldd	r31, Y+16	; 0x10
    47c2:	80 81       	ld	r24, Z
    47c4:	0e 94 b1 23 	call	0x4762	; 0x4762 <UART_Send_Data>
		DATA++;
    47c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    47ca:	98 89       	ldd	r25, Y+16	; 0x10
    47cc:	01 96       	adiw	r24, 0x01	; 1
    47ce:	98 8b       	std	Y+16, r25	; 0x10
    47d0:	8f 87       	std	Y+15, r24	; 0x0f
    47d2:	80 e0       	ldi	r24, 0x00	; 0
    47d4:	90 e0       	ldi	r25, 0x00	; 0
    47d6:	a8 ec       	ldi	r26, 0xC8	; 200
    47d8:	b2 e4       	ldi	r27, 0x42	; 66
    47da:	8b 87       	std	Y+11, r24	; 0x0b
    47dc:	9c 87       	std	Y+12, r25	; 0x0c
    47de:	ad 87       	std	Y+13, r26	; 0x0d
    47e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    47e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    47e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    47e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    47ea:	20 e0       	ldi	r18, 0x00	; 0
    47ec:	30 e0       	ldi	r19, 0x00	; 0
    47ee:	4a ef       	ldi	r20, 0xFA	; 250
    47f0:	54 e4       	ldi	r21, 0x44	; 68
    47f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47f6:	dc 01       	movw	r26, r24
    47f8:	cb 01       	movw	r24, r22
    47fa:	8f 83       	std	Y+7, r24	; 0x07
    47fc:	98 87       	std	Y+8, r25	; 0x08
    47fe:	a9 87       	std	Y+9, r26	; 0x09
    4800:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4802:	6f 81       	ldd	r22, Y+7	; 0x07
    4804:	78 85       	ldd	r23, Y+8	; 0x08
    4806:	89 85       	ldd	r24, Y+9	; 0x09
    4808:	9a 85       	ldd	r25, Y+10	; 0x0a
    480a:	20 e0       	ldi	r18, 0x00	; 0
    480c:	30 e0       	ldi	r19, 0x00	; 0
    480e:	40 e8       	ldi	r20, 0x80	; 128
    4810:	5f e3       	ldi	r21, 0x3F	; 63
    4812:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4816:	88 23       	and	r24, r24
    4818:	2c f4       	brge	.+10     	; 0x4824 <UART_Send_String+0x80>
		__ticks = 1;
    481a:	81 e0       	ldi	r24, 0x01	; 1
    481c:	90 e0       	ldi	r25, 0x00	; 0
    481e:	9e 83       	std	Y+6, r25	; 0x06
    4820:	8d 83       	std	Y+5, r24	; 0x05
    4822:	3f c0       	rjmp	.+126    	; 0x48a2 <UART_Send_String+0xfe>
	else if (__tmp > 65535)
    4824:	6f 81       	ldd	r22, Y+7	; 0x07
    4826:	78 85       	ldd	r23, Y+8	; 0x08
    4828:	89 85       	ldd	r24, Y+9	; 0x09
    482a:	9a 85       	ldd	r25, Y+10	; 0x0a
    482c:	20 e0       	ldi	r18, 0x00	; 0
    482e:	3f ef       	ldi	r19, 0xFF	; 255
    4830:	4f e7       	ldi	r20, 0x7F	; 127
    4832:	57 e4       	ldi	r21, 0x47	; 71
    4834:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4838:	18 16       	cp	r1, r24
    483a:	4c f5       	brge	.+82     	; 0x488e <UART_Send_String+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    483c:	6b 85       	ldd	r22, Y+11	; 0x0b
    483e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4840:	8d 85       	ldd	r24, Y+13	; 0x0d
    4842:	9e 85       	ldd	r25, Y+14	; 0x0e
    4844:	20 e0       	ldi	r18, 0x00	; 0
    4846:	30 e0       	ldi	r19, 0x00	; 0
    4848:	40 e2       	ldi	r20, 0x20	; 32
    484a:	51 e4       	ldi	r21, 0x41	; 65
    484c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4850:	dc 01       	movw	r26, r24
    4852:	cb 01       	movw	r24, r22
    4854:	bc 01       	movw	r22, r24
    4856:	cd 01       	movw	r24, r26
    4858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    485c:	dc 01       	movw	r26, r24
    485e:	cb 01       	movw	r24, r22
    4860:	9e 83       	std	Y+6, r25	; 0x06
    4862:	8d 83       	std	Y+5, r24	; 0x05
    4864:	0f c0       	rjmp	.+30     	; 0x4884 <UART_Send_String+0xe0>
    4866:	88 ec       	ldi	r24, 0xC8	; 200
    4868:	90 e0       	ldi	r25, 0x00	; 0
    486a:	9c 83       	std	Y+4, r25	; 0x04
    486c:	8b 83       	std	Y+3, r24	; 0x03
    486e:	8b 81       	ldd	r24, Y+3	; 0x03
    4870:	9c 81       	ldd	r25, Y+4	; 0x04
    4872:	01 97       	sbiw	r24, 0x01	; 1
    4874:	f1 f7       	brne	.-4      	; 0x4872 <UART_Send_String+0xce>
    4876:	9c 83       	std	Y+4, r25	; 0x04
    4878:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    487a:	8d 81       	ldd	r24, Y+5	; 0x05
    487c:	9e 81       	ldd	r25, Y+6	; 0x06
    487e:	01 97       	sbiw	r24, 0x01	; 1
    4880:	9e 83       	std	Y+6, r25	; 0x06
    4882:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4884:	8d 81       	ldd	r24, Y+5	; 0x05
    4886:	9e 81       	ldd	r25, Y+6	; 0x06
    4888:	00 97       	sbiw	r24, 0x00	; 0
    488a:	69 f7       	brne	.-38     	; 0x4866 <UART_Send_String+0xc2>
    488c:	14 c0       	rjmp	.+40     	; 0x48b6 <UART_Send_String+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    488e:	6f 81       	ldd	r22, Y+7	; 0x07
    4890:	78 85       	ldd	r23, Y+8	; 0x08
    4892:	89 85       	ldd	r24, Y+9	; 0x09
    4894:	9a 85       	ldd	r25, Y+10	; 0x0a
    4896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    489a:	dc 01       	movw	r26, r24
    489c:	cb 01       	movw	r24, r22
    489e:	9e 83       	std	Y+6, r25	; 0x06
    48a0:	8d 83       	std	Y+5, r24	; 0x05
    48a2:	8d 81       	ldd	r24, Y+5	; 0x05
    48a4:	9e 81       	ldd	r25, Y+6	; 0x06
    48a6:	9a 83       	std	Y+2, r25	; 0x02
    48a8:	89 83       	std	Y+1, r24	; 0x01
    48aa:	89 81       	ldd	r24, Y+1	; 0x01
    48ac:	9a 81       	ldd	r25, Y+2	; 0x02
    48ae:	01 97       	sbiw	r24, 0x01	; 1
    48b0:	f1 f7       	brne	.-4      	; 0x48ae <UART_Send_String+0x10a>
    48b2:	9a 83       	std	Y+2, r25	; 0x02
    48b4:	89 83       	std	Y+1, r24	; 0x01
	while(READ_BIT(UCSRA,UDRE) == 0);
	UDR = DATA;
}
void UART_Send_String(u8* DATA)
{
	while(*DATA != 0)
    48b6:	ef 85       	ldd	r30, Y+15	; 0x0f
    48b8:	f8 89       	ldd	r31, Y+16	; 0x10
    48ba:	80 81       	ld	r24, Z
    48bc:	88 23       	and	r24, r24
    48be:	09 f0       	breq	.+2      	; 0x48c2 <UART_Send_String+0x11e>
    48c0:	7e cf       	rjmp	.-260    	; 0x47be <UART_Send_String+0x1a>
	{
		UART_Send_Data(*DATA);
		DATA++;
		_delay_ms(100);
	}
}
    48c2:	60 96       	adiw	r28, 0x10	; 16
    48c4:	0f b6       	in	r0, 0x3f	; 63
    48c6:	f8 94       	cli
    48c8:	de bf       	out	0x3e, r29	; 62
    48ca:	0f be       	out	0x3f, r0	; 63
    48cc:	cd bf       	out	0x3d, r28	; 61
    48ce:	cf 91       	pop	r28
    48d0:	df 91       	pop	r29
    48d2:	08 95       	ret

000048d4 <UART_u8Receive_Data>:
u8 UART_u8Receive_Data()
{
    48d4:	df 93       	push	r29
    48d6:	cf 93       	push	r28
    48d8:	cd b7       	in	r28, 0x3d	; 61
    48da:	de b7       	in	r29, 0x3e	; 62
	// Check if there's Received on RX Buffer exist or not
	while(READ_BIT(UCSRA,RXC) == 0);
    48dc:	eb e2       	ldi	r30, 0x2B	; 43
    48de:	f0 e0       	ldi	r31, 0x00	; 0
    48e0:	80 81       	ld	r24, Z
    48e2:	88 1f       	adc	r24, r24
    48e4:	88 27       	eor	r24, r24
    48e6:	88 1f       	adc	r24, r24
    48e8:	88 2f       	mov	r24, r24
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	90 70       	andi	r25, 0x00	; 0
    48ee:	00 97       	sbiw	r24, 0x00	; 0
    48f0:	a9 f3       	breq	.-22     	; 0x48dc <UART_u8Receive_Data+0x8>
	return UDR;
    48f2:	ec e2       	ldi	r30, 0x2C	; 44
    48f4:	f0 e0       	ldi	r31, 0x00	; 0
    48f6:	80 81       	ld	r24, Z
}
    48f8:	cf 91       	pop	r28
    48fa:	df 91       	pop	r29
    48fc:	08 95       	ret

000048fe <UART_DOR_Check>:
// Happens when the data rate is different ( Data over Run )
u8 UART_DOR_Check()
{
    48fe:	df 93       	push	r29
    4900:	cf 93       	push	r28
    4902:	cd b7       	in	r28, 0x3d	; 61
    4904:	de b7       	in	r29, 0x3e	; 62
	return READ_BIT(UCSRA,DOR);
    4906:	eb e2       	ldi	r30, 0x2B	; 43
    4908:	f0 e0       	ldi	r31, 0x00	; 0
    490a:	80 81       	ld	r24, Z
    490c:	88 2f       	mov	r24, r24
    490e:	90 e0       	ldi	r25, 0x00	; 0
    4910:	88 70       	andi	r24, 0x08	; 8
    4912:	90 70       	andi	r25, 0x00	; 0
    4914:	95 95       	asr	r25
    4916:	87 95       	ror	r24
    4918:	95 95       	asr	r25
    491a:	87 95       	ror	r24
    491c:	95 95       	asr	r25
    491e:	87 95       	ror	r24
}
    4920:	cf 91       	pop	r28
    4922:	df 91       	pop	r29
    4924:	08 95       	ret

00004926 <UART_PE_Check>:
// Check The Parity Error
u8 UART_PE_Check()
{
    4926:	df 93       	push	r29
    4928:	cf 93       	push	r28
    492a:	cd b7       	in	r28, 0x3d	; 61
    492c:	de b7       	in	r29, 0x3e	; 62
	return READ_BIT(UCSRA,PE);
    492e:	eb e2       	ldi	r30, 0x2B	; 43
    4930:	f0 e0       	ldi	r31, 0x00	; 0
    4932:	80 81       	ld	r24, Z
    4934:	88 2f       	mov	r24, r24
    4936:	90 e0       	ldi	r25, 0x00	; 0
    4938:	84 70       	andi	r24, 0x04	; 4
    493a:	90 70       	andi	r25, 0x00	; 0
    493c:	95 95       	asr	r25
    493e:	87 95       	ror	r24
    4940:	95 95       	asr	r25
    4942:	87 95       	ror	r24
}
    4944:	cf 91       	pop	r28
    4946:	df 91       	pop	r29
    4948:	08 95       	ret

0000494a <UART_FE_Check>:
// Check Frame Error
u8 UART_FE_Check()
{
    494a:	df 93       	push	r29
    494c:	cf 93       	push	r28
    494e:	cd b7       	in	r28, 0x3d	; 61
    4950:	de b7       	in	r29, 0x3e	; 62
	return READ_BIT(UCSRA,FE);
    4952:	eb e2       	ldi	r30, 0x2B	; 43
    4954:	f0 e0       	ldi	r31, 0x00	; 0
    4956:	80 81       	ld	r24, Z
    4958:	88 2f       	mov	r24, r24
    495a:	90 e0       	ldi	r25, 0x00	; 0
    495c:	80 71       	andi	r24, 0x10	; 16
    495e:	90 70       	andi	r25, 0x00	; 0
    4960:	95 95       	asr	r25
    4962:	87 95       	ror	r24
    4964:	95 95       	asr	r25
    4966:	87 95       	ror	r24
    4968:	95 95       	asr	r25
    496a:	87 95       	ror	r24
    496c:	95 95       	asr	r25
    496e:	87 95       	ror	r24
}
    4970:	cf 91       	pop	r28
    4972:	df 91       	pop	r29
    4974:	08 95       	ret

00004976 <Set_Normal_Asynchronous_Mode>:
void Set_Normal_Asynchronous_Mode()
{
    4976:	df 93       	push	r29
    4978:	cf 93       	push	r28
    497a:	cd b7       	in	r28, 0x3d	; 61
    497c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRA,U2X);
    497e:	ab e2       	ldi	r26, 0x2B	; 43
    4980:	b0 e0       	ldi	r27, 0x00	; 0
    4982:	eb e2       	ldi	r30, 0x2B	; 43
    4984:	f0 e0       	ldi	r31, 0x00	; 0
    4986:	80 81       	ld	r24, Z
    4988:	8d 7f       	andi	r24, 0xFD	; 253
    498a:	8c 93       	st	X, r24
}
    498c:	cf 91       	pop	r28
    498e:	df 91       	pop	r29
    4990:	08 95       	ret

00004992 <Set_Double_Speed_Asynchronous_Mode>:
void Set_Double_Speed_Asynchronous_Mode()
{
    4992:	df 93       	push	r29
    4994:	cf 93       	push	r28
    4996:	cd b7       	in	r28, 0x3d	; 61
    4998:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRA,U2X);
    499a:	ab e2       	ldi	r26, 0x2B	; 43
    499c:	b0 e0       	ldi	r27, 0x00	; 0
    499e:	eb e2       	ldi	r30, 0x2B	; 43
    49a0:	f0 e0       	ldi	r31, 0x00	; 0
    49a2:	80 81       	ld	r24, Z
    49a4:	82 60       	ori	r24, 0x02	; 2
    49a6:	8c 93       	st	X, r24
}
    49a8:	cf 91       	pop	r28
    49aa:	df 91       	pop	r29
    49ac:	08 95       	ret

000049ae <Set_UARTRX_Interrupt>:
void Set_UARTRX_Interrupt()
{
    49ae:	df 93       	push	r29
    49b0:	cf 93       	push	r28
    49b2:	cd b7       	in	r28, 0x3d	; 61
    49b4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXCIE);
    49b6:	aa e2       	ldi	r26, 0x2A	; 42
    49b8:	b0 e0       	ldi	r27, 0x00	; 0
    49ba:	ea e2       	ldi	r30, 0x2A	; 42
    49bc:	f0 e0       	ldi	r31, 0x00	; 0
    49be:	80 81       	ld	r24, Z
    49c0:	80 68       	ori	r24, 0x80	; 128
    49c2:	8c 93       	st	X, r24
}
    49c4:	cf 91       	pop	r28
    49c6:	df 91       	pop	r29
    49c8:	08 95       	ret

000049ca <Clear_UARTRX_Interrupt>:
void Clear_UARTRX_Interrupt()
{
    49ca:	df 93       	push	r29
    49cc:	cf 93       	push	r28
    49ce:	cd b7       	in	r28, 0x3d	; 61
    49d0:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,RXCIE);
    49d2:	aa e2       	ldi	r26, 0x2A	; 42
    49d4:	b0 e0       	ldi	r27, 0x00	; 0
    49d6:	ea e2       	ldi	r30, 0x2A	; 42
    49d8:	f0 e0       	ldi	r31, 0x00	; 0
    49da:	80 81       	ld	r24, Z
    49dc:	8f 77       	andi	r24, 0x7F	; 127
    49de:	8c 93       	st	X, r24
}
    49e0:	cf 91       	pop	r28
    49e2:	df 91       	pop	r29
    49e4:	08 95       	ret

000049e6 <UltraSonic_vint>:
#include "UltraSonic.h"

void UltraSonic_vint(u8 TRIGGER_PORT, u8 TRIGGER_PIN)
{
    49e6:	df 93       	push	r29
    49e8:	cf 93       	push	r28
    49ea:	00 d0       	rcall	.+0      	; 0x49ec <UltraSonic_vint+0x6>
    49ec:	cd b7       	in	r28, 0x3d	; 61
    49ee:	de b7       	in	r29, 0x3e	; 62
    49f0:	89 83       	std	Y+1, r24	; 0x01
    49f2:	6a 83       	std	Y+2, r22	; 0x02
	DIO_Set_Pin_Direction(TRIGGER_PORT, TRIGGER_PIN, OUTPUT);
    49f4:	89 81       	ldd	r24, Y+1	; 0x01
    49f6:	6a 81       	ldd	r22, Y+2	; 0x02
    49f8:	41 e0       	ldi	r20, 0x01	; 1
    49fa:	0e 94 a6 07 	call	0xf4c	; 0xf4c <DIO_Set_Pin_Direction>
}
    49fe:	0f 90       	pop	r0
    4a00:	0f 90       	pop	r0
    4a02:	cf 91       	pop	r28
    4a04:	df 91       	pop	r29
    4a06:	08 95       	ret

00004a08 <Trigger>:
void Trigger(u8 TRIGGER_PORT, u8 TRIGGER_PIN)
{
    4a08:	df 93       	push	r29
    4a0a:	cf 93       	push	r28
    4a0c:	cd b7       	in	r28, 0x3d	; 61
    4a0e:	de b7       	in	r29, 0x3e	; 62
    4a10:	6a 97       	sbiw	r28, 0x1a	; 26
    4a12:	0f b6       	in	r0, 0x3f	; 63
    4a14:	f8 94       	cli
    4a16:	de bf       	out	0x3e, r29	; 62
    4a18:	0f be       	out	0x3f, r0	; 63
    4a1a:	cd bf       	out	0x3d, r28	; 61
    4a1c:	89 8f       	std	Y+25, r24	; 0x19
    4a1e:	6a 8f       	std	Y+26, r22	; 0x1a
	DIO_Write_Pin(TRIGGER_PORT, TRIGGER_PIN, HIGH);
    4a20:	89 8d       	ldd	r24, Y+25	; 0x19
    4a22:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4a24:	41 e0       	ldi	r20, 0x01	; 1
    4a26:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
    4a2a:	80 e0       	ldi	r24, 0x00	; 0
    4a2c:	90 e0       	ldi	r25, 0x00	; 0
    4a2e:	a8 e4       	ldi	r26, 0x48	; 72
    4a30:	b2 e4       	ldi	r27, 0x42	; 66
    4a32:	8d 8b       	std	Y+21, r24	; 0x15
    4a34:	9e 8b       	std	Y+22, r25	; 0x16
    4a36:	af 8b       	std	Y+23, r26	; 0x17
    4a38:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    4a3a:	6d 89       	ldd	r22, Y+21	; 0x15
    4a3c:	7e 89       	ldd	r23, Y+22	; 0x16
    4a3e:	8f 89       	ldd	r24, Y+23	; 0x17
    4a40:	98 8d       	ldd	r25, Y+24	; 0x18
    4a42:	2b ea       	ldi	r18, 0xAB	; 171
    4a44:	3a ea       	ldi	r19, 0xAA	; 170
    4a46:	4a e2       	ldi	r20, 0x2A	; 42
    4a48:	50 e4       	ldi	r21, 0x40	; 64
    4a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a4e:	dc 01       	movw	r26, r24
    4a50:	cb 01       	movw	r24, r22
    4a52:	89 8b       	std	Y+17, r24	; 0x11
    4a54:	9a 8b       	std	Y+18, r25	; 0x12
    4a56:	ab 8b       	std	Y+19, r26	; 0x13
    4a58:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    4a5a:	69 89       	ldd	r22, Y+17	; 0x11
    4a5c:	7a 89       	ldd	r23, Y+18	; 0x12
    4a5e:	8b 89       	ldd	r24, Y+19	; 0x13
    4a60:	9c 89       	ldd	r25, Y+20	; 0x14
    4a62:	20 e0       	ldi	r18, 0x00	; 0
    4a64:	30 e0       	ldi	r19, 0x00	; 0
    4a66:	40 e8       	ldi	r20, 0x80	; 128
    4a68:	5f e3       	ldi	r21, 0x3F	; 63
    4a6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a6e:	88 23       	and	r24, r24
    4a70:	1c f4       	brge	.+6      	; 0x4a78 <Trigger+0x70>
		__ticks = 1;
    4a72:	81 e0       	ldi	r24, 0x01	; 1
    4a74:	88 8b       	std	Y+16, r24	; 0x10
    4a76:	91 c0       	rjmp	.+290    	; 0x4b9a <Trigger+0x192>
	else if (__tmp > 255)
    4a78:	69 89       	ldd	r22, Y+17	; 0x11
    4a7a:	7a 89       	ldd	r23, Y+18	; 0x12
    4a7c:	8b 89       	ldd	r24, Y+19	; 0x13
    4a7e:	9c 89       	ldd	r25, Y+20	; 0x14
    4a80:	20 e0       	ldi	r18, 0x00	; 0
    4a82:	30 e0       	ldi	r19, 0x00	; 0
    4a84:	4f e7       	ldi	r20, 0x7F	; 127
    4a86:	53 e4       	ldi	r21, 0x43	; 67
    4a88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a8c:	18 16       	cp	r1, r24
    4a8e:	0c f0       	brlt	.+2      	; 0x4a92 <Trigger+0x8a>
    4a90:	7b c0       	rjmp	.+246    	; 0x4b88 <Trigger+0x180>
	{
		_delay_ms(__us / 1000.0);
    4a92:	6d 89       	ldd	r22, Y+21	; 0x15
    4a94:	7e 89       	ldd	r23, Y+22	; 0x16
    4a96:	8f 89       	ldd	r24, Y+23	; 0x17
    4a98:	98 8d       	ldd	r25, Y+24	; 0x18
    4a9a:	20 e0       	ldi	r18, 0x00	; 0
    4a9c:	30 e0       	ldi	r19, 0x00	; 0
    4a9e:	4a e7       	ldi	r20, 0x7A	; 122
    4aa0:	54 e4       	ldi	r21, 0x44	; 68
    4aa2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4aa6:	dc 01       	movw	r26, r24
    4aa8:	cb 01       	movw	r24, r22
    4aaa:	8c 87       	std	Y+12, r24	; 0x0c
    4aac:	9d 87       	std	Y+13, r25	; 0x0d
    4aae:	ae 87       	std	Y+14, r26	; 0x0e
    4ab0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ab2:	6c 85       	ldd	r22, Y+12	; 0x0c
    4ab4:	7d 85       	ldd	r23, Y+13	; 0x0d
    4ab6:	8e 85       	ldd	r24, Y+14	; 0x0e
    4ab8:	9f 85       	ldd	r25, Y+15	; 0x0f
    4aba:	20 e0       	ldi	r18, 0x00	; 0
    4abc:	30 e0       	ldi	r19, 0x00	; 0
    4abe:	4a ef       	ldi	r20, 0xFA	; 250
    4ac0:	54 e4       	ldi	r21, 0x44	; 68
    4ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ac6:	dc 01       	movw	r26, r24
    4ac8:	cb 01       	movw	r24, r22
    4aca:	88 87       	std	Y+8, r24	; 0x08
    4acc:	99 87       	std	Y+9, r25	; 0x09
    4ace:	aa 87       	std	Y+10, r26	; 0x0a
    4ad0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4ad2:	68 85       	ldd	r22, Y+8	; 0x08
    4ad4:	79 85       	ldd	r23, Y+9	; 0x09
    4ad6:	8a 85       	ldd	r24, Y+10	; 0x0a
    4ad8:	9b 85       	ldd	r25, Y+11	; 0x0b
    4ada:	20 e0       	ldi	r18, 0x00	; 0
    4adc:	30 e0       	ldi	r19, 0x00	; 0
    4ade:	40 e8       	ldi	r20, 0x80	; 128
    4ae0:	5f e3       	ldi	r21, 0x3F	; 63
    4ae2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ae6:	88 23       	and	r24, r24
    4ae8:	2c f4       	brge	.+10     	; 0x4af4 <Trigger+0xec>
		__ticks = 1;
    4aea:	81 e0       	ldi	r24, 0x01	; 1
    4aec:	90 e0       	ldi	r25, 0x00	; 0
    4aee:	9f 83       	std	Y+7, r25	; 0x07
    4af0:	8e 83       	std	Y+6, r24	; 0x06
    4af2:	3f c0       	rjmp	.+126    	; 0x4b72 <Trigger+0x16a>
	else if (__tmp > 65535)
    4af4:	68 85       	ldd	r22, Y+8	; 0x08
    4af6:	79 85       	ldd	r23, Y+9	; 0x09
    4af8:	8a 85       	ldd	r24, Y+10	; 0x0a
    4afa:	9b 85       	ldd	r25, Y+11	; 0x0b
    4afc:	20 e0       	ldi	r18, 0x00	; 0
    4afe:	3f ef       	ldi	r19, 0xFF	; 255
    4b00:	4f e7       	ldi	r20, 0x7F	; 127
    4b02:	57 e4       	ldi	r21, 0x47	; 71
    4b04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b08:	18 16       	cp	r1, r24
    4b0a:	4c f5       	brge	.+82     	; 0x4b5e <Trigger+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b0c:	6c 85       	ldd	r22, Y+12	; 0x0c
    4b0e:	7d 85       	ldd	r23, Y+13	; 0x0d
    4b10:	8e 85       	ldd	r24, Y+14	; 0x0e
    4b12:	9f 85       	ldd	r25, Y+15	; 0x0f
    4b14:	20 e0       	ldi	r18, 0x00	; 0
    4b16:	30 e0       	ldi	r19, 0x00	; 0
    4b18:	40 e2       	ldi	r20, 0x20	; 32
    4b1a:	51 e4       	ldi	r21, 0x41	; 65
    4b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b20:	dc 01       	movw	r26, r24
    4b22:	cb 01       	movw	r24, r22
    4b24:	bc 01       	movw	r22, r24
    4b26:	cd 01       	movw	r24, r26
    4b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b2c:	dc 01       	movw	r26, r24
    4b2e:	cb 01       	movw	r24, r22
    4b30:	9f 83       	std	Y+7, r25	; 0x07
    4b32:	8e 83       	std	Y+6, r24	; 0x06
    4b34:	0f c0       	rjmp	.+30     	; 0x4b54 <Trigger+0x14c>
    4b36:	88 ec       	ldi	r24, 0xC8	; 200
    4b38:	90 e0       	ldi	r25, 0x00	; 0
    4b3a:	9d 83       	std	Y+5, r25	; 0x05
    4b3c:	8c 83       	std	Y+4, r24	; 0x04
    4b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    4b40:	9d 81       	ldd	r25, Y+5	; 0x05
    4b42:	01 97       	sbiw	r24, 0x01	; 1
    4b44:	f1 f7       	brne	.-4      	; 0x4b42 <Trigger+0x13a>
    4b46:	9d 83       	std	Y+5, r25	; 0x05
    4b48:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b4a:	8e 81       	ldd	r24, Y+6	; 0x06
    4b4c:	9f 81       	ldd	r25, Y+7	; 0x07
    4b4e:	01 97       	sbiw	r24, 0x01	; 1
    4b50:	9f 83       	std	Y+7, r25	; 0x07
    4b52:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b54:	8e 81       	ldd	r24, Y+6	; 0x06
    4b56:	9f 81       	ldd	r25, Y+7	; 0x07
    4b58:	00 97       	sbiw	r24, 0x00	; 0
    4b5a:	69 f7       	brne	.-38     	; 0x4b36 <Trigger+0x12e>
    4b5c:	24 c0       	rjmp	.+72     	; 0x4ba6 <Trigger+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b5e:	68 85       	ldd	r22, Y+8	; 0x08
    4b60:	79 85       	ldd	r23, Y+9	; 0x09
    4b62:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b64:	9b 85       	ldd	r25, Y+11	; 0x0b
    4b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b6a:	dc 01       	movw	r26, r24
    4b6c:	cb 01       	movw	r24, r22
    4b6e:	9f 83       	std	Y+7, r25	; 0x07
    4b70:	8e 83       	std	Y+6, r24	; 0x06
    4b72:	8e 81       	ldd	r24, Y+6	; 0x06
    4b74:	9f 81       	ldd	r25, Y+7	; 0x07
    4b76:	9b 83       	std	Y+3, r25	; 0x03
    4b78:	8a 83       	std	Y+2, r24	; 0x02
    4b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b7c:	9b 81       	ldd	r25, Y+3	; 0x03
    4b7e:	01 97       	sbiw	r24, 0x01	; 1
    4b80:	f1 f7       	brne	.-4      	; 0x4b7e <Trigger+0x176>
    4b82:	9b 83       	std	Y+3, r25	; 0x03
    4b84:	8a 83       	std	Y+2, r24	; 0x02
    4b86:	0f c0       	rjmp	.+30     	; 0x4ba6 <Trigger+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4b88:	69 89       	ldd	r22, Y+17	; 0x11
    4b8a:	7a 89       	ldd	r23, Y+18	; 0x12
    4b8c:	8b 89       	ldd	r24, Y+19	; 0x13
    4b8e:	9c 89       	ldd	r25, Y+20	; 0x14
    4b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b94:	dc 01       	movw	r26, r24
    4b96:	cb 01       	movw	r24, r22
    4b98:	88 8b       	std	Y+16, r24	; 0x10
    4b9a:	88 89       	ldd	r24, Y+16	; 0x10
    4b9c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4b9e:	89 81       	ldd	r24, Y+1	; 0x01
    4ba0:	8a 95       	dec	r24
    4ba2:	f1 f7       	brne	.-4      	; 0x4ba0 <Trigger+0x198>
    4ba4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
	DIO_Write_Pin(TRIGGER_PORT, TRIGGER_PIN, LOW);
    4ba6:	89 8d       	ldd	r24, Y+25	; 0x19
    4ba8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4baa:	40 e0       	ldi	r20, 0x00	; 0
    4bac:	0e 94 da 08 	call	0x11b4	; 0x11b4 <DIO_Write_Pin>
}
    4bb0:	6a 96       	adiw	r28, 0x1a	; 26
    4bb2:	0f b6       	in	r0, 0x3f	; 63
    4bb4:	f8 94       	cli
    4bb6:	de bf       	out	0x3e, r29	; 62
    4bb8:	0f be       	out	0x3f, r0	; 63
    4bba:	cd bf       	out	0x3d, r28	; 61
    4bbc:	cf 91       	pop	r28
    4bbe:	df 91       	pop	r29
    4bc0:	08 95       	ret

00004bc2 <UltraSonic_ICR_Read>:

u16 UltraSonic_ICR_Read(u8 TRIGGER_PORT, u8 TRIGGER_PIN)
{
    4bc2:	df 93       	push	r29
    4bc4:	cf 93       	push	r28
    4bc6:	cd b7       	in	r28, 0x3d	; 61
    4bc8:	de b7       	in	r29, 0x3e	; 62
    4bca:	28 97       	sbiw	r28, 0x08	; 8
    4bcc:	0f b6       	in	r0, 0x3f	; 63
    4bce:	f8 94       	cli
    4bd0:	de bf       	out	0x3e, r29	; 62
    4bd2:	0f be       	out	0x3f, r0	; 63
    4bd4:	cd bf       	out	0x3d, r28	; 61
    4bd6:	8f 83       	std	Y+7, r24	; 0x07
    4bd8:	68 87       	std	Y+8, r22	; 0x08
	u16 High;
	Timer1_Clear_TCNT1();
    4bda:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <Timer1_Clear_TCNT1>
	Timer1_Set_OverFlow_Mode();
    4bde:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <Timer1_Set_OverFlow_Mode>
	//Timer1_Start_Count();
	Timer1_Clear_ICF1_BIT();
    4be2:	0e 94 ca 20 	call	0x4194	; 0x4194 <Timer1_Clear_ICF1_BIT>
	Trigger(TRIGGER_PORT, TRIGGER_PIN);
    4be6:	8f 81       	ldd	r24, Y+7	; 0x07
    4be8:	68 85       	ldd	r22, Y+8	; 0x08
    4bea:	0e 94 04 25 	call	0x4a08	; 0x4a08 <Trigger>
	Timer1_Set_ICU_Rising_Edge();
    4bee:	0e 94 a7 20 	call	0x414e	; 0x414e <Timer1_Set_ICU_Rising_Edge>
	while(Timer1_Check_ICF1_BIT() == 0);
    4bf2:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <Timer1_Check_ICF1_BIT>
    4bf6:	88 23       	and	r24, r24
    4bf8:	e1 f3       	breq	.-8      	; 0x4bf2 <UltraSonic_ICR_Read+0x30>
	u16 RISING_CAPTURE = ICR1;
    4bfa:	e6 e4       	ldi	r30, 0x46	; 70
    4bfc:	f0 e0       	ldi	r31, 0x00	; 0
    4bfe:	80 81       	ld	r24, Z
    4c00:	91 81       	ldd	r25, Z+1	; 0x01
    4c02:	9c 83       	std	Y+4, r25	; 0x04
    4c04:	8b 83       	std	Y+3, r24	; 0x03
	Timer1_Clear_ICF1_BIT();
    4c06:	0e 94 ca 20 	call	0x4194	; 0x4194 <Timer1_Clear_ICF1_BIT>
	Timer1_Set_ICU_Falling_Edge();
    4c0a:	0e 94 b5 20 	call	0x416a	; 0x416a <Timer1_Set_ICU_Falling_Edge>
	while(Timer1_Check_ICF1_BIT() == 0);
    4c0e:	0e 94 d8 20 	call	0x41b0	; 0x41b0 <Timer1_Check_ICF1_BIT>
    4c12:	88 23       	and	r24, r24
    4c14:	e1 f3       	breq	.-8      	; 0x4c0e <UltraSonic_ICR_Read+0x4c>
	u16 FALLING_CAPTURE = ICR1;
    4c16:	e6 e4       	ldi	r30, 0x46	; 70
    4c18:	f0 e0       	ldi	r31, 0x00	; 0
    4c1a:	80 81       	ld	r24, Z
    4c1c:	91 81       	ldd	r25, Z+1	; 0x01
    4c1e:	9a 83       	std	Y+2, r25	; 0x02
    4c20:	89 83       	std	Y+1, r24	; 0x01
	Timer1_Clear_ICF1_BIT();
    4c22:	0e 94 ca 20 	call	0x4194	; 0x4194 <Timer1_Clear_ICF1_BIT>
	Timer1_Stop_Count();
    4c26:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <Timer1_Stop_Count>
	Timer1_Clear_TCNT1();
    4c2a:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <Timer1_Clear_TCNT1>
	High = FALLING_CAPTURE - RISING_CAPTURE;
    4c2e:	29 81       	ldd	r18, Y+1	; 0x01
    4c30:	3a 81       	ldd	r19, Y+2	; 0x02
    4c32:	8b 81       	ldd	r24, Y+3	; 0x03
    4c34:	9c 81       	ldd	r25, Y+4	; 0x04
    4c36:	a9 01       	movw	r20, r18
    4c38:	48 1b       	sub	r20, r24
    4c3a:	59 0b       	sbc	r21, r25
    4c3c:	ca 01       	movw	r24, r20
    4c3e:	9e 83       	std	Y+6, r25	; 0x06
    4c40:	8d 83       	std	Y+5, r24	; 0x05

	return (High * 2.2144);
    4c42:	8d 81       	ldd	r24, Y+5	; 0x05
    4c44:	9e 81       	ldd	r25, Y+6	; 0x06
    4c46:	cc 01       	movw	r24, r24
    4c48:	a0 e0       	ldi	r26, 0x00	; 0
    4c4a:	b0 e0       	ldi	r27, 0x00	; 0
    4c4c:	bc 01       	movw	r22, r24
    4c4e:	cd 01       	movw	r24, r26
    4c50:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    4c54:	dc 01       	movw	r26, r24
    4c56:	cb 01       	movw	r24, r22
    4c58:	bc 01       	movw	r22, r24
    4c5a:	cd 01       	movw	r24, r26
    4c5c:	2b eb       	ldi	r18, 0xBB	; 187
    4c5e:	38 eb       	ldi	r19, 0xB8	; 184
    4c60:	4d e0       	ldi	r20, 0x0D	; 13
    4c62:	50 e4       	ldi	r21, 0x40	; 64
    4c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c68:	dc 01       	movw	r26, r24
    4c6a:	cb 01       	movw	r24, r22
    4c6c:	bc 01       	movw	r22, r24
    4c6e:	cd 01       	movw	r24, r26
    4c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c74:	dc 01       	movw	r26, r24
    4c76:	cb 01       	movw	r24, r22
}
    4c78:	28 96       	adiw	r28, 0x08	; 8
    4c7a:	0f b6       	in	r0, 0x3f	; 63
    4c7c:	f8 94       	cli
    4c7e:	de bf       	out	0x3e, r29	; 62
    4c80:	0f be       	out	0x3f, r0	; 63
    4c82:	cd bf       	out	0x3d, r28	; 61
    4c84:	cf 91       	pop	r28
    4c86:	df 91       	pop	r29
    4c88:	08 95       	ret

00004c8a <main>:
 *      Author: ADHam
 */
#include "Smart_Car.h"
/*===================================== Main =====================================*/
int main(void)
{
    4c8a:	df 93       	push	r29
    4c8c:	cf 93       	push	r28
    4c8e:	cd b7       	in	r28, 0x3d	; 61
    4c90:	de b7       	in	r29, 0x3e	; 62
	/*===================================== Initializing =====================================*/
	Setup();
    4c92:	0e 94 5a 26 	call	0x4cb4	; 0x4cb4 <Setup>
	Start_Car();
    4c96:	0e 94 ab 2a 	call	0x5556	; 0x5556 <Start_Car>
	/*===================================== Program Loop =====================================*/
	while(1)
	{
		Show_Car_Speed_On_LCD();
    4c9a:	0e 94 62 29 	call	0x52c4	; 0x52c4 <Show_Car_Speed_On_LCD>
		Show_UltraSonic_Distance_On_LCD();
    4c9e:	0e 94 88 29 	call	0x5310	; 0x5310 <Show_UltraSonic_Distance_On_LCD>
		Manual();
    4ca2:	0e 94 88 26 	call	0x4d10	; 0x4d10 <Manual>
		Check_Collision();
    4ca6:	0e 94 7c 2a 	call	0x54f8	; 0x54f8 <Check_Collision>
		Car_Control_Speed_Using_UltraSonic();
    4caa:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <Car_Control_Speed_Using_UltraSonic>
		Automatic_Mode_1();
    4cae:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <Automatic_Mode_1>
    4cb2:	f3 cf       	rjmp	.-26     	; 0x4c9a <main+0x10>

00004cb4 <Setup>:
	}
}
/*===================================== Set MC Pins =====================================*/
void Setup()
{
    4cb4:	df 93       	push	r29
    4cb6:	cf 93       	push	r28
    4cb8:	cd b7       	in	r28, 0x3d	; 61
    4cba:	de b7       	in	r29, 0x3e	; 62
	Set_Global_Interrupt();
    4cbc:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <Set_Global_Interrupt>
	UART_vInit(9600);
    4cc0:	60 e8       	ldi	r22, 0x80	; 128
    4cc2:	75 e2       	ldi	r23, 0x25	; 37
    4cc4:	80 e0       	ldi	r24, 0x00	; 0
    4cc6:	90 e0       	ldi	r25, 0x00	; 0
    4cc8:	0e 94 4f 23 	call	0x469e	; 0x469e <UART_vInit>
	LCD_vInit();
    4ccc:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <LCD_vInit>
	LCD_DiplayON_CursorOff();
    4cd0:	0e 94 23 14 	call	0x2846	; 0x2846 <LCD_DiplayON_CursorOff>
	UltraSonic_vint(TRIGGER_PORT_1, TRIGGER_PIN_1);
    4cd4:	84 e4       	ldi	r24, 0x44	; 68
    4cd6:	65 e0       	ldi	r22, 0x05	; 5
    4cd8:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <UltraSonic_vint>
	// Set Motor Pins
	DC_Motors_vInit(PORT_A,HIGH);
    4cdc:	81 e4       	ldi	r24, 0x41	; 65
    4cde:	61 e0       	ldi	r22, 0x01	; 1
    4ce0:	0e 94 49 18 	call	0x3092	; 0x3092 <DC_Motors_vInit>
	// Set Motor Speed
	PWM_Timer2_Generate(CAR_DEFAULT_SPEED);
    4ce4:	80 e5       	ldi	r24, 0x50	; 80
    4ce6:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <PWM_Timer2_Generate>
	// Led To Indicate car collision
	LED_vintial(RED_LED_PORT,RED_LED_PIN);
    4cea:	83 e4       	ldi	r24, 0x43	; 67
    4cec:	62 e0       	ldi	r22, 0x02	; 2
    4cee:	0e 94 f6 17 	call	0x2fec	; 0x2fec <LED_vintial>
	// Led To Indicate car can move
	LED_vintial(GREEN_LED_PORT,GREEN_LED_PIN);
    4cf2:	83 e4       	ldi	r24, 0x43	; 67
    4cf4:	63 e0       	ldi	r22, 0x03	; 3
    4cf6:	0e 94 f6 17 	call	0x2fec	; 0x2fec <LED_vintial>
	// Start Engine Button
	Button_vintial(START_BUTTON_PORT,START_BUTTON_PIN);
    4cfa:	81 e4       	ldi	r24, 0x41	; 65
    4cfc:	60 e0       	ldi	r22, 0x00	; 0
    4cfe:	0e 94 75 07 	call	0xeea	; 0xeea <Button_vintial>
	Button_Set_PullUp(START_BUTTON_PORT,START_BUTTON_PIN);
    4d02:	81 e4       	ldi	r24, 0x41	; 65
    4d04:	60 e0       	ldi	r22, 0x00	; 0
    4d06:	0e 94 96 07 	call	0xf2c	; 0xf2c <Button_Set_PullUp>
}
    4d0a:	cf 91       	pop	r28
    4d0c:	df 91       	pop	r29
    4d0e:	08 95       	ret

00004d10 <Manual>:
/*===================================== Car Manual =====================================*/
void Manual()
{
    4d10:	df 93       	push	r29
    4d12:	cf 93       	push	r28
    4d14:	00 d0       	rcall	.+0      	; 0x4d16 <Manual+0x6>
    4d16:	cd b7       	in	r28, 0x3d	; 61
    4d18:	de b7       	in	r29, 0x3e	; 62
	Choice = UART_u8Receive_Data();
    4d1a:	0e 94 6a 24 	call	0x48d4	; 0x48d4 <UART_u8Receive_Data>
    4d1e:	80 93 e5 01 	sts	0x01E5, r24
	switch(Choice)
    4d22:	80 91 e5 01 	lds	r24, 0x01E5
    4d26:	28 2f       	mov	r18, r24
    4d28:	30 e0       	ldi	r19, 0x00	; 0
    4d2a:	3a 83       	std	Y+2, r19	; 0x02
    4d2c:	29 83       	std	Y+1, r18	; 0x01
    4d2e:	89 81       	ldd	r24, Y+1	; 0x01
    4d30:	9a 81       	ldd	r25, Y+2	; 0x02
    4d32:	82 35       	cpi	r24, 0x52	; 82
    4d34:	91 05       	cpc	r25, r1
    4d36:	09 f4       	brne	.+2      	; 0x4d3a <Manual+0x2a>
    4d38:	6e c0       	rjmp	.+220    	; 0x4e16 <Manual+0x106>
    4d3a:	29 81       	ldd	r18, Y+1	; 0x01
    4d3c:	3a 81       	ldd	r19, Y+2	; 0x02
    4d3e:	23 35       	cpi	r18, 0x53	; 83
    4d40:	31 05       	cpc	r19, r1
    4d42:	8c f5       	brge	.+98     	; 0x4da6 <Manual+0x96>
    4d44:	89 81       	ldd	r24, Y+1	; 0x01
    4d46:	9a 81       	ldd	r25, Y+2	; 0x02
    4d48:	87 34       	cpi	r24, 0x47	; 71
    4d4a:	91 05       	cpc	r25, r1
    4d4c:	09 f4       	brne	.+2      	; 0x4d50 <Manual+0x40>
    4d4e:	a3 c0       	rjmp	.+326    	; 0x4e96 <Manual+0x186>
    4d50:	29 81       	ldd	r18, Y+1	; 0x01
    4d52:	3a 81       	ldd	r19, Y+2	; 0x02
    4d54:	28 34       	cpi	r18, 0x48	; 72
    4d56:	31 05       	cpc	r19, r1
    4d58:	9c f4       	brge	.+38     	; 0x4d80 <Manual+0x70>
    4d5a:	89 81       	ldd	r24, Y+1	; 0x01
    4d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    4d5e:	82 34       	cpi	r24, 0x42	; 66
    4d60:	91 05       	cpc	r25, r1
    4d62:	09 f4       	brne	.+2      	; 0x4d66 <Manual+0x56>
    4d64:	53 c0       	rjmp	.+166    	; 0x4e0c <Manual+0xfc>
    4d66:	29 81       	ldd	r18, Y+1	; 0x01
    4d68:	3a 81       	ldd	r19, Y+2	; 0x02
    4d6a:	26 34       	cpi	r18, 0x46	; 70
    4d6c:	31 05       	cpc	r19, r1
    4d6e:	09 f4       	brne	.+2      	; 0x4d72 <Manual+0x62>
    4d70:	48 c0       	rjmp	.+144    	; 0x4e02 <Manual+0xf2>
    4d72:	89 81       	ldd	r24, Y+1	; 0x01
    4d74:	9a 81       	ldd	r25, Y+2	; 0x02
    4d76:	81 34       	cpi	r24, 0x41	; 65
    4d78:	91 05       	cpc	r25, r1
    4d7a:	09 f4       	brne	.+2      	; 0x4d7e <Manual+0x6e>
    4d7c:	7d c0       	rjmp	.+250    	; 0x4e78 <Manual+0x168>
    4d7e:	ac c0       	rjmp	.+344    	; 0x4ed8 <Manual+0x1c8>
    4d80:	29 81       	ldd	r18, Y+1	; 0x01
    4d82:	3a 81       	ldd	r19, Y+2	; 0x02
    4d84:	2d 34       	cpi	r18, 0x4D	; 77
    4d86:	31 05       	cpc	r19, r1
    4d88:	09 f4       	brne	.+2      	; 0x4d8c <Manual+0x7c>
    4d8a:	68 c0       	rjmp	.+208    	; 0x4e5c <Manual+0x14c>
    4d8c:	89 81       	ldd	r24, Y+1	; 0x01
    4d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    4d90:	8e 34       	cpi	r24, 0x4E	; 78
    4d92:	91 05       	cpc	r25, r1
    4d94:	09 f4       	brne	.+2      	; 0x4d98 <Manual+0x88>
    4d96:	69 c0       	rjmp	.+210    	; 0x4e6a <Manual+0x15a>
    4d98:	29 81       	ldd	r18, Y+1	; 0x01
    4d9a:	3a 81       	ldd	r19, Y+2	; 0x02
    4d9c:	2c 34       	cpi	r18, 0x4C	; 76
    4d9e:	31 05       	cpc	r19, r1
    4da0:	09 f4       	brne	.+2      	; 0x4da4 <Manual+0x94>
    4da2:	3e c0       	rjmp	.+124    	; 0x4e20 <Manual+0x110>
    4da4:	99 c0       	rjmp	.+306    	; 0x4ed8 <Manual+0x1c8>
    4da6:	89 81       	ldd	r24, Y+1	; 0x01
    4da8:	9a 81       	ldd	r25, Y+2	; 0x02
    4daa:	8c 36       	cpi	r24, 0x6C	; 108
    4dac:	91 05       	cpc	r25, r1
    4dae:	09 f4       	brne	.+2      	; 0x4db2 <Manual+0xa2>
    4db0:	4b c0       	rjmp	.+150    	; 0x4e48 <Manual+0x138>
    4db2:	29 81       	ldd	r18, Y+1	; 0x01
    4db4:	3a 81       	ldd	r19, Y+2	; 0x02
    4db6:	2d 36       	cpi	r18, 0x6D	; 109
    4db8:	31 05       	cpc	r19, r1
    4dba:	9c f4       	brge	.+38     	; 0x4de2 <Manual+0xd2>
    4dbc:	89 81       	ldd	r24, Y+1	; 0x01
    4dbe:	9a 81       	ldd	r25, Y+2	; 0x02
    4dc0:	84 35       	cpi	r24, 0x54	; 84
    4dc2:	91 05       	cpc	r25, r1
    4dc4:	09 f4       	brne	.+2      	; 0x4dc8 <Manual+0xb8>
    4dc6:	5f c0       	rjmp	.+190    	; 0x4e86 <Manual+0x176>
    4dc8:	29 81       	ldd	r18, Y+1	; 0x01
    4dca:	3a 81       	ldd	r19, Y+2	; 0x02
    4dcc:	24 35       	cpi	r18, 0x54	; 84
    4dce:	31 05       	cpc	r19, r1
    4dd0:	0c f4       	brge	.+2      	; 0x4dd4 <Manual+0xc4>
    4dd2:	3f c0       	rjmp	.+126    	; 0x4e52 <Manual+0x142>
    4dd4:	89 81       	ldd	r24, Y+1	; 0x01
    4dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    4dd8:	85 35       	cpi	r24, 0x55	; 85
    4dda:	91 05       	cpc	r25, r1
    4ddc:	09 f4       	brne	.+2      	; 0x4de0 <Manual+0xd0>
    4dde:	57 c0       	rjmp	.+174    	; 0x4e8e <Manual+0x17e>
    4de0:	7b c0       	rjmp	.+246    	; 0x4ed8 <Manual+0x1c8>
    4de2:	29 81       	ldd	r18, Y+1	; 0x01
    4de4:	3a 81       	ldd	r19, Y+2	; 0x02
    4de6:	22 37       	cpi	r18, 0x72	; 114
    4de8:	31 05       	cpc	r19, r1
    4dea:	f9 f0       	breq	.+62     	; 0x4e2a <Manual+0x11a>
    4dec:	89 81       	ldd	r24, Y+1	; 0x01
    4dee:	9a 81       	ldd	r25, Y+2	; 0x02
    4df0:	88 37       	cpi	r24, 0x78	; 120
    4df2:	91 05       	cpc	r25, r1
    4df4:	21 f1       	breq	.+72     	; 0x4e3e <Manual+0x12e>
    4df6:	29 81       	ldd	r18, Y+1	; 0x01
    4df8:	3a 81       	ldd	r19, Y+2	; 0x02
    4dfa:	2f 36       	cpi	r18, 0x6F	; 111
    4dfc:	31 05       	cpc	r19, r1
    4dfe:	d1 f0       	breq	.+52     	; 0x4e34 <Manual+0x124>
    4e00:	6b c0       	rjmp	.+214    	; 0x4ed8 <Manual+0x1c8>
	{
	case FORWARD:
		DC_Move_Forward(PORT_A,HIGH);
    4e02:	81 e4       	ldi	r24, 0x41	; 65
    4e04:	61 e0       	ldi	r22, 0x01	; 1
    4e06:	0e 94 6f 18 	call	0x30de	; 0x30de <DC_Move_Forward>
    4e0a:	66 c0       	rjmp	.+204    	; 0x4ed8 <Manual+0x1c8>
		break;
	case BACKWARD:
		DC_Move_Backward(PORT_A,HIGH);
    4e0c:	81 e4       	ldi	r24, 0x41	; 65
    4e0e:	61 e0       	ldi	r22, 0x01	; 1
    4e10:	0e 94 b5 18 	call	0x316a	; 0x316a <DC_Move_Backward>
    4e14:	61 c0       	rjmp	.+194    	; 0x4ed8 <Manual+0x1c8>
		break;
	case RIGHT:
		DC_Move_Right(PORT_A,HIGH);
    4e16:	81 e4       	ldi	r24, 0x41	; 65
    4e18:	61 e0       	ldi	r22, 0x01	; 1
    4e1a:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <DC_Move_Right>
    4e1e:	5c c0       	rjmp	.+184    	; 0x4ed8 <Manual+0x1c8>
		break;
	case LEFT:
		DC_Move_Left(PORT_A,HIGH);
    4e20:	81 e4       	ldi	r24, 0x41	; 65
    4e22:	61 e0       	ldi	r22, 0x01	; 1
    4e24:	0e 94 41 19 	call	0x3282	; 0x3282 <DC_Move_Left>
    4e28:	57 c0       	rjmp	.+174    	; 0x4ed8 <Manual+0x1c8>
		break;
	case DRIFT_RIGHT:
		DC_Drift_Right(PORT_A,HIGH);
    4e2a:	81 e4       	ldi	r24, 0x41	; 65
    4e2c:	61 e0       	ldi	r22, 0x01	; 1
    4e2e:	0e 94 cd 19 	call	0x339a	; 0x339a <DC_Drift_Right>
    4e32:	52 c0       	rjmp	.+164    	; 0x4ed8 <Manual+0x1c8>
		break;
	case DRIFT_BACK_RIGHT:
		DC_Drift_Back_Right(PORT_A,HIGH);
    4e34:	81 e4       	ldi	r24, 0x41	; 65
    4e36:	61 e0       	ldi	r22, 0x01	; 1
    4e38:	0e 94 13 1a 	call	0x3426	; 0x3426 <DC_Drift_Back_Right>
    4e3c:	4d c0       	rjmp	.+154    	; 0x4ed8 <Manual+0x1c8>
		break;
	case DRIFT_BACK_LEFT:
		DC_Drift_Back_Left(PORT_A,HIGH);
    4e3e:	81 e4       	ldi	r24, 0x41	; 65
    4e40:	61 e0       	ldi	r22, 0x01	; 1
    4e42:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <DC_Drift_Back_Left>
    4e46:	48 c0       	rjmp	.+144    	; 0x4ed8 <Manual+0x1c8>
		break;
	case DRIFT_LEFT:
		DC_Drift_Left(PORT_A,HIGH);
    4e48:	81 e4       	ldi	r24, 0x41	; 65
    4e4a:	61 e0       	ldi	r22, 0x01	; 1
    4e4c:	0e 94 87 19 	call	0x330e	; 0x330e <DC_Drift_Left>
    4e50:	43 c0       	rjmp	.+134    	; 0x4ed8 <Manual+0x1c8>
		break;
	case STOP:
		DC_STOP(PORT_A,HIGH);
    4e52:	81 e4       	ldi	r24, 0x41	; 65
    4e54:	61 e0       	ldi	r22, 0x01	; 1
    4e56:	0e 94 9f 1a 	call	0x353e	; 0x353e <DC_STOP>
    4e5a:	3e c0       	rjmp	.+124    	; 0x4ed8 <Manual+0x1c8>
		break;
	case SET_MAXIMUM_SPEED:
		Current_Car_Speed = MAXIMUM_SPEED;
    4e5c:	8a e5       	ldi	r24, 0x5A	; 90
    4e5e:	80 93 d3 01 	sts	0x01D3, r24
		PWM_Timer2_Generate(MAXIMUM_SPEED);
    4e62:	8a e5       	ldi	r24, 0x5A	; 90
    4e64:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <PWM_Timer2_Generate>
    4e68:	37 c0       	rjmp	.+110    	; 0x4ed8 <Manual+0x1c8>
		break;
	case SET_MINIMUM_SPEED:
		Current_Car_Speed = MINIMUM_SPEED;
    4e6a:	82 e3       	ldi	r24, 0x32	; 50
    4e6c:	80 93 d3 01 	sts	0x01D3, r24
		PWM_Timer2_Generate(MINIMUM_SPEED);
    4e70:	82 e3       	ldi	r24, 0x32	; 50
    4e72:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <PWM_Timer2_Generate>
    4e76:	30 c0       	rjmp	.+96     	; 0x4ed8 <Manual+0x1c8>
		break;
	case SET_AVERAGE_SPEED:
		Current_Car_Speed = AVERAGE_SPEED;
    4e78:	86 e4       	ldi	r24, 0x46	; 70
    4e7a:	80 93 d3 01 	sts	0x01D3, r24
		PWM_Timer2_Generate(AVERAGE_SPEED);
    4e7e:	86 e4       	ldi	r24, 0x46	; 70
    4e80:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <PWM_Timer2_Generate>
    4e84:	29 c0       	rjmp	.+82     	; 0x4ed8 <Manual+0x1c8>
		break;
	case AUTOMATIC_SWITCH:
		Automatic_1 = HIGH;
    4e86:	81 e0       	ldi	r24, 0x01	; 1
    4e88:	80 93 d4 01 	sts	0x01D4, r24
    4e8c:	25 c0       	rjmp	.+74     	; 0x4ed8 <Manual+0x1c8>
		break;
	case CAR_MOVEMENT_USING_ULTRASONIC_IN:
		Speed_Control_Using_UltraSonic = HIGH;
    4e8e:	81 e0       	ldi	r24, 0x01	; 1
    4e90:	80 93 d6 01 	sts	0x01D6, r24
    4e94:	21 c0       	rjmp	.+66     	; 0x4ed8 <Manual+0x1c8>
		break;
		// Control Car Speed Using Slider in Mobile App
	case START_SPEED_CHANGE:
		if(Choice >= 0 || Choice <= 90)
		{
			First_Num = UART_u8Receive_Data();
    4e96:	0e 94 6a 24 	call	0x48d4	; 0x48d4 <UART_u8Receive_Data>
    4e9a:	80 93 e6 01 	sts	0x01E6, r24
			Second_Num = UART_u8Receive_Data();
    4e9e:	0e 94 6a 24 	call	0x48d4	; 0x48d4 <UART_u8Receive_Data>
    4ea2:	80 93 dd 01 	sts	0x01DD, r24
			Current_Car_Speed = (First_Num-48)*10 + (Second_Num-48);
    4ea6:	80 91 e6 01 	lds	r24, 0x01E6
    4eaa:	88 2f       	mov	r24, r24
    4eac:	90 e0       	ldi	r25, 0x00	; 0
    4eae:	9c 01       	movw	r18, r24
    4eb0:	22 0f       	add	r18, r18
    4eb2:	33 1f       	adc	r19, r19
    4eb4:	c9 01       	movw	r24, r18
    4eb6:	88 0f       	add	r24, r24
    4eb8:	99 1f       	adc	r25, r25
    4eba:	88 0f       	add	r24, r24
    4ebc:	99 1f       	adc	r25, r25
    4ebe:	82 0f       	add	r24, r18
    4ec0:	93 1f       	adc	r25, r19
    4ec2:	98 2f       	mov	r25, r24
    4ec4:	80 91 dd 01 	lds	r24, 0x01DD
    4ec8:	89 0f       	add	r24, r25
    4eca:	80 51       	subi	r24, 0x10	; 16
    4ecc:	80 93 d3 01 	sts	0x01D3, r24
			PWM_Timer2_Generate(Current_Car_Speed);
    4ed0:	80 91 d3 01 	lds	r24, 0x01D3
    4ed4:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <PWM_Timer2_Generate>
		}
		break;
	}
}
    4ed8:	0f 90       	pop	r0
    4eda:	0f 90       	pop	r0
    4edc:	cf 91       	pop	r28
    4ede:	df 91       	pop	r29
    4ee0:	08 95       	ret

00004ee2 <Automatic_Mode_1>:
/*===================================== Auto Car Using 1-Ultra-Sonic =====================================*/
void Automatic_Mode_1()
{
    4ee2:	df 93       	push	r29
    4ee4:	cf 93       	push	r28
    4ee6:	cd b7       	in	r28, 0x3d	; 61
    4ee8:	de b7       	in	r29, 0x3e	; 62
    4eea:	aa 97       	sbiw	r28, 0x2a	; 42
    4eec:	0f b6       	in	r0, 0x3f	; 63
    4eee:	f8 94       	cli
    4ef0:	de bf       	out	0x3e, r29	; 62
    4ef2:	0f be       	out	0x3f, r0	; 63
    4ef4:	cd bf       	out	0x3d, r28	; 61
	if(Automatic_1)
    4ef6:	80 91 d4 01 	lds	r24, 0x01D4
    4efa:	88 23       	and	r24, r24
    4efc:	09 f4       	brne	.+2      	; 0x4f00 <Automatic_Mode_1+0x1e>
    4efe:	d4 c1       	rjmp	.+936    	; 0x52a8 <Automatic_Mode_1+0x3c6>
	{
		LCD_Clear_Screen();
    4f00:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_Clear_Screen>
		LCD_vSendString(" Automatic Mode ");
    4f04:	80 e6       	ldi	r24, 0x60	; 96
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	0e 94 32 16 	call	0x2c64	; 0x2c64 <LCD_vSendString>
		PWM_Timer2_Generate(AUTOMATIC_SPEED);
    4f0c:	8e e1       	ldi	r24, 0x1E	; 30
    4f0e:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <PWM_Timer2_Generate>
    4f12:	ca c1       	rjmp	.+916    	; 0x52a8 <Automatic_Mode_1+0x3c6>
	}
	while(Automatic_1)
	{
		Ultra_Distance_Front = UltraSonic_ICR_Read(TRIGGER_PORT_1,TRIGGER_PIN_1);
    4f14:	84 e4       	ldi	r24, 0x44	; 68
    4f16:	65 e0       	ldi	r22, 0x05	; 5
    4f18:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <UltraSonic_ICR_Read>
    4f1c:	90 93 ea 01 	sts	0x01EA, r25
    4f20:	80 93 e9 01 	sts	0x01E9, r24
		if(Ultra_Distance_Front >= MAX_DISTANCE)
    4f24:	80 91 e9 01 	lds	r24, 0x01E9
    4f28:	90 91 ea 01 	lds	r25, 0x01EA
    4f2c:	88 32       	cpi	r24, 0x28	; 40
    4f2e:	91 05       	cpc	r25, r1
    4f30:	28 f0       	brcs	.+10     	; 0x4f3c <Automatic_Mode_1+0x5a>
		{
			DC_Move_Forward(PORT_A,HIGH);
    4f32:	81 e4       	ldi	r24, 0x41	; 65
    4f34:	61 e0       	ldi	r22, 0x01	; 1
    4f36:	0e 94 6f 18 	call	0x30de	; 0x30de <DC_Move_Forward>
    4f3a:	8a c1       	rjmp	.+788    	; 0x5250 <Automatic_Mode_1+0x36e>
		}
		else
		{
			DC_Move_Right(PORT_A,HIGH);
    4f3c:	81 e4       	ldi	r24, 0x41	; 65
    4f3e:	61 e0       	ldi	r22, 0x01	; 1
    4f40:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <DC_Move_Right>
    4f44:	80 e0       	ldi	r24, 0x00	; 0
    4f46:	90 e0       	ldi	r25, 0x00	; 0
    4f48:	aa e7       	ldi	r26, 0x7A	; 122
    4f4a:	b3 e4       	ldi	r27, 0x43	; 67
    4f4c:	8f a3       	std	Y+39, r24	; 0x27
    4f4e:	98 a7       	std	Y+40, r25	; 0x28
    4f50:	a9 a7       	std	Y+41, r26	; 0x29
    4f52:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f54:	6f a1       	ldd	r22, Y+39	; 0x27
    4f56:	78 a5       	ldd	r23, Y+40	; 0x28
    4f58:	89 a5       	ldd	r24, Y+41	; 0x29
    4f5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    4f5c:	20 e0       	ldi	r18, 0x00	; 0
    4f5e:	30 e0       	ldi	r19, 0x00	; 0
    4f60:	4a ef       	ldi	r20, 0xFA	; 250
    4f62:	54 e4       	ldi	r21, 0x44	; 68
    4f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f68:	dc 01       	movw	r26, r24
    4f6a:	cb 01       	movw	r24, r22
    4f6c:	8b a3       	std	Y+35, r24	; 0x23
    4f6e:	9c a3       	std	Y+36, r25	; 0x24
    4f70:	ad a3       	std	Y+37, r26	; 0x25
    4f72:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4f74:	6b a1       	ldd	r22, Y+35	; 0x23
    4f76:	7c a1       	ldd	r23, Y+36	; 0x24
    4f78:	8d a1       	ldd	r24, Y+37	; 0x25
    4f7a:	9e a1       	ldd	r25, Y+38	; 0x26
    4f7c:	20 e0       	ldi	r18, 0x00	; 0
    4f7e:	30 e0       	ldi	r19, 0x00	; 0
    4f80:	40 e8       	ldi	r20, 0x80	; 128
    4f82:	5f e3       	ldi	r21, 0x3F	; 63
    4f84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f88:	88 23       	and	r24, r24
    4f8a:	2c f4       	brge	.+10     	; 0x4f96 <Automatic_Mode_1+0xb4>
		__ticks = 1;
    4f8c:	81 e0       	ldi	r24, 0x01	; 1
    4f8e:	90 e0       	ldi	r25, 0x00	; 0
    4f90:	9a a3       	std	Y+34, r25	; 0x22
    4f92:	89 a3       	std	Y+33, r24	; 0x21
    4f94:	3f c0       	rjmp	.+126    	; 0x5014 <Automatic_Mode_1+0x132>
	else if (__tmp > 65535)
    4f96:	6b a1       	ldd	r22, Y+35	; 0x23
    4f98:	7c a1       	ldd	r23, Y+36	; 0x24
    4f9a:	8d a1       	ldd	r24, Y+37	; 0x25
    4f9c:	9e a1       	ldd	r25, Y+38	; 0x26
    4f9e:	20 e0       	ldi	r18, 0x00	; 0
    4fa0:	3f ef       	ldi	r19, 0xFF	; 255
    4fa2:	4f e7       	ldi	r20, 0x7F	; 127
    4fa4:	57 e4       	ldi	r21, 0x47	; 71
    4fa6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4faa:	18 16       	cp	r1, r24
    4fac:	4c f5       	brge	.+82     	; 0x5000 <Automatic_Mode_1+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fae:	6f a1       	ldd	r22, Y+39	; 0x27
    4fb0:	78 a5       	ldd	r23, Y+40	; 0x28
    4fb2:	89 a5       	ldd	r24, Y+41	; 0x29
    4fb4:	9a a5       	ldd	r25, Y+42	; 0x2a
    4fb6:	20 e0       	ldi	r18, 0x00	; 0
    4fb8:	30 e0       	ldi	r19, 0x00	; 0
    4fba:	40 e2       	ldi	r20, 0x20	; 32
    4fbc:	51 e4       	ldi	r21, 0x41	; 65
    4fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fc2:	dc 01       	movw	r26, r24
    4fc4:	cb 01       	movw	r24, r22
    4fc6:	bc 01       	movw	r22, r24
    4fc8:	cd 01       	movw	r24, r26
    4fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fce:	dc 01       	movw	r26, r24
    4fd0:	cb 01       	movw	r24, r22
    4fd2:	9a a3       	std	Y+34, r25	; 0x22
    4fd4:	89 a3       	std	Y+33, r24	; 0x21
    4fd6:	0f c0       	rjmp	.+30     	; 0x4ff6 <Automatic_Mode_1+0x114>
    4fd8:	88 ec       	ldi	r24, 0xC8	; 200
    4fda:	90 e0       	ldi	r25, 0x00	; 0
    4fdc:	98 a3       	std	Y+32, r25	; 0x20
    4fde:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4fe0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4fe2:	98 a1       	ldd	r25, Y+32	; 0x20
    4fe4:	01 97       	sbiw	r24, 0x01	; 1
    4fe6:	f1 f7       	brne	.-4      	; 0x4fe4 <Automatic_Mode_1+0x102>
    4fe8:	98 a3       	std	Y+32, r25	; 0x20
    4fea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fec:	89 a1       	ldd	r24, Y+33	; 0x21
    4fee:	9a a1       	ldd	r25, Y+34	; 0x22
    4ff0:	01 97       	sbiw	r24, 0x01	; 1
    4ff2:	9a a3       	std	Y+34, r25	; 0x22
    4ff4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ff6:	89 a1       	ldd	r24, Y+33	; 0x21
    4ff8:	9a a1       	ldd	r25, Y+34	; 0x22
    4ffa:	00 97       	sbiw	r24, 0x00	; 0
    4ffc:	69 f7       	brne	.-38     	; 0x4fd8 <Automatic_Mode_1+0xf6>
    4ffe:	14 c0       	rjmp	.+40     	; 0x5028 <Automatic_Mode_1+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5000:	6b a1       	ldd	r22, Y+35	; 0x23
    5002:	7c a1       	ldd	r23, Y+36	; 0x24
    5004:	8d a1       	ldd	r24, Y+37	; 0x25
    5006:	9e a1       	ldd	r25, Y+38	; 0x26
    5008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    500c:	dc 01       	movw	r26, r24
    500e:	cb 01       	movw	r24, r22
    5010:	9a a3       	std	Y+34, r25	; 0x22
    5012:	89 a3       	std	Y+33, r24	; 0x21
    5014:	89 a1       	ldd	r24, Y+33	; 0x21
    5016:	9a a1       	ldd	r25, Y+34	; 0x22
    5018:	9e 8f       	std	Y+30, r25	; 0x1e
    501a:	8d 8f       	std	Y+29, r24	; 0x1d
    501c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    501e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5020:	01 97       	sbiw	r24, 0x01	; 1
    5022:	f1 f7       	brne	.-4      	; 0x5020 <Automatic_Mode_1+0x13e>
    5024:	9e 8f       	std	Y+30, r25	; 0x1e
    5026:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(250);
			Ultra_Distance_Right = UltraSonic_ICR_Read(TRIGGER_PORT_1,TRIGGER_PIN_1);
    5028:	84 e4       	ldi	r24, 0x44	; 68
    502a:	65 e0       	ldi	r22, 0x05	; 5
    502c:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <UltraSonic_ICR_Read>
    5030:	90 93 df 01 	sts	0x01DF, r25
    5034:	80 93 de 01 	sts	0x01DE, r24
			if(Ultra_Distance_Right >= MAX_DISTANCE)
    5038:	80 91 de 01 	lds	r24, 0x01DE
    503c:	90 91 df 01 	lds	r25, 0x01DF
    5040:	88 32       	cpi	r24, 0x28	; 40
    5042:	91 05       	cpc	r25, r1
    5044:	28 f0       	brcs	.+10     	; 0x5050 <Automatic_Mode_1+0x16e>
			{
				DC_Move_Forward(PORT_A,HIGH);
    5046:	81 e4       	ldi	r24, 0x41	; 65
    5048:	61 e0       	ldi	r22, 0x01	; 1
    504a:	0e 94 6f 18 	call	0x30de	; 0x30de <DC_Move_Forward>
    504e:	00 c1       	rjmp	.+512    	; 0x5250 <Automatic_Mode_1+0x36e>
			}
			else
			{
				DC_Move_Right(PORT_A,HIGH);
    5050:	81 e4       	ldi	r24, 0x41	; 65
    5052:	61 e0       	ldi	r22, 0x01	; 1
    5054:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <DC_Move_Right>
    5058:	80 e0       	ldi	r24, 0x00	; 0
    505a:	90 e0       	ldi	r25, 0x00	; 0
    505c:	aa ef       	ldi	r26, 0xFA	; 250
    505e:	b3 e4       	ldi	r27, 0x43	; 67
    5060:	89 8f       	std	Y+25, r24	; 0x19
    5062:	9a 8f       	std	Y+26, r25	; 0x1a
    5064:	ab 8f       	std	Y+27, r26	; 0x1b
    5066:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5068:	69 8d       	ldd	r22, Y+25	; 0x19
    506a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    506c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    506e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5070:	20 e0       	ldi	r18, 0x00	; 0
    5072:	30 e0       	ldi	r19, 0x00	; 0
    5074:	4a ef       	ldi	r20, 0xFA	; 250
    5076:	54 e4       	ldi	r21, 0x44	; 68
    5078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    507c:	dc 01       	movw	r26, r24
    507e:	cb 01       	movw	r24, r22
    5080:	8d 8b       	std	Y+21, r24	; 0x15
    5082:	9e 8b       	std	Y+22, r25	; 0x16
    5084:	af 8b       	std	Y+23, r26	; 0x17
    5086:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5088:	6d 89       	ldd	r22, Y+21	; 0x15
    508a:	7e 89       	ldd	r23, Y+22	; 0x16
    508c:	8f 89       	ldd	r24, Y+23	; 0x17
    508e:	98 8d       	ldd	r25, Y+24	; 0x18
    5090:	20 e0       	ldi	r18, 0x00	; 0
    5092:	30 e0       	ldi	r19, 0x00	; 0
    5094:	40 e8       	ldi	r20, 0x80	; 128
    5096:	5f e3       	ldi	r21, 0x3F	; 63
    5098:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    509c:	88 23       	and	r24, r24
    509e:	2c f4       	brge	.+10     	; 0x50aa <Automatic_Mode_1+0x1c8>
		__ticks = 1;
    50a0:	81 e0       	ldi	r24, 0x01	; 1
    50a2:	90 e0       	ldi	r25, 0x00	; 0
    50a4:	9c 8b       	std	Y+20, r25	; 0x14
    50a6:	8b 8b       	std	Y+19, r24	; 0x13
    50a8:	3f c0       	rjmp	.+126    	; 0x5128 <Automatic_Mode_1+0x246>
	else if (__tmp > 65535)
    50aa:	6d 89       	ldd	r22, Y+21	; 0x15
    50ac:	7e 89       	ldd	r23, Y+22	; 0x16
    50ae:	8f 89       	ldd	r24, Y+23	; 0x17
    50b0:	98 8d       	ldd	r25, Y+24	; 0x18
    50b2:	20 e0       	ldi	r18, 0x00	; 0
    50b4:	3f ef       	ldi	r19, 0xFF	; 255
    50b6:	4f e7       	ldi	r20, 0x7F	; 127
    50b8:	57 e4       	ldi	r21, 0x47	; 71
    50ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    50be:	18 16       	cp	r1, r24
    50c0:	4c f5       	brge	.+82     	; 0x5114 <Automatic_Mode_1+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50c2:	69 8d       	ldd	r22, Y+25	; 0x19
    50c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    50c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    50c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    50ca:	20 e0       	ldi	r18, 0x00	; 0
    50cc:	30 e0       	ldi	r19, 0x00	; 0
    50ce:	40 e2       	ldi	r20, 0x20	; 32
    50d0:	51 e4       	ldi	r21, 0x41	; 65
    50d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50d6:	dc 01       	movw	r26, r24
    50d8:	cb 01       	movw	r24, r22
    50da:	bc 01       	movw	r22, r24
    50dc:	cd 01       	movw	r24, r26
    50de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50e2:	dc 01       	movw	r26, r24
    50e4:	cb 01       	movw	r24, r22
    50e6:	9c 8b       	std	Y+20, r25	; 0x14
    50e8:	8b 8b       	std	Y+19, r24	; 0x13
    50ea:	0f c0       	rjmp	.+30     	; 0x510a <Automatic_Mode_1+0x228>
    50ec:	88 ec       	ldi	r24, 0xC8	; 200
    50ee:	90 e0       	ldi	r25, 0x00	; 0
    50f0:	9a 8b       	std	Y+18, r25	; 0x12
    50f2:	89 8b       	std	Y+17, r24	; 0x11
    50f4:	89 89       	ldd	r24, Y+17	; 0x11
    50f6:	9a 89       	ldd	r25, Y+18	; 0x12
    50f8:	01 97       	sbiw	r24, 0x01	; 1
    50fa:	f1 f7       	brne	.-4      	; 0x50f8 <Automatic_Mode_1+0x216>
    50fc:	9a 8b       	std	Y+18, r25	; 0x12
    50fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5100:	8b 89       	ldd	r24, Y+19	; 0x13
    5102:	9c 89       	ldd	r25, Y+20	; 0x14
    5104:	01 97       	sbiw	r24, 0x01	; 1
    5106:	9c 8b       	std	Y+20, r25	; 0x14
    5108:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    510a:	8b 89       	ldd	r24, Y+19	; 0x13
    510c:	9c 89       	ldd	r25, Y+20	; 0x14
    510e:	00 97       	sbiw	r24, 0x00	; 0
    5110:	69 f7       	brne	.-38     	; 0x50ec <Automatic_Mode_1+0x20a>
    5112:	14 c0       	rjmp	.+40     	; 0x513c <Automatic_Mode_1+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5114:	6d 89       	ldd	r22, Y+21	; 0x15
    5116:	7e 89       	ldd	r23, Y+22	; 0x16
    5118:	8f 89       	ldd	r24, Y+23	; 0x17
    511a:	98 8d       	ldd	r25, Y+24	; 0x18
    511c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5120:	dc 01       	movw	r26, r24
    5122:	cb 01       	movw	r24, r22
    5124:	9c 8b       	std	Y+20, r25	; 0x14
    5126:	8b 8b       	std	Y+19, r24	; 0x13
    5128:	8b 89       	ldd	r24, Y+19	; 0x13
    512a:	9c 89       	ldd	r25, Y+20	; 0x14
    512c:	98 8b       	std	Y+16, r25	; 0x10
    512e:	8f 87       	std	Y+15, r24	; 0x0f
    5130:	8f 85       	ldd	r24, Y+15	; 0x0f
    5132:	98 89       	ldd	r25, Y+16	; 0x10
    5134:	01 97       	sbiw	r24, 0x01	; 1
    5136:	f1 f7       	brne	.-4      	; 0x5134 <Automatic_Mode_1+0x252>
    5138:	98 8b       	std	Y+16, r25	; 0x10
    513a:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				Ultra_Distance_Left = UltraSonic_ICR_Read(TRIGGER_PORT_1,TRIGGER_PIN_1);
    513c:	84 e4       	ldi	r24, 0x44	; 68
    513e:	65 e0       	ldi	r22, 0x05	; 5
    5140:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <UltraSonic_ICR_Read>
    5144:	90 93 e8 01 	sts	0x01E8, r25
    5148:	80 93 e7 01 	sts	0x01E7, r24
				if(Ultra_Distance_Left >= MAX_DISTANCE)
    514c:	80 91 e7 01 	lds	r24, 0x01E7
    5150:	90 91 e8 01 	lds	r25, 0x01E8
    5154:	88 32       	cpi	r24, 0x28	; 40
    5156:	91 05       	cpc	r25, r1
    5158:	28 f0       	brcs	.+10     	; 0x5164 <Automatic_Mode_1+0x282>
				{
					DC_Move_Forward(PORT_A,HIGH);
    515a:	81 e4       	ldi	r24, 0x41	; 65
    515c:	61 e0       	ldi	r22, 0x01	; 1
    515e:	0e 94 6f 18 	call	0x30de	; 0x30de <DC_Move_Forward>
    5162:	76 c0       	rjmp	.+236    	; 0x5250 <Automatic_Mode_1+0x36e>
				}
				else
				{
					DC_Drift_Back_Left(PORT_A,HIGH);
    5164:	81 e4       	ldi	r24, 0x41	; 65
    5166:	61 e0       	ldi	r22, 0x01	; 1
    5168:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <DC_Drift_Back_Left>
    516c:	80 e0       	ldi	r24, 0x00	; 0
    516e:	90 e0       	ldi	r25, 0x00	; 0
    5170:	a6 e1       	ldi	r26, 0x16	; 22
    5172:	b3 e4       	ldi	r27, 0x43	; 67
    5174:	8b 87       	std	Y+11, r24	; 0x0b
    5176:	9c 87       	std	Y+12, r25	; 0x0c
    5178:	ad 87       	std	Y+13, r26	; 0x0d
    517a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    517c:	6b 85       	ldd	r22, Y+11	; 0x0b
    517e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5180:	8d 85       	ldd	r24, Y+13	; 0x0d
    5182:	9e 85       	ldd	r25, Y+14	; 0x0e
    5184:	20 e0       	ldi	r18, 0x00	; 0
    5186:	30 e0       	ldi	r19, 0x00	; 0
    5188:	4a ef       	ldi	r20, 0xFA	; 250
    518a:	54 e4       	ldi	r21, 0x44	; 68
    518c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5190:	dc 01       	movw	r26, r24
    5192:	cb 01       	movw	r24, r22
    5194:	8f 83       	std	Y+7, r24	; 0x07
    5196:	98 87       	std	Y+8, r25	; 0x08
    5198:	a9 87       	std	Y+9, r26	; 0x09
    519a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    519c:	6f 81       	ldd	r22, Y+7	; 0x07
    519e:	78 85       	ldd	r23, Y+8	; 0x08
    51a0:	89 85       	ldd	r24, Y+9	; 0x09
    51a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    51a4:	20 e0       	ldi	r18, 0x00	; 0
    51a6:	30 e0       	ldi	r19, 0x00	; 0
    51a8:	40 e8       	ldi	r20, 0x80	; 128
    51aa:	5f e3       	ldi	r21, 0x3F	; 63
    51ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51b0:	88 23       	and	r24, r24
    51b2:	2c f4       	brge	.+10     	; 0x51be <Automatic_Mode_1+0x2dc>
		__ticks = 1;
    51b4:	81 e0       	ldi	r24, 0x01	; 1
    51b6:	90 e0       	ldi	r25, 0x00	; 0
    51b8:	9e 83       	std	Y+6, r25	; 0x06
    51ba:	8d 83       	std	Y+5, r24	; 0x05
    51bc:	3f c0       	rjmp	.+126    	; 0x523c <Automatic_Mode_1+0x35a>
	else if (__tmp > 65535)
    51be:	6f 81       	ldd	r22, Y+7	; 0x07
    51c0:	78 85       	ldd	r23, Y+8	; 0x08
    51c2:	89 85       	ldd	r24, Y+9	; 0x09
    51c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    51c6:	20 e0       	ldi	r18, 0x00	; 0
    51c8:	3f ef       	ldi	r19, 0xFF	; 255
    51ca:	4f e7       	ldi	r20, 0x7F	; 127
    51cc:	57 e4       	ldi	r21, 0x47	; 71
    51ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51d2:	18 16       	cp	r1, r24
    51d4:	4c f5       	brge	.+82     	; 0x5228 <Automatic_Mode_1+0x346>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    51d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    51da:	8d 85       	ldd	r24, Y+13	; 0x0d
    51dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    51de:	20 e0       	ldi	r18, 0x00	; 0
    51e0:	30 e0       	ldi	r19, 0x00	; 0
    51e2:	40 e2       	ldi	r20, 0x20	; 32
    51e4:	51 e4       	ldi	r21, 0x41	; 65
    51e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51ea:	dc 01       	movw	r26, r24
    51ec:	cb 01       	movw	r24, r22
    51ee:	bc 01       	movw	r22, r24
    51f0:	cd 01       	movw	r24, r26
    51f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51f6:	dc 01       	movw	r26, r24
    51f8:	cb 01       	movw	r24, r22
    51fa:	9e 83       	std	Y+6, r25	; 0x06
    51fc:	8d 83       	std	Y+5, r24	; 0x05
    51fe:	0f c0       	rjmp	.+30     	; 0x521e <Automatic_Mode_1+0x33c>
    5200:	88 ec       	ldi	r24, 0xC8	; 200
    5202:	90 e0       	ldi	r25, 0x00	; 0
    5204:	9c 83       	std	Y+4, r25	; 0x04
    5206:	8b 83       	std	Y+3, r24	; 0x03
    5208:	8b 81       	ldd	r24, Y+3	; 0x03
    520a:	9c 81       	ldd	r25, Y+4	; 0x04
    520c:	01 97       	sbiw	r24, 0x01	; 1
    520e:	f1 f7       	brne	.-4      	; 0x520c <Automatic_Mode_1+0x32a>
    5210:	9c 83       	std	Y+4, r25	; 0x04
    5212:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5214:	8d 81       	ldd	r24, Y+5	; 0x05
    5216:	9e 81       	ldd	r25, Y+6	; 0x06
    5218:	01 97       	sbiw	r24, 0x01	; 1
    521a:	9e 83       	std	Y+6, r25	; 0x06
    521c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    521e:	8d 81       	ldd	r24, Y+5	; 0x05
    5220:	9e 81       	ldd	r25, Y+6	; 0x06
    5222:	00 97       	sbiw	r24, 0x00	; 0
    5224:	69 f7       	brne	.-38     	; 0x5200 <Automatic_Mode_1+0x31e>
    5226:	14 c0       	rjmp	.+40     	; 0x5250 <Automatic_Mode_1+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5228:	6f 81       	ldd	r22, Y+7	; 0x07
    522a:	78 85       	ldd	r23, Y+8	; 0x08
    522c:	89 85       	ldd	r24, Y+9	; 0x09
    522e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5234:	dc 01       	movw	r26, r24
    5236:	cb 01       	movw	r24, r22
    5238:	9e 83       	std	Y+6, r25	; 0x06
    523a:	8d 83       	std	Y+5, r24	; 0x05
    523c:	8d 81       	ldd	r24, Y+5	; 0x05
    523e:	9e 81       	ldd	r25, Y+6	; 0x06
    5240:	9a 83       	std	Y+2, r25	; 0x02
    5242:	89 83       	std	Y+1, r24	; 0x01
    5244:	89 81       	ldd	r24, Y+1	; 0x01
    5246:	9a 81       	ldd	r25, Y+2	; 0x02
    5248:	01 97       	sbiw	r24, 0x01	; 1
    524a:	f1 f7       	brne	.-4      	; 0x5248 <Automatic_Mode_1+0x366>
    524c:	9a 83       	std	Y+2, r25	; 0x02
    524e:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(150);
				}
			}
		}
		if(READ_BIT(UCSRA,RXC) == HIGH)
    5250:	eb e2       	ldi	r30, 0x2B	; 43
    5252:	f0 e0       	ldi	r31, 0x00	; 0
    5254:	80 81       	ld	r24, Z
    5256:	88 1f       	adc	r24, r24
    5258:	88 27       	eor	r24, r24
    525a:	88 1f       	adc	r24, r24
    525c:	88 2f       	mov	r24, r24
    525e:	90 e0       	ldi	r25, 0x00	; 0
    5260:	90 70       	andi	r25, 0x00	; 0
    5262:	81 30       	cpi	r24, 0x01	; 1
    5264:	91 05       	cpc	r25, r1
    5266:	01 f5       	brne	.+64     	; 0x52a8 <Automatic_Mode_1+0x3c6>
		{
			if(UDR == MANUAL_SWITCH)
    5268:	ec e2       	ldi	r30, 0x2C	; 44
    526a:	f0 e0       	ldi	r31, 0x00	; 0
    526c:	80 81       	ld	r24, Z
    526e:	84 37       	cpi	r24, 0x74	; 116
    5270:	d9 f4       	brne	.+54     	; 0x52a8 <Automatic_Mode_1+0x3c6>
			{
				Automatic_1 = LOW;
    5272:	10 92 d4 01 	sts	0x01D4, r1
				DC_STOP(PORT_A,HIGH);
    5276:	81 e4       	ldi	r24, 0x41	; 65
    5278:	61 e0       	ldi	r22, 0x01	; 1
    527a:	0e 94 9f 1a 	call	0x353e	; 0x353e <DC_STOP>
				LCD_Clear_Screen();
    527e:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_Clear_Screen>
				LCD_Move_Cursor(1,1);
    5282:	81 e0       	ldi	r24, 0x01	; 1
    5284:	61 e0       	ldi	r22, 0x01	; 1
    5286:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <LCD_Move_Cursor>
				LCD_vSendString("Car Speed : ");
    528a:	81 e7       	ldi	r24, 0x71	; 113
    528c:	90 e0       	ldi	r25, 0x00	; 0
    528e:	0e 94 32 16 	call	0x2c64	; 0x2c64 <LCD_vSendString>
				LCD_Move_Cursor(2,1);
    5292:	82 e0       	ldi	r24, 0x02	; 2
    5294:	61 e0       	ldi	r22, 0x01	; 1
    5296:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <LCD_Move_Cursor>
				LCD_vSendString("Front Dist : ");
    529a:	8e e7       	ldi	r24, 0x7E	; 126
    529c:	90 e0       	ldi	r25, 0x00	; 0
    529e:	0e 94 32 16 	call	0x2c64	; 0x2c64 <LCD_vSendString>
				PWM_Timer2_Generate(AVERAGE_SPEED);
    52a2:	86 e4       	ldi	r24, 0x46	; 70
    52a4:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <PWM_Timer2_Generate>
	{
		LCD_Clear_Screen();
		LCD_vSendString(" Automatic Mode ");
		PWM_Timer2_Generate(AUTOMATIC_SPEED);
	}
	while(Automatic_1)
    52a8:	80 91 d4 01 	lds	r24, 0x01D4
    52ac:	88 23       	and	r24, r24
    52ae:	09 f0       	breq	.+2      	; 0x52b2 <Automatic_Mode_1+0x3d0>
    52b0:	31 ce       	rjmp	.-926    	; 0x4f14 <Automatic_Mode_1+0x32>
				LCD_vSendString("Front Dist : ");
				PWM_Timer2_Generate(AVERAGE_SPEED);
			}
		}
	}
}
    52b2:	aa 96       	adiw	r28, 0x2a	; 42
    52b4:	0f b6       	in	r0, 0x3f	; 63
    52b6:	f8 94       	cli
    52b8:	de bf       	out	0x3e, r29	; 62
    52ba:	0f be       	out	0x3f, r0	; 63
    52bc:	cd bf       	out	0x3d, r28	; 61
    52be:	cf 91       	pop	r28
    52c0:	df 91       	pop	r29
    52c2:	08 95       	ret

000052c4 <Show_Car_Speed_On_LCD>:
/*===================================== LCD Display =====================================*/
void Show_Car_Speed_On_LCD()
{
    52c4:	df 93       	push	r29
    52c6:	cf 93       	push	r28
    52c8:	cd b7       	in	r28, 0x3d	; 61
    52ca:	de b7       	in	r29, 0x3e	; 62
	LCD_Move_Cursor(1,13);
    52cc:	81 e0       	ldi	r24, 0x01	; 1
    52ce:	6d e0       	ldi	r22, 0x0D	; 13
    52d0:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <LCD_Move_Cursor>
	LCD_vSendChar(((Current_Car_Speed/10)%10) + 48);
    52d4:	80 91 d3 01 	lds	r24, 0x01D3
    52d8:	9a e0       	ldi	r25, 0x0A	; 10
    52da:	69 2f       	mov	r22, r25
    52dc:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <__udivmodqi4>
    52e0:	9a e0       	ldi	r25, 0x0A	; 10
    52e2:	69 2f       	mov	r22, r25
    52e4:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <__udivmodqi4>
    52e8:	89 2f       	mov	r24, r25
    52ea:	80 5d       	subi	r24, 0xD0	; 208
    52ec:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <LCD_vSendChar>
	LCD_vSendChar((Current_Car_Speed%10) + 48);
    52f0:	80 91 d3 01 	lds	r24, 0x01D3
    52f4:	9a e0       	ldi	r25, 0x0A	; 10
    52f6:	69 2f       	mov	r22, r25
    52f8:	0e 94 53 2c 	call	0x58a6	; 0x58a6 <__udivmodqi4>
    52fc:	89 2f       	mov	r24, r25
    52fe:	80 5d       	subi	r24, 0xD0	; 208
    5300:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <LCD_vSendChar>
	LCD_vSendChar(' ');
    5304:	80 e2       	ldi	r24, 0x20	; 32
    5306:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <LCD_vSendChar>
}
    530a:	cf 91       	pop	r28
    530c:	df 91       	pop	r29
    530e:	08 95       	ret

00005310 <Show_UltraSonic_Distance_On_LCD>:
void Show_UltraSonic_Distance_On_LCD()
{
    5310:	df 93       	push	r29
    5312:	cf 93       	push	r28
    5314:	cd b7       	in	r28, 0x3d	; 61
    5316:	de b7       	in	r29, 0x3e	; 62
	LCD_Move_Cursor(2,14);
    5318:	82 e0       	ldi	r24, 0x02	; 2
    531a:	6e e0       	ldi	r22, 0x0E	; 14
    531c:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <LCD_Move_Cursor>
	LCD_vSendChar(((Ultra_Distance_Front/100)%10) + 48);
    5320:	80 91 e9 01 	lds	r24, 0x01E9
    5324:	90 91 ea 01 	lds	r25, 0x01EA
    5328:	24 e6       	ldi	r18, 0x64	; 100
    532a:	30 e0       	ldi	r19, 0x00	; 0
    532c:	b9 01       	movw	r22, r18
    532e:	0e 94 5f 2c 	call	0x58be	; 0x58be <__udivmodhi4>
    5332:	cb 01       	movw	r24, r22
    5334:	2a e0       	ldi	r18, 0x0A	; 10
    5336:	30 e0       	ldi	r19, 0x00	; 0
    5338:	b9 01       	movw	r22, r18
    533a:	0e 94 5f 2c 	call	0x58be	; 0x58be <__udivmodhi4>
    533e:	80 5d       	subi	r24, 0xD0	; 208
    5340:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <LCD_vSendChar>
	LCD_vSendChar(((Ultra_Distance_Front/10)%10) + 48);
    5344:	80 91 e9 01 	lds	r24, 0x01E9
    5348:	90 91 ea 01 	lds	r25, 0x01EA
    534c:	2a e0       	ldi	r18, 0x0A	; 10
    534e:	30 e0       	ldi	r19, 0x00	; 0
    5350:	b9 01       	movw	r22, r18
    5352:	0e 94 5f 2c 	call	0x58be	; 0x58be <__udivmodhi4>
    5356:	cb 01       	movw	r24, r22
    5358:	2a e0       	ldi	r18, 0x0A	; 10
    535a:	30 e0       	ldi	r19, 0x00	; 0
    535c:	b9 01       	movw	r22, r18
    535e:	0e 94 5f 2c 	call	0x58be	; 0x58be <__udivmodhi4>
    5362:	80 5d       	subi	r24, 0xD0	; 208
    5364:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <LCD_vSendChar>
	LCD_vSendChar((Ultra_Distance_Front%10) + 48);
    5368:	80 91 e9 01 	lds	r24, 0x01E9
    536c:	90 91 ea 01 	lds	r25, 0x01EA
    5370:	2a e0       	ldi	r18, 0x0A	; 10
    5372:	30 e0       	ldi	r19, 0x00	; 0
    5374:	b9 01       	movw	r22, r18
    5376:	0e 94 5f 2c 	call	0x58be	; 0x58be <__udivmodhi4>
    537a:	80 5d       	subi	r24, 0xD0	; 208
    537c:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <LCD_vSendChar>
	LCD_vSendChar(' ');
    5380:	80 e2       	ldi	r24, 0x20	; 32
    5382:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <LCD_vSendChar>
}
    5386:	cf 91       	pop	r28
    5388:	df 91       	pop	r29
    538a:	08 95       	ret

0000538c <Show_Car_Engine_Status>:
void Show_Car_Engine_Status()
{
    538c:	df 93       	push	r29
    538e:	cf 93       	push	r28
    5390:	cd b7       	in	r28, 0x3d	; 61
    5392:	de b7       	in	r29, 0x3e	; 62
    5394:	60 97       	sbiw	r28, 0x10	; 16
    5396:	0f b6       	in	r0, 0x3f	; 63
    5398:	f8 94       	cli
    539a:	de bf       	out	0x3e, r29	; 62
    539c:	0f be       	out	0x3f, r0	; 63
    539e:	cd bf       	out	0x3d, r28	; 61
	switch(Car_Start)
    53a0:	80 91 d5 01 	lds	r24, 0x01D5
    53a4:	28 2f       	mov	r18, r24
    53a6:	30 e0       	ldi	r19, 0x00	; 0
    53a8:	38 8b       	std	Y+16, r19	; 0x10
    53aa:	2f 87       	std	Y+15, r18	; 0x0f
    53ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    53ae:	98 89       	ldd	r25, Y+16	; 0x10
    53b0:	00 97       	sbiw	r24, 0x00	; 0
    53b2:	31 f0       	breq	.+12     	; 0x53c0 <Show_Car_Engine_Status+0x34>
    53b4:	2f 85       	ldd	r18, Y+15	; 0x0f
    53b6:	38 89       	ldd	r19, Y+16	; 0x10
    53b8:	21 30       	cpi	r18, 0x01	; 1
    53ba:	31 05       	cpc	r19, r1
    53bc:	91 f0       	breq	.+36     	; 0x53e2 <Show_Car_Engine_Status+0x56>
    53be:	93 c0       	rjmp	.+294    	; 0x54e6 <Show_Car_Engine_Status+0x15a>
	{
	case 0:
		LCD_Move_Cursor(1,1);
    53c0:	81 e0       	ldi	r24, 0x01	; 1
    53c2:	61 e0       	ldi	r22, 0x01	; 1
    53c4:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <LCD_Move_Cursor>
		LCD_vSendString("Engine On Hold");
    53c8:	8c e8       	ldi	r24, 0x8C	; 140
    53ca:	90 e0       	ldi	r25, 0x00	; 0
    53cc:	0e 94 32 16 	call	0x2c64	; 0x2c64 <LCD_vSendString>
		LED_ON(RED_LED_PORT,RED_LED_PIN);
    53d0:	83 e4       	ldi	r24, 0x43	; 67
    53d2:	62 e0       	ldi	r22, 0x02	; 2
    53d4:	0e 94 07 18 	call	0x300e	; 0x300e <LED_ON>
		LED_OFF(GREEN_LED_PORT,GREEN_LED_PIN);
    53d8:	83 e4       	ldi	r24, 0x43	; 67
    53da:	63 e0       	ldi	r22, 0x03	; 3
    53dc:	0e 94 18 18 	call	0x3030	; 0x3030 <LED_OFF>
    53e0:	82 c0       	rjmp	.+260    	; 0x54e6 <Show_Car_Engine_Status+0x15a>
		break;
	case 1:
		LCD_Move_Cursor(1,1);
    53e2:	81 e0       	ldi	r24, 0x01	; 1
    53e4:	61 e0       	ldi	r22, 0x01	; 1
    53e6:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <LCD_Move_Cursor>
		LCD_vSendString("Starting Engine");
    53ea:	8b e9       	ldi	r24, 0x9B	; 155
    53ec:	90 e0       	ldi	r25, 0x00	; 0
    53ee:	0e 94 32 16 	call	0x2c64	; 0x2c64 <LCD_vSendString>
		LED_ON(GREEN_LED_PORT,GREEN_LED_PIN);
    53f2:	83 e4       	ldi	r24, 0x43	; 67
    53f4:	63 e0       	ldi	r22, 0x03	; 3
    53f6:	0e 94 07 18 	call	0x300e	; 0x300e <LED_ON>
		LED_OFF(RED_LED_PORT,RED_LED_PIN);
    53fa:	83 e4       	ldi	r24, 0x43	; 67
    53fc:	62 e0       	ldi	r22, 0x02	; 2
    53fe:	0e 94 18 18 	call	0x3030	; 0x3030 <LED_OFF>
    5402:	80 e0       	ldi	r24, 0x00	; 0
    5404:	90 e0       	ldi	r25, 0x00	; 0
    5406:	aa e7       	ldi	r26, 0x7A	; 122
    5408:	b4 e4       	ldi	r27, 0x44	; 68
    540a:	8b 87       	std	Y+11, r24	; 0x0b
    540c:	9c 87       	std	Y+12, r25	; 0x0c
    540e:	ad 87       	std	Y+13, r26	; 0x0d
    5410:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5412:	6b 85       	ldd	r22, Y+11	; 0x0b
    5414:	7c 85       	ldd	r23, Y+12	; 0x0c
    5416:	8d 85       	ldd	r24, Y+13	; 0x0d
    5418:	9e 85       	ldd	r25, Y+14	; 0x0e
    541a:	20 e0       	ldi	r18, 0x00	; 0
    541c:	30 e0       	ldi	r19, 0x00	; 0
    541e:	4a ef       	ldi	r20, 0xFA	; 250
    5420:	54 e4       	ldi	r21, 0x44	; 68
    5422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5426:	dc 01       	movw	r26, r24
    5428:	cb 01       	movw	r24, r22
    542a:	8f 83       	std	Y+7, r24	; 0x07
    542c:	98 87       	std	Y+8, r25	; 0x08
    542e:	a9 87       	std	Y+9, r26	; 0x09
    5430:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5432:	6f 81       	ldd	r22, Y+7	; 0x07
    5434:	78 85       	ldd	r23, Y+8	; 0x08
    5436:	89 85       	ldd	r24, Y+9	; 0x09
    5438:	9a 85       	ldd	r25, Y+10	; 0x0a
    543a:	20 e0       	ldi	r18, 0x00	; 0
    543c:	30 e0       	ldi	r19, 0x00	; 0
    543e:	40 e8       	ldi	r20, 0x80	; 128
    5440:	5f e3       	ldi	r21, 0x3F	; 63
    5442:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5446:	88 23       	and	r24, r24
    5448:	2c f4       	brge	.+10     	; 0x5454 <Show_Car_Engine_Status+0xc8>
		__ticks = 1;
    544a:	81 e0       	ldi	r24, 0x01	; 1
    544c:	90 e0       	ldi	r25, 0x00	; 0
    544e:	9e 83       	std	Y+6, r25	; 0x06
    5450:	8d 83       	std	Y+5, r24	; 0x05
    5452:	3f c0       	rjmp	.+126    	; 0x54d2 <Show_Car_Engine_Status+0x146>
	else if (__tmp > 65535)
    5454:	6f 81       	ldd	r22, Y+7	; 0x07
    5456:	78 85       	ldd	r23, Y+8	; 0x08
    5458:	89 85       	ldd	r24, Y+9	; 0x09
    545a:	9a 85       	ldd	r25, Y+10	; 0x0a
    545c:	20 e0       	ldi	r18, 0x00	; 0
    545e:	3f ef       	ldi	r19, 0xFF	; 255
    5460:	4f e7       	ldi	r20, 0x7F	; 127
    5462:	57 e4       	ldi	r21, 0x47	; 71
    5464:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5468:	18 16       	cp	r1, r24
    546a:	4c f5       	brge	.+82     	; 0x54be <Show_Car_Engine_Status+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    546c:	6b 85       	ldd	r22, Y+11	; 0x0b
    546e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5470:	8d 85       	ldd	r24, Y+13	; 0x0d
    5472:	9e 85       	ldd	r25, Y+14	; 0x0e
    5474:	20 e0       	ldi	r18, 0x00	; 0
    5476:	30 e0       	ldi	r19, 0x00	; 0
    5478:	40 e2       	ldi	r20, 0x20	; 32
    547a:	51 e4       	ldi	r21, 0x41	; 65
    547c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5480:	dc 01       	movw	r26, r24
    5482:	cb 01       	movw	r24, r22
    5484:	bc 01       	movw	r22, r24
    5486:	cd 01       	movw	r24, r26
    5488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    548c:	dc 01       	movw	r26, r24
    548e:	cb 01       	movw	r24, r22
    5490:	9e 83       	std	Y+6, r25	; 0x06
    5492:	8d 83       	std	Y+5, r24	; 0x05
    5494:	0f c0       	rjmp	.+30     	; 0x54b4 <Show_Car_Engine_Status+0x128>
    5496:	88 ec       	ldi	r24, 0xC8	; 200
    5498:	90 e0       	ldi	r25, 0x00	; 0
    549a:	9c 83       	std	Y+4, r25	; 0x04
    549c:	8b 83       	std	Y+3, r24	; 0x03
    549e:	8b 81       	ldd	r24, Y+3	; 0x03
    54a0:	9c 81       	ldd	r25, Y+4	; 0x04
    54a2:	01 97       	sbiw	r24, 0x01	; 1
    54a4:	f1 f7       	brne	.-4      	; 0x54a2 <Show_Car_Engine_Status+0x116>
    54a6:	9c 83       	std	Y+4, r25	; 0x04
    54a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54aa:	8d 81       	ldd	r24, Y+5	; 0x05
    54ac:	9e 81       	ldd	r25, Y+6	; 0x06
    54ae:	01 97       	sbiw	r24, 0x01	; 1
    54b0:	9e 83       	std	Y+6, r25	; 0x06
    54b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54b4:	8d 81       	ldd	r24, Y+5	; 0x05
    54b6:	9e 81       	ldd	r25, Y+6	; 0x06
    54b8:	00 97       	sbiw	r24, 0x00	; 0
    54ba:	69 f7       	brne	.-38     	; 0x5496 <Show_Car_Engine_Status+0x10a>
    54bc:	14 c0       	rjmp	.+40     	; 0x54e6 <Show_Car_Engine_Status+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54be:	6f 81       	ldd	r22, Y+7	; 0x07
    54c0:	78 85       	ldd	r23, Y+8	; 0x08
    54c2:	89 85       	ldd	r24, Y+9	; 0x09
    54c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    54c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54ca:	dc 01       	movw	r26, r24
    54cc:	cb 01       	movw	r24, r22
    54ce:	9e 83       	std	Y+6, r25	; 0x06
    54d0:	8d 83       	std	Y+5, r24	; 0x05
    54d2:	8d 81       	ldd	r24, Y+5	; 0x05
    54d4:	9e 81       	ldd	r25, Y+6	; 0x06
    54d6:	9a 83       	std	Y+2, r25	; 0x02
    54d8:	89 83       	std	Y+1, r24	; 0x01
    54da:	89 81       	ldd	r24, Y+1	; 0x01
    54dc:	9a 81       	ldd	r25, Y+2	; 0x02
    54de:	01 97       	sbiw	r24, 0x01	; 1
    54e0:	f1 f7       	brne	.-4      	; 0x54de <Show_Car_Engine_Status+0x152>
    54e2:	9a 83       	std	Y+2, r25	; 0x02
    54e4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		break;
	}
}
    54e6:	60 96       	adiw	r28, 0x10	; 16
    54e8:	0f b6       	in	r0, 0x3f	; 63
    54ea:	f8 94       	cli
    54ec:	de bf       	out	0x3e, r29	; 62
    54ee:	0f be       	out	0x3f, r0	; 63
    54f0:	cd bf       	out	0x3d, r28	; 61
    54f2:	cf 91       	pop	r28
    54f4:	df 91       	pop	r29
    54f6:	08 95       	ret

000054f8 <Check_Collision>:
/*===================================== Check Car front from any Obstacle =====================================*/
void Check_Collision()
{
    54f8:	df 93       	push	r29
    54fa:	cf 93       	push	r28
    54fc:	cd b7       	in	r28, 0x3d	; 61
    54fe:	de b7       	in	r29, 0x3e	; 62
	Ultra_Distance_Front = UltraSonic_ICR_Read(TRIGGER_PORT_1,TRIGGER_PIN_1);
    5500:	84 e4       	ldi	r24, 0x44	; 68
    5502:	65 e0       	ldi	r22, 0x05	; 5
    5504:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <UltraSonic_ICR_Read>
    5508:	90 93 ea 01 	sts	0x01EA, r25
    550c:	80 93 e9 01 	sts	0x01E9, r24
	if((Ultra_Distance_Front <= 40) && (Choice == FORWARD))
    5510:	80 91 e9 01 	lds	r24, 0x01E9
    5514:	90 91 ea 01 	lds	r25, 0x01EA
    5518:	89 32       	cpi	r24, 0x29	; 41
    551a:	91 05       	cpc	r25, r1
    551c:	88 f4       	brcc	.+34     	; 0x5540 <Check_Collision+0x48>
    551e:	80 91 e5 01 	lds	r24, 0x01E5
    5522:	86 34       	cpi	r24, 0x46	; 70
    5524:	69 f4       	brne	.+26     	; 0x5540 <Check_Collision+0x48>
	{
		DC_STOP(PORT_A,HIGH);
    5526:	81 e4       	ldi	r24, 0x41	; 65
    5528:	61 e0       	ldi	r22, 0x01	; 1
    552a:	0e 94 9f 1a 	call	0x353e	; 0x353e <DC_STOP>
		LED_ON(RED_LED_PORT,RED_LED_PIN);
    552e:	83 e4       	ldi	r24, 0x43	; 67
    5530:	62 e0       	ldi	r22, 0x02	; 2
    5532:	0e 94 07 18 	call	0x300e	; 0x300e <LED_ON>
		LED_OFF(GREEN_LED_PORT,GREEN_LED_PIN);
    5536:	83 e4       	ldi	r24, 0x43	; 67
    5538:	63 e0       	ldi	r22, 0x03	; 3
    553a:	0e 94 18 18 	call	0x3030	; 0x3030 <LED_OFF>
    553e:	08 c0       	rjmp	.+16     	; 0x5550 <Check_Collision+0x58>
	}
	else
	{
		LED_OFF(RED_LED_PORT,RED_LED_PIN);
    5540:	83 e4       	ldi	r24, 0x43	; 67
    5542:	62 e0       	ldi	r22, 0x02	; 2
    5544:	0e 94 18 18 	call	0x3030	; 0x3030 <LED_OFF>
		LED_ON(GREEN_LED_PORT,GREEN_LED_PIN);
    5548:	83 e4       	ldi	r24, 0x43	; 67
    554a:	63 e0       	ldi	r22, 0x03	; 3
    554c:	0e 94 07 18 	call	0x300e	; 0x300e <LED_ON>
	}
}
    5550:	cf 91       	pop	r28
    5552:	df 91       	pop	r29
    5554:	08 95       	ret

00005556 <Start_Car>:
/*===================================== Car Start =====================================*/
void Start_Car()
{
    5556:	df 93       	push	r29
    5558:	cf 93       	push	r28
    555a:	cd b7       	in	r28, 0x3d	; 61
    555c:	de b7       	in	r29, 0x3e	; 62
    555e:	0d c0       	rjmp	.+26     	; 0x557a <Start_Car+0x24>
	while(!Car_Start)
	{
		switch (Button_u8read(START_BUTTON_PORT,START_BUTTON_PIN))
    5560:	81 e4       	ldi	r24, 0x41	; 65
    5562:	60 e0       	ldi	r22, 0x00	; 0
    5564:	0e 94 86 07 	call	0xf0c	; 0xf0c <Button_u8read>
    5568:	88 2f       	mov	r24, r24
    556a:	90 e0       	ldi	r25, 0x00	; 0
    556c:	00 97       	sbiw	r24, 0x00	; 0
    556e:	19 f4       	brne	.+6      	; 0x5576 <Start_Car+0x20>
		{
		case 0:
			Car_Start = 1;
    5570:	81 e0       	ldi	r24, 0x01	; 1
    5572:	80 93 d5 01 	sts	0x01D5, r24
			break;
		}
		Show_Car_Engine_Status();
    5576:	0e 94 c6 29 	call	0x538c	; 0x538c <Show_Car_Engine_Status>
	}
}
/*===================================== Car Start =====================================*/
void Start_Car()
{
	while(!Car_Start)
    557a:	80 91 d5 01 	lds	r24, 0x01D5
    557e:	88 23       	and	r24, r24
    5580:	79 f3       	breq	.-34     	; 0x5560 <Start_Car+0xa>
			Car_Start = 1;
			break;
		}
		Show_Car_Engine_Status();
	}
	LCD_Move_Cursor(1,1);
    5582:	81 e0       	ldi	r24, 0x01	; 1
    5584:	61 e0       	ldi	r22, 0x01	; 1
    5586:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <LCD_Move_Cursor>
	LCD_vSendString("Car Speed : ");
    558a:	81 e7       	ldi	r24, 0x71	; 113
    558c:	90 e0       	ldi	r25, 0x00	; 0
    558e:	0e 94 32 16 	call	0x2c64	; 0x2c64 <LCD_vSendString>
	LCD_Move_Cursor(2,1);
    5592:	82 e0       	ldi	r24, 0x02	; 2
    5594:	61 e0       	ldi	r22, 0x01	; 1
    5596:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <LCD_Move_Cursor>
	LCD_vSendString("Front Dist : ");
    559a:	8e e7       	ldi	r24, 0x7E	; 126
    559c:	90 e0       	ldi	r25, 0x00	; 0
    559e:	0e 94 32 16 	call	0x2c64	; 0x2c64 <LCD_vSendString>
}
    55a2:	cf 91       	pop	r28
    55a4:	df 91       	pop	r29
    55a6:	08 95       	ret

000055a8 <Car_Control_Speed_Using_UltraSonic>:
/*===================================== Car Speed Controlled Using UltraSonic =====================================*/
void Car_Control_Speed_Using_UltraSonic()
{
    55a8:	df 93       	push	r29
    55aa:	cf 93       	push	r28
    55ac:	cd b7       	in	r28, 0x3d	; 61
    55ae:	de b7       	in	r29, 0x3e	; 62
    55b0:	6c 97       	sbiw	r28, 0x1c	; 28
    55b2:	0f b6       	in	r0, 0x3f	; 63
    55b4:	f8 94       	cli
    55b6:	de bf       	out	0x3e, r29	; 62
    55b8:	0f be       	out	0x3f, r0	; 63
    55ba:	cd bf       	out	0x3d, r28	; 61
	if(Speed_Control_Using_UltraSonic)
    55bc:	80 91 d6 01 	lds	r24, 0x01D6
    55c0:	88 23       	and	r24, r24
    55c2:	09 f4       	brne	.+2      	; 0x55c6 <Car_Control_Speed_Using_UltraSonic+0x1e>
    55c4:	62 c1       	rjmp	.+708    	; 0x588a <Car_Control_Speed_Using_UltraSonic+0x2e2>
	{
		LCD_Clear_Screen();
    55c6:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_Clear_Screen>
		LCD_vSendString(" Control Speed ");
    55ca:	8b ea       	ldi	r24, 0xAB	; 171
    55cc:	90 e0       	ldi	r25, 0x00	; 0
    55ce:	0e 94 32 16 	call	0x2c64	; 0x2c64 <LCD_vSendString>
		LCD_Move_Cursor(2,1);
    55d2:	82 e0       	ldi	r24, 0x02	; 2
    55d4:	61 e0       	ldi	r22, 0x01	; 1
    55d6:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <LCD_Move_Cursor>
		LCD_vSendString(" By UltraSonic ");
    55da:	8b eb       	ldi	r24, 0xBB	; 187
    55dc:	90 e0       	ldi	r25, 0x00	; 0
    55de:	0e 94 32 16 	call	0x2c64	; 0x2c64 <LCD_vSendString>
    55e2:	80 e0       	ldi	r24, 0x00	; 0
    55e4:	90 e0       	ldi	r25, 0x00	; 0
    55e6:	aa e7       	ldi	r26, 0x7A	; 122
    55e8:	b4 e4       	ldi	r27, 0x44	; 68
    55ea:	89 8f       	std	Y+25, r24	; 0x19
    55ec:	9a 8f       	std	Y+26, r25	; 0x1a
    55ee:	ab 8f       	std	Y+27, r26	; 0x1b
    55f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55f2:	69 8d       	ldd	r22, Y+25	; 0x19
    55f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    55f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    55fa:	20 e0       	ldi	r18, 0x00	; 0
    55fc:	30 e0       	ldi	r19, 0x00	; 0
    55fe:	4a ef       	ldi	r20, 0xFA	; 250
    5600:	54 e4       	ldi	r21, 0x44	; 68
    5602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5606:	dc 01       	movw	r26, r24
    5608:	cb 01       	movw	r24, r22
    560a:	8d 8b       	std	Y+21, r24	; 0x15
    560c:	9e 8b       	std	Y+22, r25	; 0x16
    560e:	af 8b       	std	Y+23, r26	; 0x17
    5610:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5612:	6d 89       	ldd	r22, Y+21	; 0x15
    5614:	7e 89       	ldd	r23, Y+22	; 0x16
    5616:	8f 89       	ldd	r24, Y+23	; 0x17
    5618:	98 8d       	ldd	r25, Y+24	; 0x18
    561a:	20 e0       	ldi	r18, 0x00	; 0
    561c:	30 e0       	ldi	r19, 0x00	; 0
    561e:	40 e8       	ldi	r20, 0x80	; 128
    5620:	5f e3       	ldi	r21, 0x3F	; 63
    5622:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5626:	88 23       	and	r24, r24
    5628:	2c f4       	brge	.+10     	; 0x5634 <Car_Control_Speed_Using_UltraSonic+0x8c>
		__ticks = 1;
    562a:	81 e0       	ldi	r24, 0x01	; 1
    562c:	90 e0       	ldi	r25, 0x00	; 0
    562e:	9c 8b       	std	Y+20, r25	; 0x14
    5630:	8b 8b       	std	Y+19, r24	; 0x13
    5632:	3f c0       	rjmp	.+126    	; 0x56b2 <Car_Control_Speed_Using_UltraSonic+0x10a>
	else if (__tmp > 65535)
    5634:	6d 89       	ldd	r22, Y+21	; 0x15
    5636:	7e 89       	ldd	r23, Y+22	; 0x16
    5638:	8f 89       	ldd	r24, Y+23	; 0x17
    563a:	98 8d       	ldd	r25, Y+24	; 0x18
    563c:	20 e0       	ldi	r18, 0x00	; 0
    563e:	3f ef       	ldi	r19, 0xFF	; 255
    5640:	4f e7       	ldi	r20, 0x7F	; 127
    5642:	57 e4       	ldi	r21, 0x47	; 71
    5644:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5648:	18 16       	cp	r1, r24
    564a:	4c f5       	brge	.+82     	; 0x569e <Car_Control_Speed_Using_UltraSonic+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    564c:	69 8d       	ldd	r22, Y+25	; 0x19
    564e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5650:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5652:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5654:	20 e0       	ldi	r18, 0x00	; 0
    5656:	30 e0       	ldi	r19, 0x00	; 0
    5658:	40 e2       	ldi	r20, 0x20	; 32
    565a:	51 e4       	ldi	r21, 0x41	; 65
    565c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5660:	dc 01       	movw	r26, r24
    5662:	cb 01       	movw	r24, r22
    5664:	bc 01       	movw	r22, r24
    5666:	cd 01       	movw	r24, r26
    5668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    566c:	dc 01       	movw	r26, r24
    566e:	cb 01       	movw	r24, r22
    5670:	9c 8b       	std	Y+20, r25	; 0x14
    5672:	8b 8b       	std	Y+19, r24	; 0x13
    5674:	0f c0       	rjmp	.+30     	; 0x5694 <Car_Control_Speed_Using_UltraSonic+0xec>
    5676:	88 ec       	ldi	r24, 0xC8	; 200
    5678:	90 e0       	ldi	r25, 0x00	; 0
    567a:	9a 8b       	std	Y+18, r25	; 0x12
    567c:	89 8b       	std	Y+17, r24	; 0x11
    567e:	89 89       	ldd	r24, Y+17	; 0x11
    5680:	9a 89       	ldd	r25, Y+18	; 0x12
    5682:	01 97       	sbiw	r24, 0x01	; 1
    5684:	f1 f7       	brne	.-4      	; 0x5682 <Car_Control_Speed_Using_UltraSonic+0xda>
    5686:	9a 8b       	std	Y+18, r25	; 0x12
    5688:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    568a:	8b 89       	ldd	r24, Y+19	; 0x13
    568c:	9c 89       	ldd	r25, Y+20	; 0x14
    568e:	01 97       	sbiw	r24, 0x01	; 1
    5690:	9c 8b       	std	Y+20, r25	; 0x14
    5692:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5694:	8b 89       	ldd	r24, Y+19	; 0x13
    5696:	9c 89       	ldd	r25, Y+20	; 0x14
    5698:	00 97       	sbiw	r24, 0x00	; 0
    569a:	69 f7       	brne	.-38     	; 0x5676 <Car_Control_Speed_Using_UltraSonic+0xce>
    569c:	14 c0       	rjmp	.+40     	; 0x56c6 <Car_Control_Speed_Using_UltraSonic+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    569e:	6d 89       	ldd	r22, Y+21	; 0x15
    56a0:	7e 89       	ldd	r23, Y+22	; 0x16
    56a2:	8f 89       	ldd	r24, Y+23	; 0x17
    56a4:	98 8d       	ldd	r25, Y+24	; 0x18
    56a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56aa:	dc 01       	movw	r26, r24
    56ac:	cb 01       	movw	r24, r22
    56ae:	9c 8b       	std	Y+20, r25	; 0x14
    56b0:	8b 8b       	std	Y+19, r24	; 0x13
    56b2:	8b 89       	ldd	r24, Y+19	; 0x13
    56b4:	9c 89       	ldd	r25, Y+20	; 0x14
    56b6:	98 8b       	std	Y+16, r25	; 0x10
    56b8:	8f 87       	std	Y+15, r24	; 0x0f
    56ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    56bc:	98 89       	ldd	r25, Y+16	; 0x10
    56be:	01 97       	sbiw	r24, 0x01	; 1
    56c0:	f1 f7       	brne	.-4      	; 0x56be <Car_Control_Speed_Using_UltraSonic+0x116>
    56c2:	98 8b       	std	Y+16, r25	; 0x10
    56c4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		PWM_Timer0_Generate(AUTOMATIC_SPEED);
    56c6:	8e e1       	ldi	r24, 0x1E	; 30
    56c8:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <PWM_Timer0_Generate>
    56cc:	de c0       	rjmp	.+444    	; 0x588a <Car_Control_Speed_Using_UltraSonic+0x2e2>
	}
	while(Speed_Control_Using_UltraSonic)
	{
		Ultra_Distance = UltraSonic_ICR_Read(TRIGGER_PORT_1,TRIGGER_PIN_1);
    56ce:	84 e4       	ldi	r24, 0x44	; 68
    56d0:	65 e0       	ldi	r22, 0x05	; 5
    56d2:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <UltraSonic_ICR_Read>
    56d6:	cc 01       	movw	r24, r24
    56d8:	a0 e0       	ldi	r26, 0x00	; 0
    56da:	b0 e0       	ldi	r27, 0x00	; 0
    56dc:	80 93 e1 01 	sts	0x01E1, r24
    56e0:	90 93 e2 01 	sts	0x01E2, r25
    56e4:	a0 93 e3 01 	sts	0x01E3, r26
    56e8:	b0 93 e4 01 	sts	0x01E4, r27
		DC_Move_Forward(PORT_A,HIGH);
    56ec:	81 e4       	ldi	r24, 0x41	; 65
    56ee:	61 e0       	ldi	r22, 0x01	; 1
    56f0:	0e 94 6f 18 	call	0x30de	; 0x30de <DC_Move_Forward>
		if(Ultra_Distance >= 95)
    56f4:	80 91 e1 01 	lds	r24, 0x01E1
    56f8:	90 91 e2 01 	lds	r25, 0x01E2
    56fc:	a0 91 e3 01 	lds	r26, 0x01E3
    5700:	b0 91 e4 01 	lds	r27, 0x01E4
    5704:	8f 35       	cpi	r24, 0x5F	; 95
    5706:	91 05       	cpc	r25, r1
    5708:	a1 05       	cpc	r26, r1
    570a:	b1 05       	cpc	r27, r1
    570c:	20 f0       	brcs	.+8      	; 0x5716 <Car_Control_Speed_Using_UltraSonic+0x16e>
		{
			PWM_Timer2_Generate(90);
    570e:	8a e5       	ldi	r24, 0x5A	; 90
    5710:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <PWM_Timer2_Generate>
    5714:	1c c0       	rjmp	.+56     	; 0x574e <Car_Control_Speed_Using_UltraSonic+0x1a6>
		}
		else if (Ultra_Distance <= 15)
    5716:	80 91 e1 01 	lds	r24, 0x01E1
    571a:	90 91 e2 01 	lds	r25, 0x01E2
    571e:	a0 91 e3 01 	lds	r26, 0x01E3
    5722:	b0 91 e4 01 	lds	r27, 0x01E4
    5726:	80 31       	cpi	r24, 0x10	; 16
    5728:	91 05       	cpc	r25, r1
    572a:	a1 05       	cpc	r26, r1
    572c:	b1 05       	cpc	r27, r1
    572e:	28 f4       	brcc	.+10     	; 0x573a <Car_Control_Speed_Using_UltraSonic+0x192>
		{
			DC_STOP(PORT_A,HIGH);
    5730:	81 e4       	ldi	r24, 0x41	; 65
    5732:	61 e0       	ldi	r22, 0x01	; 1
    5734:	0e 94 9f 1a 	call	0x353e	; 0x353e <DC_STOP>
    5738:	0a c0       	rjmp	.+20     	; 0x574e <Car_Control_Speed_Using_UltraSonic+0x1a6>
		}
		else
		{
			PWM_Timer2_Generate(Ultra_Distance);
    573a:	80 91 e1 01 	lds	r24, 0x01E1
    573e:	90 91 e2 01 	lds	r25, 0x01E2
    5742:	a0 91 e3 01 	lds	r26, 0x01E3
    5746:	b0 91 e4 01 	lds	r27, 0x01E4
    574a:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <PWM_Timer2_Generate>
    574e:	80 e0       	ldi	r24, 0x00	; 0
    5750:	90 e0       	ldi	r25, 0x00	; 0
    5752:	a8 ec       	ldi	r26, 0xC8	; 200
    5754:	b1 e4       	ldi	r27, 0x41	; 65
    5756:	8b 87       	std	Y+11, r24	; 0x0b
    5758:	9c 87       	std	Y+12, r25	; 0x0c
    575a:	ad 87       	std	Y+13, r26	; 0x0d
    575c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    575e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5760:	7c 85       	ldd	r23, Y+12	; 0x0c
    5762:	8d 85       	ldd	r24, Y+13	; 0x0d
    5764:	9e 85       	ldd	r25, Y+14	; 0x0e
    5766:	20 e0       	ldi	r18, 0x00	; 0
    5768:	30 e0       	ldi	r19, 0x00	; 0
    576a:	4a ef       	ldi	r20, 0xFA	; 250
    576c:	54 e4       	ldi	r21, 0x44	; 68
    576e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5772:	dc 01       	movw	r26, r24
    5774:	cb 01       	movw	r24, r22
    5776:	8f 83       	std	Y+7, r24	; 0x07
    5778:	98 87       	std	Y+8, r25	; 0x08
    577a:	a9 87       	std	Y+9, r26	; 0x09
    577c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    577e:	6f 81       	ldd	r22, Y+7	; 0x07
    5780:	78 85       	ldd	r23, Y+8	; 0x08
    5782:	89 85       	ldd	r24, Y+9	; 0x09
    5784:	9a 85       	ldd	r25, Y+10	; 0x0a
    5786:	20 e0       	ldi	r18, 0x00	; 0
    5788:	30 e0       	ldi	r19, 0x00	; 0
    578a:	40 e8       	ldi	r20, 0x80	; 128
    578c:	5f e3       	ldi	r21, 0x3F	; 63
    578e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5792:	88 23       	and	r24, r24
    5794:	2c f4       	brge	.+10     	; 0x57a0 <Car_Control_Speed_Using_UltraSonic+0x1f8>
		__ticks = 1;
    5796:	81 e0       	ldi	r24, 0x01	; 1
    5798:	90 e0       	ldi	r25, 0x00	; 0
    579a:	9e 83       	std	Y+6, r25	; 0x06
    579c:	8d 83       	std	Y+5, r24	; 0x05
    579e:	3f c0       	rjmp	.+126    	; 0x581e <Car_Control_Speed_Using_UltraSonic+0x276>
	else if (__tmp > 65535)
    57a0:	6f 81       	ldd	r22, Y+7	; 0x07
    57a2:	78 85       	ldd	r23, Y+8	; 0x08
    57a4:	89 85       	ldd	r24, Y+9	; 0x09
    57a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    57a8:	20 e0       	ldi	r18, 0x00	; 0
    57aa:	3f ef       	ldi	r19, 0xFF	; 255
    57ac:	4f e7       	ldi	r20, 0x7F	; 127
    57ae:	57 e4       	ldi	r21, 0x47	; 71
    57b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    57b4:	18 16       	cp	r1, r24
    57b6:	4c f5       	brge	.+82     	; 0x580a <Car_Control_Speed_Using_UltraSonic+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    57ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    57bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    57be:	9e 85       	ldd	r25, Y+14	; 0x0e
    57c0:	20 e0       	ldi	r18, 0x00	; 0
    57c2:	30 e0       	ldi	r19, 0x00	; 0
    57c4:	40 e2       	ldi	r20, 0x20	; 32
    57c6:	51 e4       	ldi	r21, 0x41	; 65
    57c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57cc:	dc 01       	movw	r26, r24
    57ce:	cb 01       	movw	r24, r22
    57d0:	bc 01       	movw	r22, r24
    57d2:	cd 01       	movw	r24, r26
    57d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57d8:	dc 01       	movw	r26, r24
    57da:	cb 01       	movw	r24, r22
    57dc:	9e 83       	std	Y+6, r25	; 0x06
    57de:	8d 83       	std	Y+5, r24	; 0x05
    57e0:	0f c0       	rjmp	.+30     	; 0x5800 <Car_Control_Speed_Using_UltraSonic+0x258>
    57e2:	88 ec       	ldi	r24, 0xC8	; 200
    57e4:	90 e0       	ldi	r25, 0x00	; 0
    57e6:	9c 83       	std	Y+4, r25	; 0x04
    57e8:	8b 83       	std	Y+3, r24	; 0x03
    57ea:	8b 81       	ldd	r24, Y+3	; 0x03
    57ec:	9c 81       	ldd	r25, Y+4	; 0x04
    57ee:	01 97       	sbiw	r24, 0x01	; 1
    57f0:	f1 f7       	brne	.-4      	; 0x57ee <Car_Control_Speed_Using_UltraSonic+0x246>
    57f2:	9c 83       	std	Y+4, r25	; 0x04
    57f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57f6:	8d 81       	ldd	r24, Y+5	; 0x05
    57f8:	9e 81       	ldd	r25, Y+6	; 0x06
    57fa:	01 97       	sbiw	r24, 0x01	; 1
    57fc:	9e 83       	std	Y+6, r25	; 0x06
    57fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5800:	8d 81       	ldd	r24, Y+5	; 0x05
    5802:	9e 81       	ldd	r25, Y+6	; 0x06
    5804:	00 97       	sbiw	r24, 0x00	; 0
    5806:	69 f7       	brne	.-38     	; 0x57e2 <Car_Control_Speed_Using_UltraSonic+0x23a>
    5808:	14 c0       	rjmp	.+40     	; 0x5832 <Car_Control_Speed_Using_UltraSonic+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    580a:	6f 81       	ldd	r22, Y+7	; 0x07
    580c:	78 85       	ldd	r23, Y+8	; 0x08
    580e:	89 85       	ldd	r24, Y+9	; 0x09
    5810:	9a 85       	ldd	r25, Y+10	; 0x0a
    5812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5816:	dc 01       	movw	r26, r24
    5818:	cb 01       	movw	r24, r22
    581a:	9e 83       	std	Y+6, r25	; 0x06
    581c:	8d 83       	std	Y+5, r24	; 0x05
    581e:	8d 81       	ldd	r24, Y+5	; 0x05
    5820:	9e 81       	ldd	r25, Y+6	; 0x06
    5822:	9a 83       	std	Y+2, r25	; 0x02
    5824:	89 83       	std	Y+1, r24	; 0x01
    5826:	89 81       	ldd	r24, Y+1	; 0x01
    5828:	9a 81       	ldd	r25, Y+2	; 0x02
    582a:	01 97       	sbiw	r24, 0x01	; 1
    582c:	f1 f7       	brne	.-4      	; 0x582a <Car_Control_Speed_Using_UltraSonic+0x282>
    582e:	9a 83       	std	Y+2, r25	; 0x02
    5830:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(25);
		if(READ_BIT(UCSRA,RXC) == HIGH)
    5832:	eb e2       	ldi	r30, 0x2B	; 43
    5834:	f0 e0       	ldi	r31, 0x00	; 0
    5836:	80 81       	ld	r24, Z
    5838:	88 1f       	adc	r24, r24
    583a:	88 27       	eor	r24, r24
    583c:	88 1f       	adc	r24, r24
    583e:	88 2f       	mov	r24, r24
    5840:	90 e0       	ldi	r25, 0x00	; 0
    5842:	90 70       	andi	r25, 0x00	; 0
    5844:	81 30       	cpi	r24, 0x01	; 1
    5846:	91 05       	cpc	r25, r1
    5848:	01 f5       	brne	.+64     	; 0x588a <Car_Control_Speed_Using_UltraSonic+0x2e2>
		{
			if(UDR == CAR_MOVEMENT_USING_ULTRASONIC_OUT)
    584a:	ec e2       	ldi	r30, 0x2C	; 44
    584c:	f0 e0       	ldi	r31, 0x00	; 0
    584e:	80 81       	ld	r24, Z
    5850:	85 37       	cpi	r24, 0x75	; 117
    5852:	d9 f4       	brne	.+54     	; 0x588a <Car_Control_Speed_Using_UltraSonic+0x2e2>
			{
				Speed_Control_Using_UltraSonic = LOW;
    5854:	10 92 d6 01 	sts	0x01D6, r1
				DC_STOP(PORT_A,HIGH);
    5858:	81 e4       	ldi	r24, 0x41	; 65
    585a:	61 e0       	ldi	r22, 0x01	; 1
    585c:	0e 94 9f 1a 	call	0x353e	; 0x353e <DC_STOP>
				LCD_Clear_Screen();
    5860:	0e 94 03 12 	call	0x2406	; 0x2406 <LCD_Clear_Screen>
				LCD_Move_Cursor(1,1);
    5864:	81 e0       	ldi	r24, 0x01	; 1
    5866:	61 e0       	ldi	r22, 0x01	; 1
    5868:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <LCD_Move_Cursor>
				LCD_vSendString("Car Speed : ");
    586c:	81 e7       	ldi	r24, 0x71	; 113
    586e:	90 e0       	ldi	r25, 0x00	; 0
    5870:	0e 94 32 16 	call	0x2c64	; 0x2c64 <LCD_vSendString>
				LCD_Move_Cursor(2,1);
    5874:	82 e0       	ldi	r24, 0x02	; 2
    5876:	61 e0       	ldi	r22, 0x01	; 1
    5878:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <LCD_Move_Cursor>
				LCD_vSendString("Front Dist : ");
    587c:	8e e7       	ldi	r24, 0x7E	; 126
    587e:	90 e0       	ldi	r25, 0x00	; 0
    5880:	0e 94 32 16 	call	0x2c64	; 0x2c64 <LCD_vSendString>
				PWM_Timer2_Generate(AVERAGE_SPEED);
    5884:	86 e4       	ldi	r24, 0x46	; 70
    5886:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <PWM_Timer2_Generate>
		LCD_Move_Cursor(2,1);
		LCD_vSendString(" By UltraSonic ");
		_delay_ms(1000);
		PWM_Timer0_Generate(AUTOMATIC_SPEED);
	}
	while(Speed_Control_Using_UltraSonic)
    588a:	80 91 d6 01 	lds	r24, 0x01D6
    588e:	88 23       	and	r24, r24
    5890:	09 f0       	breq	.+2      	; 0x5894 <Car_Control_Speed_Using_UltraSonic+0x2ec>
    5892:	1d cf       	rjmp	.-454    	; 0x56ce <Car_Control_Speed_Using_UltraSonic+0x126>
				LCD_vSendString("Front Dist : ");
				PWM_Timer2_Generate(AVERAGE_SPEED);
			}
		}
	}
}
    5894:	6c 96       	adiw	r28, 0x1c	; 28
    5896:	0f b6       	in	r0, 0x3f	; 63
    5898:	f8 94       	cli
    589a:	de bf       	out	0x3e, r29	; 62
    589c:	0f be       	out	0x3f, r0	; 63
    589e:	cd bf       	out	0x3d, r28	; 61
    58a0:	cf 91       	pop	r28
    58a2:	df 91       	pop	r29
    58a4:	08 95       	ret

000058a6 <__udivmodqi4>:
    58a6:	99 1b       	sub	r25, r25
    58a8:	79 e0       	ldi	r23, 0x09	; 9
    58aa:	04 c0       	rjmp	.+8      	; 0x58b4 <__udivmodqi4_ep>

000058ac <__udivmodqi4_loop>:
    58ac:	99 1f       	adc	r25, r25
    58ae:	96 17       	cp	r25, r22
    58b0:	08 f0       	brcs	.+2      	; 0x58b4 <__udivmodqi4_ep>
    58b2:	96 1b       	sub	r25, r22

000058b4 <__udivmodqi4_ep>:
    58b4:	88 1f       	adc	r24, r24
    58b6:	7a 95       	dec	r23
    58b8:	c9 f7       	brne	.-14     	; 0x58ac <__udivmodqi4_loop>
    58ba:	80 95       	com	r24
    58bc:	08 95       	ret

000058be <__udivmodhi4>:
    58be:	aa 1b       	sub	r26, r26
    58c0:	bb 1b       	sub	r27, r27
    58c2:	51 e1       	ldi	r21, 0x11	; 17
    58c4:	07 c0       	rjmp	.+14     	; 0x58d4 <__udivmodhi4_ep>

000058c6 <__udivmodhi4_loop>:
    58c6:	aa 1f       	adc	r26, r26
    58c8:	bb 1f       	adc	r27, r27
    58ca:	a6 17       	cp	r26, r22
    58cc:	b7 07       	cpc	r27, r23
    58ce:	10 f0       	brcs	.+4      	; 0x58d4 <__udivmodhi4_ep>
    58d0:	a6 1b       	sub	r26, r22
    58d2:	b7 0b       	sbc	r27, r23

000058d4 <__udivmodhi4_ep>:
    58d4:	88 1f       	adc	r24, r24
    58d6:	99 1f       	adc	r25, r25
    58d8:	5a 95       	dec	r21
    58da:	a9 f7       	brne	.-22     	; 0x58c6 <__udivmodhi4_loop>
    58dc:	80 95       	com	r24
    58de:	90 95       	com	r25
    58e0:	bc 01       	movw	r22, r24
    58e2:	cd 01       	movw	r24, r26
    58e4:	08 95       	ret

000058e6 <__udivmodsi4>:
    58e6:	a1 e2       	ldi	r26, 0x21	; 33
    58e8:	1a 2e       	mov	r1, r26
    58ea:	aa 1b       	sub	r26, r26
    58ec:	bb 1b       	sub	r27, r27
    58ee:	fd 01       	movw	r30, r26
    58f0:	0d c0       	rjmp	.+26     	; 0x590c <__udivmodsi4_ep>

000058f2 <__udivmodsi4_loop>:
    58f2:	aa 1f       	adc	r26, r26
    58f4:	bb 1f       	adc	r27, r27
    58f6:	ee 1f       	adc	r30, r30
    58f8:	ff 1f       	adc	r31, r31
    58fa:	a2 17       	cp	r26, r18
    58fc:	b3 07       	cpc	r27, r19
    58fe:	e4 07       	cpc	r30, r20
    5900:	f5 07       	cpc	r31, r21
    5902:	20 f0       	brcs	.+8      	; 0x590c <__udivmodsi4_ep>
    5904:	a2 1b       	sub	r26, r18
    5906:	b3 0b       	sbc	r27, r19
    5908:	e4 0b       	sbc	r30, r20
    590a:	f5 0b       	sbc	r31, r21

0000590c <__udivmodsi4_ep>:
    590c:	66 1f       	adc	r22, r22
    590e:	77 1f       	adc	r23, r23
    5910:	88 1f       	adc	r24, r24
    5912:	99 1f       	adc	r25, r25
    5914:	1a 94       	dec	r1
    5916:	69 f7       	brne	.-38     	; 0x58f2 <__udivmodsi4_loop>
    5918:	60 95       	com	r22
    591a:	70 95       	com	r23
    591c:	80 95       	com	r24
    591e:	90 95       	com	r25
    5920:	9b 01       	movw	r18, r22
    5922:	ac 01       	movw	r20, r24
    5924:	bd 01       	movw	r22, r26
    5926:	cf 01       	movw	r24, r30
    5928:	08 95       	ret

0000592a <__prologue_saves__>:
    592a:	2f 92       	push	r2
    592c:	3f 92       	push	r3
    592e:	4f 92       	push	r4
    5930:	5f 92       	push	r5
    5932:	6f 92       	push	r6
    5934:	7f 92       	push	r7
    5936:	8f 92       	push	r8
    5938:	9f 92       	push	r9
    593a:	af 92       	push	r10
    593c:	bf 92       	push	r11
    593e:	cf 92       	push	r12
    5940:	df 92       	push	r13
    5942:	ef 92       	push	r14
    5944:	ff 92       	push	r15
    5946:	0f 93       	push	r16
    5948:	1f 93       	push	r17
    594a:	cf 93       	push	r28
    594c:	df 93       	push	r29
    594e:	cd b7       	in	r28, 0x3d	; 61
    5950:	de b7       	in	r29, 0x3e	; 62
    5952:	ca 1b       	sub	r28, r26
    5954:	db 0b       	sbc	r29, r27
    5956:	0f b6       	in	r0, 0x3f	; 63
    5958:	f8 94       	cli
    595a:	de bf       	out	0x3e, r29	; 62
    595c:	0f be       	out	0x3f, r0	; 63
    595e:	cd bf       	out	0x3d, r28	; 61
    5960:	09 94       	ijmp

00005962 <__epilogue_restores__>:
    5962:	2a 88       	ldd	r2, Y+18	; 0x12
    5964:	39 88       	ldd	r3, Y+17	; 0x11
    5966:	48 88       	ldd	r4, Y+16	; 0x10
    5968:	5f 84       	ldd	r5, Y+15	; 0x0f
    596a:	6e 84       	ldd	r6, Y+14	; 0x0e
    596c:	7d 84       	ldd	r7, Y+13	; 0x0d
    596e:	8c 84       	ldd	r8, Y+12	; 0x0c
    5970:	9b 84       	ldd	r9, Y+11	; 0x0b
    5972:	aa 84       	ldd	r10, Y+10	; 0x0a
    5974:	b9 84       	ldd	r11, Y+9	; 0x09
    5976:	c8 84       	ldd	r12, Y+8	; 0x08
    5978:	df 80       	ldd	r13, Y+7	; 0x07
    597a:	ee 80       	ldd	r14, Y+6	; 0x06
    597c:	fd 80       	ldd	r15, Y+5	; 0x05
    597e:	0c 81       	ldd	r16, Y+4	; 0x04
    5980:	1b 81       	ldd	r17, Y+3	; 0x03
    5982:	aa 81       	ldd	r26, Y+2	; 0x02
    5984:	b9 81       	ldd	r27, Y+1	; 0x01
    5986:	ce 0f       	add	r28, r30
    5988:	d1 1d       	adc	r29, r1
    598a:	0f b6       	in	r0, 0x3f	; 63
    598c:	f8 94       	cli
    598e:	de bf       	out	0x3e, r29	; 62
    5990:	0f be       	out	0x3f, r0	; 63
    5992:	cd bf       	out	0x3d, r28	; 61
    5994:	ed 01       	movw	r28, r26
    5996:	08 95       	ret

00005998 <itoa>:
    5998:	fb 01       	movw	r30, r22
    599a:	9f 01       	movw	r18, r30
    599c:	e8 94       	clt
    599e:	42 30       	cpi	r20, 0x02	; 2
    59a0:	c4 f0       	brlt	.+48     	; 0x59d2 <itoa+0x3a>
    59a2:	45 32       	cpi	r20, 0x25	; 37
    59a4:	b4 f4       	brge	.+44     	; 0x59d2 <itoa+0x3a>
    59a6:	4a 30       	cpi	r20, 0x0A	; 10
    59a8:	29 f4       	brne	.+10     	; 0x59b4 <itoa+0x1c>
    59aa:	97 fb       	bst	r25, 7
    59ac:	1e f4       	brtc	.+6      	; 0x59b4 <itoa+0x1c>
    59ae:	90 95       	com	r25
    59b0:	81 95       	neg	r24
    59b2:	9f 4f       	sbci	r25, 0xFF	; 255
    59b4:	64 2f       	mov	r22, r20
    59b6:	77 27       	eor	r23, r23
    59b8:	0e 94 5f 2c 	call	0x58be	; 0x58be <__udivmodhi4>
    59bc:	80 5d       	subi	r24, 0xD0	; 208
    59be:	8a 33       	cpi	r24, 0x3A	; 58
    59c0:	0c f0       	brlt	.+2      	; 0x59c4 <itoa+0x2c>
    59c2:	89 5d       	subi	r24, 0xD9	; 217
    59c4:	81 93       	st	Z+, r24
    59c6:	cb 01       	movw	r24, r22
    59c8:	00 97       	sbiw	r24, 0x00	; 0
    59ca:	a1 f7       	brne	.-24     	; 0x59b4 <itoa+0x1c>
    59cc:	16 f4       	brtc	.+4      	; 0x59d2 <itoa+0x3a>
    59ce:	5d e2       	ldi	r21, 0x2D	; 45
    59d0:	51 93       	st	Z+, r21
    59d2:	10 82       	st	Z, r1
    59d4:	c9 01       	movw	r24, r18
    59d6:	0c 94 ed 2c 	jmp	0x59da	; 0x59da <strrev>

000059da <strrev>:
    59da:	dc 01       	movw	r26, r24
    59dc:	fc 01       	movw	r30, r24
    59de:	67 2f       	mov	r22, r23
    59e0:	71 91       	ld	r23, Z+
    59e2:	77 23       	and	r23, r23
    59e4:	e1 f7       	brne	.-8      	; 0x59de <strrev+0x4>
    59e6:	32 97       	sbiw	r30, 0x02	; 2
    59e8:	04 c0       	rjmp	.+8      	; 0x59f2 <strrev+0x18>
    59ea:	7c 91       	ld	r23, X
    59ec:	6d 93       	st	X+, r22
    59ee:	70 83       	st	Z, r23
    59f0:	62 91       	ld	r22, -Z
    59f2:	ae 17       	cp	r26, r30
    59f4:	bf 07       	cpc	r27, r31
    59f6:	c8 f3       	brcs	.-14     	; 0x59ea <strrev+0x10>
    59f8:	08 95       	ret

000059fa <_exit>:
    59fa:	f8 94       	cli

000059fc <__stop_program>:
    59fc:	ff cf       	rjmp	.-2      	; 0x59fc <__stop_program>
